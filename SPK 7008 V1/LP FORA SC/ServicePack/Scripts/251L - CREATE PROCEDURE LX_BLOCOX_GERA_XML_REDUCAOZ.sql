Create Procedure [dbo].[LX_BLOCOX_GERA_XML_REDUCAOZ]   
         ( @CRO CHAR(6),   
          @CRZ CHAR (6),   
          @DATA_MES DATETIME,   
          @SERIALNUMBER VARCHAR(20),   
          @CODIGO_FILIAL CHAR(6),   
          @TERMINAL CHAR(3),  
          @NUMEROCREDENCIAMENTO VARCHAR(15),  
          @VALIDAR BIT = 0, -- #14#  
          @VALIDAR_XSD BIT = 0, -- #23#,  
          @RETORNO_VALIDACAO VARCHAR(1024) = '' OUTPUT,  
          @CRIAR_LCF BIT = 0  )  
AS  
-- 01/04/2022 - #PRODSHOP-11747# - Fillipi Ramos - Correções na geração de código NCM e tratamentos para ignorar situações incomuns que o ECF proporciona.
-- 29/03/2022 - #PRODSHOP-11088# - Fillipi Ramos\Wendel Crespigio - PRODSHOP-11088 - Correções para tratamentos de desconto na geração do XML de RZ.
-- 15/02/2022 - #30# - Wendel Crespigio  - PRODSHOP-10725 - Tratamento para geracao do Codigo GTIN quando nao usa leva em branco. 
-- 12/03/2020 - #29# - Wendel Crespigio   - Tratamento para redução sem vendas no dia. 
-- 18/12/2019 - #28# - Juliana Nascimento - Ajuste no totalizador para valor cancelado.
-- 03/07/2019 - #27# - Diego Moreno       - Melhoria para considerar o CRZ como inteiro ao comparar com a variável @CRZ.  
-- 01/07/2019 - #26# - Diego Moreno       - Utilização de outra variável para tratar os dados de CRZ.  
-- 26/06/2019 - #25# - Diego Moreno       - Melhoria necessária quando o ID_EQUIPAMENTO for diferene porém com COOs e CCFs iguais.  
-- 26/06/2019 - #24# - Diego Moreno       - Processo de captura dos dados da MFD para processar o XML de redução Z.  
-- 11/10/2018 - #23# - Giedson Silva      - Inclusão de tratamento de erro e validação por XSD.  
-- 25/09/2018 - #22# - Roberto Beda - Trata falta de linha de cupom fiscal na tabela LJ_DOCUMENTO_ECF.  
-- 23/09/2018 - #21# - Roberto Beda - Trata falta de linha na tabela LJ_ECF_ITEM.  
-- 20/09/2018 - #20# - Roberto Beda - Retira caracteres de formatação da Inscrição estadual.  
-- 18/09/2018 - #19# - Roberto Beda - Trata falta de linha na tabela LOJA_VENDA_PRODUTO.  
-- 17/09/2018 - #18# - Roberto Beda - Trata LOJA_CONTROLE_FISCAL.DATA_HORA_REDUCAO_Z nulo.  
-- 17/09/2018 - #17# - Roberto Beda - Correção de erro quando a descrição do produto tem mais de 50 caracteres.  
-- 16/09/2018 - #16# - Roberto Beda - Ajustes para evitar bug do Linx POS. Tabelas BLOCOX_... passam a se chamar LJ_BLOCOX_...  
-- 16/09/2018 - #15# - Roberto Beda - Correção no tratamento de ausência de linhas na tabela LJ_ECF_RZ_DETALHE.  
-- 16/09/2018 - #14# - Roberto Beda - Inclusão do recurso de apenas validar os dados.  
-- 15/09/2018 - #13# - Roberto Beda - Trata duplicidade de linhas nas tabelas LOJA_CONTROLE_FISCAL, LOJA_CONTROLE_FISCAL_TARIFAS e LJ_DOCUMENTO_ECF e possibilidade de falta de linas em LJ_ECF_RZ_DETALHE.  
-- 13/09/2018 - #12# - Roberto Beda - Trata inconsistência de ausência de linhas na tabela LJ_ECF_RZ_DETALHE.  
-- 13/09/2018 - #11# - Roberto Beda - Trata inconsistência no valor cancelado da tabela LJ_ECF_ITEM.  
-- 12/09/2018 - #10# - Roberto Beda - Trata inconsistências no banco de dados na tabela LJ_ECF_ITEM, relativa a item cancelado.  
-- 11/09/2018 - #9# - Roberto Beda - Correção do tamanho do campo, para evitar de não obter a inscrição estadual.  
-- 08/08/2018 - #8# - Roberto Beda - Ajuste para status diferente do esperado. Também não está atualizando DATA_PARA_TRANSFERENCIA  
-- 03/08/2018 - #7# - Roberto Beda - Trata inconsistências no banco de dados, tabelas LJ_ECF_ITEM e LJ_DOCUMENTO_ECF.  
-- 01/08/2018 - #6# - Roberto Beda - O terminal não é importante para a geração, portanto ela não deve depender dele.  
-- 16/06/2018 - #5# - Giedson Silva - Projeto Emergencial Youcom - Reestruturando o XML conforme ER-PAF-ECF versão 02.05(SEFAZ/SC).  
-- Implementação de rotina para ratear de forma proporcional o Desconto/ Acréscimo do subtotal por Totalizador de ECF.  
-- Implementação para inserir no XML os valores de Desconto, Acréscimo, Cancelamento e Valor Líquido conforme Redução Z.  
-- 31/05/2017 - #4# - Giedson Silva - DM33152 - Alteração para ao criar o registro pegar o último ID da tabelas LX_BLOCOX_GERA_XML_ESTOQUE e BLOCOX_XML - Projeto PAF-ECF.  
-- 24/04/2017 - #3# - Giedson Silva - DM8577 (Tarefa: 58840) - Inclusão do Número de Credenciamento ECF.  
-- 05/04/2017 - #2# - Giedson Silva - DM8577 (Tarefa: 6239)  - Ajustes no layout para desconsiderar caracteres especiais, inserção do encoding e formatação dos campos.  
-- 17/03/2017 - #1# - VÍVIAN DOS SANTOS DOMINGUES - Geração do XML da Redução Z - Bloco X  
--LX_BLOCOX_GERA_XML_REDUCAOZ 1, 2, '20180307', 'BE111710101110026418', '040082', '01', '12345667890'  

BEGIN  
  
SET NOCOUNT ON  

--Inicio - #PRODSHOP-11088#
declare @TOTAL_DESCONTO_CONFERE as numeric (14,2)
declare @TOTAL_DESCONTO_LOJA_VENDA AS NUMERIC(14,2)
declare @TOTAL_BRUTO_CONFERE AS NUMERIC(14,2)
declare @TOTALDESCONTOPRODUTO  AS NUMERIC(14,2)
declare @TicketProduto as varchar(10)
declare @itemProd as varchar(5)
dECLARE @BRESULT BIT
declare @SomaTotal AS NUMERIC(14,2)
declare @ResultTotalizadorParcial AS NUMERIC(14,2)
declare @ResultadoSoma  AS NUMERIC(14,2)
declare @SomasubTotal  AS NUMERIC(14,2)
--Fim - #PRODSHOP-11088#
  
--*(¯`·.¸¸.·´¯`·.¸¸.->  --*(¯`·.¸¸.·´¯`·.¸¸.-> #24#  - PROCESSO NOVO DE CAPTURA DOS DADOS VIA MFD --*(¯`·.¸¸.·´¯`·.¸¸.->  --*(¯`·.¸¸.·´¯`·.¸¸.->      
  
------------------------------------  
-- CRIAÇÃO DE TABELAS TEMPORÁRIAS --  
------------------------------------  
  
 DECLARE @LCF TABLE (  
  CODIGO_FILIAL   char(6) NOT NULL,  
  TERMINAL        char(3) NOT NULL,  
  DATA_FISCAL     datetime NOT NULL,  
  FILIAL          varchar(25) NOT NULL,  
  ID_EQUIPAMENTO  varchar(20) NOT NULL,  
  ECF             smallint NOT NULL,  
  GT_INICIAL      numeric(17,2) NULL,  
  DATA_SISTEMA    datetime NULL,  
  GT_FINAL        numeric(17,2) NULL,  
  CF_INICIAL      int NOT NULL,  
  CF_FINAL        int NULL,  
  QTDE_REDUCOES_Z smallint NULL,  
  TOTAL_BRUTO     numeric(14,2) NULL,  
  TOTAL_CANCELADO numeric(14,2) NULL,  
  TOTAL_DESCONTO  numeric(14,2) NULL,  
  TOTAL_ISENTO    numeric(14,2) NULL,  
  TOTAL_NAO_TRIBUTAVEL numeric(14,2) NULL,  
  TOTAL_SUBSTITUICAO   numeric(14,2) NULL,  
  DATA_PARA_TRANSFERENCIA datetime NULL,  
  ORIGEM_MOVIMENTO        tinyint NULL,  
  TOTAL_ACRESCIMO         numeric(14,2) NULL,  
  SERIE_NF                varchar(6) NOT NULL,  
  --ESPECIE_SERIE int NULL,  
  --NR_MAPA_RESUMO varchar(7) NULL,  
  --CODIGO_FISCAL_OPERACAO varchar(4) NULL,  
  CONTADOR_REINICIO_OPERACAO smallint NULL,  
  DATA_HORA_REDUCAO_Z        datetime NULL,  
  TOTAL_OPNF                 numeric(10,2) NOT NULL,  
  MODELO varchar(40) NULL,  
  --DADOS_MFD bit NOT NULL,  
  --STATUS_MFD tinyint NOT NULL,  
  MF_ADICIONAL CHAR(1) NULL,  
  USUARIO_ECF SMALLINT NULL,  
  CRZ CHAR(6) NULL,  
  COO_INICIAL CHAR(6) NULL,  
  COO_FINAL CHAR(6) NULL,  
  CRO CHAR(6) NULL,  
  DATA_EMISSAO SMALLDATETIME NULL,  
  VENDA_BRUTA_DIARIA NUMERIC(14,2) NULL,  
  INDICE_DESC_ISSQN CHAR(1) NULL,  
  QTDE_E13 INT NULL,  
  QTDE_E14 INT NULL,  
  QTDE_E15 INT NULL,  
  QTDE_E21 INT NULL,  
  VERSAO_GERACAO SMALLINT NULL,  
  PRIMARY KEY CLUSTERED (CODIGO_FILIAL, TERMINAL, DATA_FISCAL, ECF, ID_EQUIPAMENTO, SERIE_NF, CF_INICIAL)  
 )  
  
 -- OBTÉM A MATRIZ FISCAL   
 DECLARE @CODIGO_MATRIZ_FISCAL VARCHAR(6) -- #33#  
  
 SELECT   
  @CODIGO_MATRIZ_FISCAL = C.COD_CLIFOR   
 FROM   
  LOJAS_VAREJO A (NOLOCK)   
  INNER JOIN FILIAIS B (NOLOCK) ON A.FILIAL = B.FILIAL   
  INNER JOIN CADASTRO_CLI_FOR C (NOLOCK) ON B.MATRIZ_FISCAL = C.NOME_CLIFOR   
 WHERE   
  A.CODIGO_FILIAL = @CODIGO_FILIAL  
   
 DECLARE @DATA_INICIAL DATETIME, @DATA_FINAL DATETIME  
 DECLARE @DATA_HORA_RZ DATETIME --  #43#  
    
-- OBTÉM O PERÍODO EXATO DO MOVIMENTO DO ECF (INÍCIO) #43#   
 SELECT @DATA_HORA_RZ = MAX(DATA_HORA_REDUCAO_Z)  
 FROM LOJA_CONTROLE_FISCAL  (NOLOCK)
 WHERE CODIGO_FILIAL = @CODIGO_FILIAL   
 AND  ID_EQUIPAMENTO = @SERIALNUMBER   
 AND  DATA_FISCAL = @DATA_MES   
   
 SET @DATA_INICIAL = @DATA_MES  
 IF @DATA_HORA_RZ IS NULL OR @DATA_HORA_RZ < @DATA_MES  
  SET @DATA_FINAL = @DATA_MES   
 ELSE  
  SET @DATA_FINAL = CAST(CONVERT(VARCHAR, @DATA_HORA_RZ, 112) AS DATETIME)  
-- OBTÉM O PERÍODO EXATO DO MOVIMENTO DO ECF (FIM) #43#   
  
  
-- INÍCIO DO EQUIVALENTE A FX_LF_ECF_ITEM #33#  
 DECLARE @DETALHE_ECF TABLE     
  (  
  CODIGO_FILIAL    CHAR(6),           
  TICKET      CHAR(8),           
  DATA_VENDA     DATETIME,           
  ITEM      CHAR(4),           
  COD_FILIAL     CHAR(6),           
  FILIAL      VARCHAR(25),           
  CGC_CPF_FILIAL    VARCHAR(19),           
  CODIGO_MATRIZ_FISCAL  CHAR(6),           
  COD_MATRIZ_FISCAL   CHAR(6),           
  MATRIZ_FISCAL    VARCHAR(25),           
  CGC_CPF_MATRIZ_FISCAL  VARCHAR(19),           
  COD_CLIFOR     VARCHAR(14),           
  NOME_CLIFOR     VARCHAR(40),           
  CGC_CPF      VARCHAR(19),           
  CPF_CGC_ECF     VARCHAR(19),           
  PF_PJ      BIT,           
  RG_IE      VARCHAR(19),           
  CADASTRAMENTO    DATETIME,           
  CEP       VARCHAR(9),           
  ENDERECO     VARCHAR(90),           
  COMPLEMENTO     VARCHAR(20),           
  BAIRRO      VARCHAR(35),           
  CIDADE      VARCHAR(35),           
  UF       CHAR(2),           
  PAIS      VARCHAR(40),           
  DDD       CHAR(4),           
  TELEFONE     VARCHAR(10),           
  FAX       VARCHAR(10),           
  TERMINAL     CHAR(3),           
  LANCAMENTO_CAIXA   CHAR(7),           
  DATA      DATETIME,           
  ID_EQUIPAMENTO    VARCHAR(20),     
  MODELO_ECF varchar (40),--#23#             
  NUMERO_CUPOM_FISCAL   VARCHAR(8),           
  ITEM_EXCLUIDO    BIT,           
  CANCELADO_FISCAL   SMALLINT,           
  /*#1#*/ QTDE_CANCELADA     NUMERIC(14, 2),           
  VALOR_UNITARIO    NUMERIC(14, 2),           
  PRECO_BRUTO     NUMERIC(14, 2),           
  DESCONTO_ITEM    NUMERIC(14, 2),           
  DESCONTO_SUBTOTAL   NUMERIC(14, 2),           
  ACRESCIMO_ITEM    NUMERIC(14, 2),           
  ACRESCIMO_SUBTOTAL   NUMERIC(14, 2),           
  RATEIO_DESCONTO_VENDA  NUMERIC(14, 2),           
  DESC_ICMS     CHAR(8),           
  ICMS      NUMERIC(5, 2),           
  ALIQUOTA     NUMERIC(5, 2),    
  TOTALIZADOR VARCHAR(7),         
  /*#1#*/ QTDE             NUMERIC(14, 2),           
  VALOR_CANCELADO    NUMERIC(14, 2),           
  DATA_HORA_CANCELAMENTO  DATETIME,           
  PRODUTO      CHAR(12),           
  DESC_PRODUTO    VARCHAR(40),           
  /*#14*/ CODIGO_BARRA    VARCHAR(25),           
  UNIDADE      CHAR(5),           
  TRIBUT_ORIGEM    CHAR(3),           
  TRIBUT_ICMS     CHAR(3),           
  INDICADOR_CFOP    TINYINT,           
  CLASSIF_FISCAL    CHAR(10),           
  PESO      NUMERIC(7, 3),           
  CONTADOR_REINICIO_OPERACAO SMALLINT,           
  QTDE_REDUCOES_Z    SMALLINT,           
  NUMERO_MODELO_FISCAL  VARCHAR(3),           
  --NR_MAPA_RESUMO    VARCHAR(7),           
  COO_INICIAL     INT,           
  COO_FINAL     INT,           
  GT_INICIAL     NUMERIC(17, 2),           
  GT_FINAL     NUMERIC(17, 2),           
  SERIE_NF     VARCHAR(6),           
  ECF       SMALLINT,           
  TOTAL_TARIFA    NUMERIC(14, 2),           
  CNPJ_CPF_INFORMATIVO  VARCHAR(19),           
  --TIPO_ITEM_SPED    CHAR(5),           
  LOCALIDADE     BIT,           
  VALOR_LIQUIDO_TOTAL   NUMERIC(14, 2),           
  VALOR_CONTABIL    NUMERIC(14, 2),          
  VALOR_DESCONTO    NUMERIC(14, 2),           
  VALOR_ACRESCIMO    NUMERIC(14, 2),           
  BASE_ICMS     NUMERIC(14, 2),           
  VALOR_ICMS     NUMERIC(14, 2),           
  VALOR_VENDA_BRUTA   NUMERIC(14, 2),           
  TOTAL_BRUTO     NUMERIC(14, 2),           
  TOTAL_CANCELADO    NUMERIC(14, 2),           
  TOTAL_DESCONTO    NUMERIC(14, 2),           
  TOTAL_ACRESCIMO    NUMERIC(14, 2),           
  TOTAL_ISENTO    NUMERIC(14, 2),           
  TOTAL_SUBSTITUICAO   NUMERIC(14, 2),           
  TOTAL_NAO_TRIBUTAVEL  NUMERIC(14, 2),            
  LJ_VALOR_RATEIO    NUMERIC(14, 2),           
  TOTAL_VENDA     NUMERIC(14, 2),          
  DESCONTO_ITEM_CANC   NUMERIC(14, 2),           
  ACRESCIMO_ITEM_CANC   NUMERIC(14, 2),           
  TOTAL_DESCONTO_VENDA NUMERIC (14,2), --#20#      
  BC_RATEIO_DESCONTO NUMERIC(14,2), -- #28#      
  CUPOM_DESC_ACRESC_SUBTOTAL NUMERIC(14,2), -- #47#  
  DECIMAIS_VALOR_UNIT SMALLINT,  
  PRIMARY KEY CLUSTERED (ID_EQUIPAMENTO, CODIGO_FILIAL, TICKET, DATA_VENDA, ITEM, CONTADOR_REINICIO_OPERACAO)  
  ) -- #25#          
  
 DECLARE @FILIAIS TABLE                
  (   
  COD_FILIAL    VARCHAR(6),           
  FILIAL     VARCHAR(25),          
  COD_MATRIZ_FISCAL  VARCHAR(6),          
  MATRIZ_FISCAL   VARCHAR(25),          
  CGC_CPF_FILIAL   VARCHAR(14),          
  CGC_CPF_MATRIZ_FISCAL VARCHAR(14)          
  )            
          
 INSERT INTO @FILIAIS          
 SELECT   
  A.COD_FILIAL,          
  A.FILIAL,          
  COD_MATRIZ_FISCAL = B.COD_FILIAL,          
  MATRIZ_FISCAL  = B.FILIAL,          
  A.CGC_CPF,          
  B.CGC_CPF          
 FROM FILIAIS A  (NOLOCK)         
    JOIN FILIAIS B (NOLOCK) ON A.MATRIZ_FISCAL = B.FILIAL          
 WHERE B.COD_FILIAL = @CODIGO_MATRIZ_FISCAL              
  
 -- #64# - Início  
 DECLARE @CONTROLE_FISCAL TABLE          
  (  
  CODIGO_FILIAL CHAR(6), TERMINAL CHAR(3), DATA_FISCAL DATETIME, ID_EQUIPAMENTO CHAR(20), ECF INT,           
  SERIE_NF VARCHAR(6),   -- #67#       
  CF_INICIAL INT, CF_FINAL INT, GT_INICIAL NUMERIC(17, 2), GT_FINAL NUMERIC(17, 2), -- #8#          
  CONTADOR_REINICIO_OPERACAO INT, QTDE_REDUCOES_Z INT,           
  TOTAL_DESCONTO NUMERIC(14, 2), TOTAL_ACRESCIMO NUMERIC(14, 2), TOTAL_ISENTO NUMERIC(14, 2),           
  TOTAL_SUBSTITUICAO NUMERIC(14, 2), TOTAL_NAO_TRIBUTAVEL NUMERIC(14, 2),           
  TOTAL_CANCELADO NUMERIC(14,2), MODELO VARCHAR(40),  
  PRIMARY KEY CLUSTERED (CODIGO_FILIAL, TERMINAL, DATA_FISCAL, ID_EQUIPAMENTO, ECF, SERIE_NF, CONTADOR_REINICIO_OPERACAO)  
  ) --#17#          
  
 DECLARE @CONTROLE_FISCAL_TARIFA TABLE          
  (  
  CODIGO_FILIAL CHAR(6), TERMINAL CHAR(3), DATA_FISCAL DATETIME, ID_EQUIPAMENTO CHAR(20), ECF INT,           
  SERIE_NF VARCHAR(6), PER_TARIFA NUMERIC(7,3), CF_INICIAL INT, TOTAL_TARIFA NUMERIC(14, 2),  -- #67#        
  PRIMARY KEY CLUSTERED (CODIGO_FILIAL, TERMINAL, DATA_FISCAL, ID_EQUIPAMENTO, ECF, SERIE_NF, PER_TARIFA, CF_INICIAL)  
  )          
    
 IF @CRIAR_LCF = 0            -- #39#  
 BEGIN -- DADOS DA TABELA LOJA_CONTROLE_FISCAL JÁ EXISTEM  -- #39#  
  INSERT INTO @CONTROLE_FISCAL           
  SELECT          
   A.CODIGO_FILIAL, A.TERMINAL, A.DATA_FISCAL, A.ID_EQUIPAMENTO, A.ECF,           
   A.SERIE_NF, /*ISNULL(A.NR_MAPA_RESUMO, '') AS NR_MAPA_RESUMO, ISNULL(A.CODIGO_FISCAL_OPERACAO, '5102') AS CODIGO_FISCAL_OPERACAO,*/           
   MAX(A.CF_INICIAL) AS CF_INICIAL, MAX(A.CF_FINAL) AS CF_FINAL,           
   MAX(A.GT_INICIAL) AS GT_INICIAL, MAX(A.GT_FINAL) AS GT_FINAL,           
   ISNULL(A.CONTADOR_REINICIO_OPERACAO, 0) AS CONTADOR_REINICIO_OPERACAO, --#17#          
   MAX(ISNULL(A.QTDE_REDUCOES_Z, 0)) AS QTDE_REDUCOES_Z,          
   SUM(A.TOTAL_DESCONTO) AS TOTAL_DESCONTO, SUM(A.TOTAL_ACRESCIMO) AS TOTAL_ACRESCIMO,           
   SUM(A.TOTAL_ISENTO) AS TOTAL_ISENTO, SUM(A.TOTAL_SUBSTITUICAO) AS TOTAL_SUBSTITUICAO,           
   SUM(A.TOTAL_NAO_TRIBUTAVEL) AS TOTAL_NAO_TRIBUTAVEL,  
   SUM(A.TOTAL_CANCELADO) AS TOTAL_CANCELADO, MAX(A.MODELO) AS MODELO        
  FROM LOJA_CONTROLE_FISCAL A (NOLOCK)          
  INNER JOIN @FILIAIS B ON A.FILIAL = B.FILIAL  -- #3#          
 -- INNER JOIN CADASTRO_CLI_FOR MATRIZ ON B.MATRIZ_FISCAL = MATRIZ.NOME_CLIFOR -- #3#          
  WHERE          
   B.COD_MATRIZ_FISCAL = @CODIGO_MATRIZ_FISCAL  -- #3#          
   AND A.DATA_FISCAL >= @DATA_INICIAL  -- #3#          
   AND A.DATA_FISCAL <= @DATA_FINAL -- #3#      
   AND  ID_EQUIPAMENTO = @SERIALNUMBER       
  GROUP BY           
   A.CODIGO_FILIAL, A.TERMINAL, A.DATA_FISCAL, A.ID_EQUIPAMENTO, A.ECF,           
   A.SERIE_NF, /*A.NR_MAPA_RESUMO, A.CODIGO_FISCAL_OPERACAO,*/ A.CONTADOR_REINICIO_OPERACAO --#17#          
          
  INSERT INTO @CONTROLE_FISCAL_TARIFA           
  SELECT          
   A.CODIGO_FILIAL, A.TERMINAL, A.DATA_FISCAL, A.ID_EQUIPAMENTO, A.ECF,           
   A.SERIE_NF, A.PER_TARIFA, MAX(A.CF_INICIAL) AS CF_INICIAL, SUM(CASE WHEN ISNULL(A.TOTAL_TARIFA_ECF,0) <= 0 THEN A.TOTAL_TARIFA ELSE A.TOTAL_TARIFA_ECF END) AS TOTAL_TARIFA         -- #29#  
  FROM LOJA_CONTROLE_FISCAL_TARIFAS A  (NOLOCK)         
  INNER JOIN LOJAS_VAREJO B (NOLOCK) ON A.CODIGO_FILIAL = B.CODIGO_FILIAL           
  INNER JOIN @FILIAIS C ON B.FILIAL = C.FILIAL  -- #3#          
  INNER JOIN CADASTRO_CLI_FOR MATRIZ (NOLOCK) ON C.MATRIZ_FISCAL = MATRIZ.NOME_CLIFOR           
  WHERE          
   C.COD_MATRIZ_FISCAL = @CODIGO_MATRIZ_FISCAL  -- #3#          
   AND A.DATA_FISCAL >= @DATA_INICIAL  -- #3#          
   AND A.DATA_FISCAL <= @DATA_FINAL  -- #3#          
   AND A.ID_IMPOSTO IN (1, 14)        
   AND  ID_EQUIPAMENTO = @SERIALNUMBER     
  GROUP BY           
   A.CODIGO_FILIAL, A.TERMINAL, A.DATA_FISCAL, A.ID_EQUIPAMENTO, A.ECF,           
   A.SERIE_NF, A.PER_TARIFA           
 END   
  
------------------------------------  
-- CRIAÇÃO DE TABELAS TEMPORÁRIAS --  
------------------------------------     
  
 DECLARE @SERIE_NF_CUPOM VARCHAR(6) -- #67#  
 DECLARE @MPR_DADOS_MFD BIT  
 SET @MPR_DADOS_MFD  = 0  
   
 SELECT @SERIE_NF_CUPOM = LEFT(DBO.FX_PARAMETRO_LOJA('SERIE_CUPOM_FISCAL', @CODIGO_FILIAL), 6) -- #67#  
  
 IF @CRIAR_LCF = 0  
 BEGIN  
  -- SEPARA AS LINHAS DE LOJA_CONTROLE_FISCAL + LJ_ECF_AC1704_E12 (DADOS DAS REDUÇÕES Z)  
  INSERT INTO @LCF    
  SELECT LCF.CODIGO_FILIAL, LCF.TERMINAL, LCF.DATA_FISCAL, LCF.FILIAL, LCF.ID_EQUIPAMENTO, LCF.ECF, LCF.GT_INICIAL,  
    LCF.DATA_SISTEMA, LCF.GT_FINAL, LCF.CF_INICIAL, LCF.CF_FINAL, LCF.QTDE_REDUCOES_Z, LCF.TOTAL_BRUTO,   
    LCF.TOTAL_CANCELADO, LCF.TOTAL_DESCONTO, LCF.TOTAL_ISENTO, LCF.TOTAL_NAO_TRIBUTAVEL, LCF.TOTAL_SUBSTITUICAO,  
    LCF.DATA_PARA_TRANSFERENCIA, LCF.ORIGEM_MOVIMENTO, LCF.TOTAL_ACRESCIMO, LCF.SERIE_NF, /*LCF.ESPECIE_SERIE, LCF.NR_MAPA_RESUMO, */  
    /*LCF.CODIGO_FISCAL_OPERACAO, */LCF.CONTADOR_REINICIO_OPERACAO, LCF.DATA_HORA_REDUCAO_Z, LCF.TOTAL_OPNF,   
    LCF.MODELO, /*LCF.DADOS_MFD, LCF.STATUS_MFD,*/ E12.MF_ADICIONAL, E12.USUARIO_ECF, E12.CRZ, E12.COO_INICIAL, E12.COO,  
    E12.CRO, E12.DATA_EMISSAO, E12.VENDA_BRUTA_DIARIA, E12.INDICE_DESC_ISSQN, E12.QTDE_E13, E12.QTDE_E14, E12.QTDE_E15,  
    E12.QTDE_E21, 0  
  FROM LOJA_CONTROLE_FISCAL LCF  (NOLOCK)
  LEFT JOIN LJ_ECF_AC1704_E12 E12  (NOLOCK)
  ON LCF.ID_EQUIPAMENTO = E12.SERIE_ECF AND LCF.QTDE_REDUCOES_Z = E12.CRZ AND LCF.DATA_FISCAL = E12.DATA_MOVIMENTO  
  WHERE LCF.CODIGO_FILIAL = @CODIGO_FILIAL   
  AND LCF.DATA_FISCAL = @DATA_MES   
  AND LCF.ID_EQUIPAMENTO = @SERIALNUMBER   
  
  -- VERIFICA SE PODE PROCESSAR VIA MFD (VERSAO_GERACAO >= 1)   
  DECLARE @C_EX AS INT, @QTDE_E13 AS INT, @QTDE_E14 AS INT, @QTDE_E15 AS INT, @QTDE_E21 AS INT  
  DECLARE @MF_ADICIONAL CHAR(1), @USUARIO_ECF SMALLINT, @COO_INICIAL CHAR(6), @COO_FINAL CHAR(6),  
    @CRZ_TMP CHAR(6), @SOLICITAR_PROC_VIA_MFD BIT --#26#  
  
  DECLARE CUR_REDUCOES CURSOR FOR  
  SELECT LCF.MF_ADICIONAL, LCF.USUARIO_ECF, LCF.COO_INICIAL, LCF.COO_FINAL, LCF.CRZ, LCF.QTDE_E13, LCF.QTDE_E14, LCF.QTDE_E15, LCF.QTDE_E21  
  FROM @LCF LCF  
  WHERE LCF.CODIGO_FILIAL = @CODIGO_FILIAL   
  AND LCF.DATA_FISCAL = @DATA_MES   
  AND LCF.ID_EQUIPAMENTO = @SERIALNUMBER   
  
    
  OPEN CUR_REDUCOES  
  FETCH NEXT FROM CUR_REDUCOES INTO @MF_ADICIONAL, @USUARIO_ECF, @COO_INICIAL, @COO_FINAL, @CRZ_TMP, @QTDE_E13, @QTDE_E14, @QTDE_E15, @QTDE_E21 --#26#  
  IF @@FETCH_STATUS = 0 AND @QTDE_E13 IS NOT NULL  
   set @MPR_DADOS_MFD = 1  
  ELSE  
   set @MPR_DADOS_MFD = 0  
  
  WHILE @@FETCH_STATUS = 0 AND @MPR_DADOS_MFD = 1  
  BEGIN  
   SELECT @C_EX = COUNT(*)  
   FROM LJ_ECF_AC1704_E13 E13 (NOLOCK) 
   WHERE E13.SERIE_ECF = @SERIALNUMBER AND E13.MF_ADICIONAL = @MF_ADICIONAL AND E13.USUARIO_ECF = @USUARIO_ECF AND E13.CRZ = @CRZ_TMP --#27#  
     
   IF @C_EX < @QTDE_E13   
    SET @MPR_DADOS_MFD = 0  
     
   IF @MPR_DADOS_MFD = 1  
   BEGIN  
    SELECT @C_EX = COUNT(*)  
    FROM LJ_ECF_AC1704_E14 E14  
    WHERE E14.SERIE_ECF = @SERIALNUMBER AND E14.MF_ADICIONAL = @MF_ADICIONAL AND E14.USUARIO_ECF = @USUARIO_ECF AND E14.COO BETWEEN @COO_INICIAL AND @COO_FINAL   
      
    IF @C_EX < @QTDE_E14  
     SET @MPR_DADOS_MFD = 0  
   END  
  
   IF @MPR_DADOS_MFD = 1  
   BEGIN  
    SELECT @C_EX = COUNT(*)  
    FROM LJ_ECF_AC1704_E15 E15 (NOLOCK) 
    WHERE E15.SERIE_ECF = @SERIALNUMBER AND E15.MF_ADICIONAL = @MF_ADICIONAL AND E15.USUARIO_ECF = @USUARIO_ECF AND E15.COO BETWEEN @COO_INICIAL AND @COO_FINAL   
      
    IF @C_EX < @QTDE_E15  
     SET @MPR_DADOS_MFD = 0  
   END  
  
   IF @MPR_DADOS_MFD = 1  
   BEGIN  
    SELECT @C_EX = COUNT(*)  
    FROM LJ_ECF_AC1704_E21 E21  (NOLOCK)
    WHERE E21.SERIE_ECF = @SERIALNUMBER AND E21.MF_ADICIONAL = @MF_ADICIONAL AND E21.USUARIO_ECF = @USUARIO_ECF AND E21.COO BETWEEN @COO_INICIAL AND @COO_FINAL   
      
    IF @C_EX < @QTDE_E21  
     SET @MPR_DADOS_MFD = 0  
   END  
  
   IF @MPR_DADOS_MFD = 1   
    FETCH NEXT FROM CUR_REDUCOES INTO @MF_ADICIONAL, @USUARIO_ECF, @COO_INICIAL, @COO_FINAL, @CRZ_TMP, @QTDE_E13, @QTDE_E14, @QTDE_E15, @QTDE_E21 --#26#  
  END  
  
  CLOSE CUR_REDUCOES  
  
  DEALLOCATE CUR_REDUCOES  
    
    
  BEGIN  
   -- OBTÉM A VERSÃO DA GERAÇÃO DOS DADOS (SE NÃO CONSEGUIR PEGAR, ASSUME 0)  
   UPDATE @LCF  
    SET VERSAO_GERACAO = ISNULL(( SELECT TOP 1 VERSAO_GERACAO   
            FROM LJ_ECF_AC1704_E01 E01   (NOLOCK)
            WHERE E01.SERIE_ECF = LCF.ID_EQUIPAMENTO  
            AND E01.MF_ADICIONAL = LCF.MF_ADICIONAL  
            AND LCF.QTDE_REDUCOES_Z BETWEEN E01.CRZ_INICIAL AND E01.CRZ_FINAL   
            AND LCF.DATA_FISCAL BETWEEN E01.DATA_INICIAL AND E01.DATA_FINAL   
            ORDER BY E01.DATA_PARA_TRANSFERENCIA DESC),0)  
   FROM @LCF LCF  
  END  
    
  BEGIN  
  IF @MPR_DADOS_MFD = 1 --#24#  
  -- NÃO É PROJETO PILOTO  
  BEGIN  
   -- AJUSTA LOJA_CONTROLE_FISCAL/LOJA_CONTROLE_FISCAL_TARIFAS  
    
   UPDATE @LCF   
    SET DATA_SISTEMA = E12.DATA_SISTEMA,  
     CF_FINAL = E12.CF_FINAL,  
     TOTAL_BRUTO = E12.TOTAL_BRUTO,  
     TOTAL_CANCELADO = E12.TOTAL_CANCELADO,  
     TOTAL_DESCONTO = E12.TOTAL_DESCONTO,  
     TOTAL_ISENTO = E12.TOTAL_ISENTO,  
     TOTAL_NAO_TRIBUTAVEL = E12.TOTAL_NAO_TRIBUTAVEL,  
     TOTAL_SUBSTITUICAO = E12.TOTAL_SUBSTITUICAO,  
     TOTAL_OPNF = E12.TOTAL_OPNF,  
     TOTAL_ACRESCIMO = E12.TOTAL_ACRESCIMO    
   FROM @LCF LCF 
   INNER JOIN (  
    SELECT E12.SERIE_ECF, E12.CRZ, E12.MF_ADICIONAL, E12.USUARIO_ECF, MAX(E12.COO) AS CF_FINAL,   
      MAX(E12.DATA_MOVIMENTO) AS DATA_MOVIMENTO, MAX(E12.DATA_EMISSAO) AS DATA_SISTEMA, MAX(E12.VENDA_BRUTA_DIARIA) AS TOTAL_BRUTO,  
      SUM(CASE WHEN TOTALIZADOR_PARCIAL = 'Can-T' THEN E13.VALOR_ACUMULADO ELSE 0 END) AS TOTAL_CANCELADO,  
      SUM(CASE WHEN TOTALIZADOR_PARCIAL = 'DT' THEN E13.VALOR_ACUMULADO ELSE 0 END) AS TOTAL_DESCONTO,  
      SUM(CASE WHEN TOTALIZADOR_PARCIAL LIKE 'I%' AND TOTALIZADOR_PARCIAL NOT LIKE 'IS%' THEN E13.VALOR_ACUMULADO ELSE 0 END) AS TOTAL_ISENTO,  
      SUM(CASE WHEN TOTALIZADOR_PARCIAL LIKE 'N%' AND TOTALIZADOR_PARCIAL NOT LIKE 'NS%' THEN E13.VALOR_ACUMULADO ELSE 0 END) AS TOTAL_NAO_TRIBUTAVEL,  
      SUM(CASE WHEN TOTALIZADOR_PARCIAL LIKE 'F%' AND TOTALIZADOR_PARCIAL NOT LIKE 'FS%' THEN E13.VALOR_ACUMULADO ELSE 0 END) AS TOTAL_SUBSTITUICAO,  
      SUM(CASE WHEN TOTALIZADOR_PARCIAL = 'AT' THEN E13.VALOR_ACUMULADO ELSE 0 END) AS TOTAL_ACRESCIMO,  
      SUM(CASE WHEN TOTALIZADOR_PARCIAL = 'OPNF' THEN E13.VALOR_ACUMULADO ELSE 0 END) AS TOTAL_OPNF  
    -- TOTAL_CANCELADO, TOTAL_DESCONTO, TOTAL_ISENTO, TOTAL_NAO_TRIBUTAVEL, TOTAL_SUBSTITUICAO, TOTAL_ACRESCIMO, TOTAL_OPNF   
    FROM LJ_ECF_AC1704_E12 E12  (NOLOCK)
    LEFT JOIN LJ_ECF_AC1704_E13 E13  (NOLOCK)
    ON E12.SERIE_ECF = E13.SERIE_ECF AND E12.CRZ = E13.CRZ AND E12.MF_ADICIONAL = E13.MF_ADICIONAL AND E12.USUARIO_ECF = E13.USUARIO_ECF   
    WHERE E12.SERIE_ECF = @SERIALNUMBER AND E12.DATA_MOVIMENTO = @DATA_MES   
    GROUP BY E12.SERIE_ECF, E12.CRZ, E12.MF_ADICIONAL, E12.USUARIO_ECF) E12  
   ON LCF.ID_EQUIPAMENTO = E12.SERIE_ECF AND LCF.QTDE_REDUCOES_Z = E12.CRZ AND LCF.DATA_FISCAL = E12.DATA_MOVIMENTO  
   WHERE LCF.CODIGO_FILIAL = @CODIGO_FILIAL   
   AND LCF.DATA_FISCAL = @DATA_MES   
   AND LCF.ID_EQUIPAMENTO = @SERIALNUMBER   
   AND (  
     LCF.DATA_SISTEMA <> E12.DATA_SISTEMA   
    OR LCF.CF_FINAL <> E12.CF_FINAL   
    OR LCF.TOTAL_BRUTO <> E12.TOTAL_BRUTO   
    OR  LCF.TOTAL_CANCELADO <> E12.TOTAL_CANCELADO   
    OR  LCF.TOTAL_DESCONTO <> E12.TOTAL_DESCONTO   
    OR LCF.TOTAL_ISENTO <> E12.TOTAL_ISENTO   
    OR LCF.TOTAL_NAO_TRIBUTAVEL <> E12.TOTAL_NAO_TRIBUTAVEL   
    OR LCF.TOTAL_SUBSTITUICAO <> E12.TOTAL_SUBSTITUICAO   
    OR LCF.TOTAL_ACRESCIMO <> E12.TOTAL_ACRESCIMO   
    OR LCF.TOTAL_OPNF <> E12.TOTAL_OPNF   
    OR  LCF.TOTAL_ACRESCIMO <> E12.TOTAL_ACRESCIMO   
     )  
     
   IF @@ROWCOUNT > 0  
    UPDATE LOJA_CONTROLE_FISCAL   
     SET DATA_SISTEMA = E12.DATA_SISTEMA,  
      CF_FINAL = E12.CF_FINAL,  
      TOTAL_BRUTO = E12.TOTAL_BRUTO,  
      TOTAL_CANCELADO = E12.TOTAL_CANCELADO,  
      TOTAL_DESCONTO = E12.TOTAL_DESCONTO,  
      TOTAL_ISENTO = E12.TOTAL_ISENTO,  
      TOTAL_NAO_TRIBUTAVEL = E12.TOTAL_NAO_TRIBUTAVEL,  
      TOTAL_SUBSTITUICAO = E12.TOTAL_SUBSTITUICAO,  
      TOTAL_OPNF = E12.TOTAL_OPNF,   
      TOTAL_ACRESCIMO = E12.TOTAL_ACRESCIMO/*,  
      STATUS_MFD = LCF.STATUS_MFD | 32*/  
    FROM LOJA_CONTROLE_FISCAL LCF  (NOLOCK)
    INNER JOIN @LCF E12  
    ON LCF.CODIGO_FILIAL = E12.CODIGO_FILIAL AND LCF.DATA_FISCAL = E12.DATA_FISCAL AND LCF.TERMINAL = E12.TERMINAL AND LCF.ID_EQUIPAMENTO = E12.ID_EQUIPAMENTO AND LCF.ECF = E12.ECF AND LCF.SERIE_NF = E12.SERIE_NF AND LCF.CF_INICIAL = E12.CF_INICIAL   
  
   UPDATE LOJA_CONTROLE_FISCAL_TARIFAS     
    SET TOTAL_TARIFA = E13.TOTAL_TARIFA,  
     TOTAL_TARIFA_ECF = E13.TOTAL_TARIFA     
   FROM LOJA_CONTROLE_FISCAL_TARIFAS LCFT  (NOLOCK)
   INNER JOIN @LCF LCF  
   ON LCFT.CODIGO_FILIAL = LCF.CODIGO_FILIAL AND LCFT.DATA_FISCAL = LCF.DATA_FISCAL AND LCFT.TERMINAL = LCF.TERMINAL AND LCFT.ID_EQUIPAMENTO = LCF.ID_EQUIPAMENTO AND LCFT.ECF = LCF.ECF AND LCFT.SERIE_NF = LCF.SERIE_NF AND LCFT.CF_INICIAL = LCF.CF_INICIAL 
  
   INNER JOIN (  
    SELECT E12.SERIE_ECF, E12.CRZ, E12.DATA_MOVIMENTO, E13.TOTALIZADOR_PARCIAL, E13.VALOR_ACUMULADO AS TOTAL_TARIFA  
    FROM LJ_ECF_AC1704_E12 E12  (NOLOCK)
    LEFT JOIN LJ_ECF_AC1704_E13 E13  (NOLOCK)
    ON E12.SERIE_ECF = E13.SERIE_ECF AND E12.CRZ = E13.CRZ AND E12.MF_ADICIONAL = E13.MF_ADICIONAL AND E12.USUARIO_ECF = E13.USUARIO_ECF   
    WHERE E12.SERIE_ECF = @SERIALNUMBER AND E12.DATA_MOVIMENTO = @DATA_MES   
    AND ISNUMERIC(LEFT(TOTALIZADOR_PARCIAL,2)) = 1 AND ISNUMERIC(RIGHT(TOTALIZADOR_PARCIAL,4)) = 1 AND SUBSTRING(TOTALIZADOR_PARCIAL, 3, 1) = 'T') E13  
   ON LCF.ID_EQUIPAMENTO = E13.SERIE_ECF AND LCF.QTDE_REDUCOES_Z = E13.CRZ AND LCF.DATA_FISCAL = E13.DATA_MOVIMENTO AND LCFT.LEGENDA_TARIFA = E13.TOTALIZADOR_PARCIAL   
   WHERE LCF.CODIGO_FILIAL = @CODIGO_FILIAL   
   AND LCF.DATA_FISCAL = @DATA_MES   
   AND LCF.ID_EQUIPAMENTO = @SERIALNUMBER   
   AND LCFT.ID_IMPOSTO = 1  
   AND LCFT.TOTAL_TARIFA <> E13.TOTAL_TARIFA   
        
  END  
  
------------------------------------  
--  PROCESSAMENTO VIA MFD   --  
------------------------------------   
  
  DECLARE @CUPOM_NCANC TABLE (  -- #55#  
   SERIE_ECF CHAR(20) NOT NULL, -- #55#  
   MF_ADICIONAL CHAR(1) NOT NULL, -- #55#  
   USUARIO_ECF SMALLINT NOT NULL, -- #55#  
   COO CHAR(6) NOT NULL)   -- #55#  
     
  DECLARE @TENTA_PROC_MFD BIT, @DIF_CANC_MFD NUMERIC(14,2) -- #55#  
  SET @TENTA_PROC_MFD = 1 -- #55#  
    
  WHILE @MPR_DADOS_MFD = 1 AND @TENTA_PROC_MFD = 1 -- #55# #24#  
  BEGIN -- #55#  
   
   IF @MPR_DADOS_MFD = 1  
   -- NÃO É PROJETO PILOTO  
   BEGIN  
    -- PROCESSA MRF COM MFD NO MÉTODO MAIS NOVO (Início) #65#  
    BEGIN  
     with   
     cupom as  
     (  
      select  
       e14.SERIE_ECF,e14.MF_ADICIONAL,e14.USUARIO_ECF,e14.COO,e14.CCF_,cast(e14.COO as int) COO_INT,cast(e14.CCF_ as int) CCF_INT,  
       -- #82# [Inicio]  
       -- e14.DATA_INI_DOC,  
       DATA_INI_DOC = case when   
            e14.DATA_INI_DOC > e14.DATA_VENDA and e14.COO between LCF.COO_INICIAL AND LCF.COO_FINAL  
           THEN   
            e14.DATA_VENDA  
           ELSE   
            e14.DATA_INI_DOC  
           END,  
       -- #82# [Fim]      
       CPF_CNPJ = case when cast(e14.CPF_CNPJ as bigint) > 0 then -- #61#  
           case when len(e14.CPF_CNPJ) = 14 and left(e14.CPF_CNPJ, 3) = '000' then right(e14.CPF_CNPJ, 11) else e14.CPF_CNPJ end -- #61#  
          else space(19) end, -- #47# ##61#  
       e14.DESCONTO_SUBTOTAL,e14.ACRES_SUBTOTAL,e14.SUBTOTAL,e14.VALOR_TOTAL_LIQ,  
       _FATOR_DESC_ACRESC_SUBTOTAL = 1.00 + (((E14.DESCONTO_SUBTOTAL * -1) + E14.ACRES_SUBTOTAL) / case when E14.SUBTOTAL > 0 then E14.SUBTOTAL else 1 end),  
       _FATOR_DESC_SUBTOTAL        = 1.00 + (((E14.DESCONTO_SUBTOTAL * -1)                     ) / case when E14.SUBTOTAL > 0 then E14.SUBTOTAL else 1 end),  
       _FATOR_ACRESC_SUBTOTAL      = 1.00 + ((                               E14.ACRES_SUBTOTAL) / case when E14.SUBTOTAL > 0 then E14.SUBTOTAL else 1 end),  
       e14.ORDEM_APLIC_AC_DESC,CASE WHEN ISNULL(PG.CANCELADO_FISCAL, 0) = 1 AND NC.SERIE_ECF IS NULL AND LEFT(@SERIALNUMBER, 2) = 'BE' THEN 'S' ELSE e14.DOC_CANCELADO END AS DOC_CANCELADO, -- #53# #55#  
       CANCELADO_FISCAL = case when (ISNULL(PG.CANCELADO_FISCAL, 0) = 1 AND NC.SERIE_ECF IS NULL AND LEFT(@SERIALNUMBER, 2) = 'BE') OR e14.DOC_CANCELADO = 'S' then 1 else 0 end -- #53# #55#  
       /*,CONVERT(CHAR(3), 'CF') SERIE_NF*/, e14.DATA_VENDA, e14.TICKET -- #67#  
      from DBO.LJ_ECF_AC1704_E14 e14  (NOLOCK)
      left join LOJA_VENDA_PGTO PG (NOLOCK) on  
       e14.SERIE_ECF = PG.ID_EQUIPAMENTO  -- #56#  
      and e14.COO = PG.NUMERO_CUPOM_FISCAL   
      and e14.CCF_ = PG.NUMERO_CCF   
      left join @CUPOM_NCANC NC  on    -- #55#  
       e14.SERIE_ECF = NC.SERIE_ECF   -- #55#  
      and e14.MF_ADICIONAL = NC.MF_ADICIONAL  -- #55#  
      and e14.USUARIO_ECF = NC.USUARIO_ECF  -- #55#  
      and e14.COO = NC.COO      -- #55#  
      -- #82# [Inicio]  
      inner join @LCF LCF  on LCF.ID_EQUIPAMENTO = E14.SERIE_ECF   
       and LCF.MF_ADICIONAL = e14.MF_ADICIONAL   
       and LCF.USUARIO_ECF = e14.USUARIO_ECF   
      -- #82# [Fim]  
     ),  
       
     cupom_itens as  
     (  
      select  
          E15.SERIE_ECF,E15.MF_ADICIONAL,E15.USUARIO_ECF,E15.COO,E15.CCF_,  
          replicate('0',4-len(E15.ITEM)) + cast(E15.ITEM as char(4)) AS ITEM,  
          --E15.ITEM , --#77#  
          E15.COD_PRODUTO_CUPOM,E15.DESC_PROD_CUPOM,E15.UNIDADE,  
          ITEM_EXCLUIDO  = CASE WHEN e14.CANCELADO_FISCAL = 1 OR e15.ITEM_CANCELADO = 'S' THEN 1 ELSE 0 END, -- #53#  
          VALOR_UNITARIO  = E15.VALOR_UNIT,  
          PRECO_BRUTO   = E15.VALOR_UNIT * QTDE,   
          VALOR_VENDA_BRUTA = (E15.VALOR_UNIT * QTDE) + (case when e14.CANCELADO_FISCAL = 0 AND e15.ITEM_CANCELADO = 'N' then e15.ACRES_ITEM else 0 end), -- #53#  
          VALOR_LIQUIDO_TOTAL =  cast(  
              round(  
                (((E15.VALOR_UNIT * E15.QTDE) - E15.DESCONTO_ITEM + E15.ACRES_ITEM) +  
                ((E15.VALOR_UNIT * E15.QTDE) - E15.DESCONTO_ITEM + E15.ACRES_ITEM) *  
                ((E14.DESCONTO_SUBTOTAL * -1) + E14.ACRES_SUBTOTAL)  
                / case when E14.SUBTOTAL > 0 then E14.SUBTOTAL else 1 end  
                ) * case when e14.CANCELADO_FISCAL = 1 OR e15.ITEM_CANCELADO = 'S' then 0 else 1 end -- #53#  
               ,2)  
               as decimal(14,2)),  
          VALOR_DESCONTO = E15.DESCONTO_ITEM,  
          VALOR_ACRESCIMO = E15.ACRES_ITEM,  
          VALOR_CANCELADO = (E15.VALOR_UNIT * case when e14.CANCELADO_FISCAL = 1 OR e15.ITEM_CANCELADO = 'S' then e15.QTDE   else 0 end ) + (case when e14.CANCELADO_FISCAL = 1 OR e15.ITEM_CANCELADO = 'S' then e15.ACRES_ITEM    else 0 end), -- #53#  
          case when e14.CANCELADO_FISCAL = 0 AND e15.ITEM_CANCELADO = 'N' then e15.DESCONTO_ITEM else 0 end DESCONTO_ITEM, -- #53#  
          case when e14.CANCELADO_FISCAL = 0 AND e15.ITEM_CANCELADO = 'N' then e15.ACRES_ITEM    else 0 end ACRES_ITEM, -- #53#  
          case when e14.CANCELADO_FISCAL = 0 AND e15.ITEM_CANCELADO = 'N' then e15.QTDE    else 0 end QTDE, -- %53#  
          case when e14.CANCELADO_FISCAL = 1 OR e15.ITEM_CANCELADO = 'S' then e15.QTDE    else 0 end QTDE_CANCELADA, -- #53#  
          CASE WHEN LEN(TOTALIZADOR) > 2 AND CHARINDEX('T',TOTALIZADOR) > 1 THEN substring (TOTALIZADOR,3,3) + '.' + substring (TOTALIZADOR,6,2)  ELSE LEFT(TOTALIZADOR,1) END  DESC_ICMS,  
          cast(  
          CASE WHEN LEN(TOTALIZADOR) > 2 AND CHARINDEX('T',TOTALIZADOR) > 1 AND   
           LEFT(TOTALIZADOR,1) <> 'C' -- #69# - No caso da Daruma, os itens cancelados são atribuidos com o totalizador CAN-T.  
        THEN SUBSTRING (TOTALIZADOR,4,2) + '.' + SUBSTRING (TOTALIZADOR,6,2)    
          ELSE   
          CASE convert(char(8),LEFT(TOTALIZADOR,1)) WHEN  'I' THEN '0.00' WHEN 'F' THEN '-1.00' WHEN 'N' THEN '-2.00'   
                   WHEN 'C' THEN '0.00' END -- #69# - Como o totalizador é CAN-T, não temos onde coletar os dados da alíquota, porém, como se trata de um item cancelado, essa informação é irrelevante, portanto, estamos atribuindo 0.00  
        END as decimal(5,2))  ALIQUOTA,  
        TOTALIZADOR AS TOTALIZADOR,  
        DECIMAIS_VALOR_UNIT AS DECIMAIS_VALOR_UNIT,  
          e15.MODELO_ECF as MODELO  
          from DBO.LJ_ECF_AC1704_E15 e15  (NOLOCK)
          inner join cupom e14 on  
         e15.SERIE_ECF = e14.SERIE_ECF   -- #56#  
        and e15.MF_ADICIONAL = e14.MF_ADICIONAL  
        and e15.USUARIO_ECF = e14.USUARIO_ECF  
        and e15.COO = e14.COO  
        and e15.CCF_ = e14.CCF_  
     ),  
  
       
  
     LCF as  
     (  
      select  
      a.CODIGO_FILIAL,a.FILIAL,a.TERMINAL,a.DATA_FISCAL,a.DATA_SISTEMA,a.ID_EQUIPAMENTO,a.ECF,a.SERIE_NF,  
      a.CF_INICIAL,a.CF_FINAL,a.GT_INICIAL,a.GT_FINAL,a.QTDE_REDUCOES_Z CRZ,a.CONTADOR_REINICIO_OPERACAO CRO,a.MODELO,--a.CODIGO_FISCAL_OPERACAO,  
      NUMERO_MODELO_FISCAL = D.NUMERO_MODELO_FISCAL--,ISNULL(a.NR_MAPA_RESUMO, '') AS NR_MAPA_RESUMO  
      from @LCF a
      LEFT JOIN SERIES_NF C (NOLOCK) ON a.SERIE_NF = C.SERIE_NF           
      LEFT JOIN CTB_ESPECIE_SERIE D (NOLOCK) ON C.ESPECIE_SERIE = D.ESPECIE_SERIE           
     ),  
  
     LCFT as  
     (  
      SELECT  
       A.CODIGO_FILIAL, A.TERMINAL, A.DATA_FISCAL, A.ID_EQUIPAMENTO, A.ECF,           
       A.SERIE_NF, A.PER_TARIFA, MAX(A.CF_INICIAL) AS CF_INICIAL, SUM(CASE WHEN ISNULL(A.TOTAL_TARIFA_ECF,0) <= 0 THEN A.TOTAL_TARIFA ELSE A.TOTAL_TARIFA_ECF END) AS TOTAL_TARIFA  
      FROM LOJA_CONTROLE_FISCAL_TARIFAS A  (NOLOCK)
      WHERE A.ID_IMPOSTO IN (1, 14)  
      GROUP BY  
       A.CODIGO_FILIAL, A.TERMINAL, A.DATA_FISCAL, A.ID_EQUIPAMENTO, A.ECF,  
       A.SERIE_NF, A.PER_TARIFA  
     ),  
  
     FILIAL as  
     (  
      SELECT   
       A.COD_FILIAL,          
       A.FILIAL,          
       COD_MATRIZ_FISCAL = B.COD_FILIAL,          
       MATRIZ_FISCAL  = B.FILIAL,          
       A.CGC_CPF CGC_CPF_FILIAL,          
       B.CGC_CPF CGC_CPF_MATRIZ_FISCAL  
      FROM FILIAIS A   (NOLOCK)        
      JOIN FILIAIS B (NOLOCK) ON A.MATRIZ_FISCAL = B.FILIAL          
     ),  
     TICKET as  
     (  
      SELECT   
       V.CODIGO_FILIAL,V.CODIGO_FILIAL_PGTO,V.TERMINAL,V.TERMINAL_PGTO,V.TICKET,V.LANCAMENTO_CAIXA,V.DATA_VENDA,PG.DATA DATA_PGTO,V.DATA_HORA_CANCELAMENTO,  
       PG.ID_EQUIPAMENTO,PG.NUMERO_CCF,PG.NUMERO_CUPOM_FISCAL,cast(PG.NUMERO_CUPOM_FISCAL as int) COO_INT,PG.CANCELADO_FISCAL, -- #50#  
       i.CODIGO_CLIENTE, i.CLIENTE_VAREJO,i.CPF_CGC,cast(i.PF_PJ as tinyint) PF_PJ, i.RG_IE, i.CADASTRAMENTO CADASTRAMENTO_CLI,i.CEP,i.ENDERECO,i.COMPLEMENTO,  
       i.BAIRRO,i.CIDADE,i.UF,i.PAIS,i.DDD,i.TELEFONE,i.FAX  
  
      FROM  
       LOJA_VENDA V -- #50#  
        INNER JOIN LOJA_VENDA_PGTO PG  
         ON V.CODIGO_FILIAL_PGTO = PG.CODIGO_FILIAL AND V.TERMINAL_PGTO = PG.TERMINAL AND V.LANCAMENTO_CAIXA = PG.LANCAMENTO_CAIXA           
        INNER JOIN LOJAS_VAREJO D  
         ON PG.CODIGO_FILIAL = D.CODIGO_FILIAL           
        INNER JOIN @LCF LCF  
         ON PG.CODIGO_FILIAL = LCF.CODIGO_FILIAL  
         AND PG.ID_EQUIPAMENTO = LCF.ID_EQUIPAMENTO  
         AND ISNULL(PG.NUMERO_CUPOM_FISCAL,'0') BETWEEN LCF.COO_INICIAL AND LCF.COO_FINAL   
         AND (PG.DIGITACAO BETWEEN LCF.DATA_FISCAL AND LCF.DATA_HORA_REDUCAO_Z OR LCF.DATA_HORA_REDUCAO_Z IS NULL) -- #63#  
        LEFT JOIN CLIENTES_VAREJO I  
         ON V.CODIGO_CLIENTE = I.CODIGO_CLIENTE  
      WHERE PG.NUMERO_CCF IS NOT NULL  
     ), -- #50#  
     TICKET_ITENS as -- #50#  
     ( -- #50#  
      SELECT -- #50#  
       P.CODIGO_FILIAL,P.TICKET,P.DATA_VENDA,P.ITEM,P.CODIGO_BARRA,P.PRODUTO, -- #50#  
       P.COR_PRODUTO,P.TAMANHO,P.QTDE,P.ITEM_EXCLUIDO, -- #50#  
       PD.DESC_PROD_NF,PD.TRIBUT_ORIGEM,PD.TRIBUT_ICMS,PD.INDICADOR_CFOP,PD.CLASSIF_FISCAL,PD.PESO--,PD.TIPO_ITEM_SPED -- #50#  
      FROM -- #50#  
       LOJA_VENDA_PRODUTO P (NOLOCK) -- #50#  
       INNER JOIN PRODUTOS PD (NOLOCK) -- #50#  
        ON P.PRODUTO = PD.PRODUTO -- #50#          
     )  
  
     INSERT INTO @DETALHE_ECF  
     -- #48# (início)  
     select  
      CODIGO_FILIAL    = LCF.CODIGO_FILIAL,  
      TICKET      = COALESCE(max(TICKET.TICKET), max(cupom.TICKET), dbo.FX_GERA_N_TICKET(max(E01.NUM_SEQ_ECF), CAST(cupom.COO AS INT))), -- #51# #52#  
      DATA_VENDA     = COALESCE(max(TICKET.DATA_VENDA), max(cupom.DATA_VENDA), max(cupom.DATA_INI_DOC)), -- #51# #52#  
      ITEM      = replicate('0',4-len(itens.ITEM)) + cast(itens.ITEM as char(4)), --#71#  
      COD_FILIAL     = max(F.COD_FILIAL),  
      FILIAL      = max(F.FILIAL),  
      CGC_CPF_FILIAL    = max(F.CGC_CPF_FILIAL),  
      CODIGO_MATRIZ_FISCAL  = max(F.COD_MATRIZ_FISCAL),  
      COD_MATRIZ_FISCAL   = max(F.COD_MATRIZ_FISCAL),  
      MATRIZ_FISCAL    = max(F.MATRIZ_FISCAL),  
      CGC_CPF_MATRIZ_FISCAL  = max(F.CGC_CPF_MATRIZ_FISCAL),  
      COD_CLIFOR     = max(TICKET.CODIGO_CLIENTE),  
      NOME_CLIFOR     = max(TICKET.CLIENTE_VAREJO),  
      CGC_CPF      = max(TICKET.CPF_CGC),  
      CPF_CGC_ECF     = max(cupom.CPF_CNPJ),  
      PF_PJ      = max(cast(TICKET.PF_PJ as tinyint)),  
      RG_IE      = max(TICKET.RG_IE),  
      CADASTRAMENTO    = max(TICKET.CADASTRAMENTO_CLI),  
      CEP       = max(TICKET.CEP),  
      ENDERECO     = max(TICKET.ENDERECO),  
      COMPLEMENTO     = max(TICKET.COMPLEMENTO),  
      BAIRRO      = max(TICKET.BAIRRO),  
      CIDADE      = max(TICKET.CIDADE),  
      UF       = max(TICKET.UF),  
      PAIS      = max(TICKET.PAIS),  
      DDD       = max(TICKET.DDD),  
      TELEFONE     = max(TICKET.TELEFONE),  
      FAX       = max(TICKET.FAX),  
      TERMINAL     = ISNULL(MAX(LCF.TERMINAL),MAX(TICKET.TERMINAL)),  
      LANCAMENTO_CAIXA   = max(TICKET.LANCAMENTO_CAIXA),  
      DATA      = ISNULL(MAX(LCF.DATA_FISCAL),max(TICKET.DATA_VENDA)), -- #52#  
      ID_EQUIPAMENTO    = max(E01.SERIE_ECF), -- #52#  
      MODELO_ECF     = MAX(LCF.MODELO),  
      NUMERO_CUPOM_FISCAL   = max(cupom.COO),  
      ITEM_EXCLUIDO    = max(itens.ITEM_EXCLUIDO),  
      CANCELADO_FISCAL   = max(cupom.CANCELADO_FISCAL),  
      QTDE_CANCELADA    = (CASE WHEN max(itens.ITEM_EXCLUIDO) = 1 OR max(cupom.CANCELADO_FISCAL) = 1 THEN max(itens.QTDE_CANCELADA) ELSE 0 END),  
      VALOR_UNITARIO    = max(itens.VALOR_UNITARIO),  
      PRECO_BRUTO     = max(itens.PRECO_BRUTO),  
      DESCONTO_ITEM    = case when max(itens.ITEM_EXCLUIDO) = 0 then max(itens.DESCONTO_ITEM) else 0 end, -- #47#  
      DESCONTO_SUBTOTAL   = cast(case when max(cupom.DESCONTO_SUBTOTAL) > 0 and max(itens.ITEM_EXCLUIDO) = 0 then max(itens.VALOR_VENDA_BRUTA) - max(itens.VALOR_LIQUIDO_TOTAL) - max(itens.VALOR_DESCONTO ) else 0.00 end as decimal(14,2)), -- #54#  
      ACRESCIMO_ITEM    = case when max(itens.ITEM_EXCLUIDO) = 0 then max(itens.ACRES_ITEM) else 0 end, -- #47#  
      -- #81# ACRESCIMO_SUBTOTAL = cast(case when max(cupom.ACRES_SUBTOTAL   ) > 0 and max(itens.ITEM_EXCLUIDO) = 0 then max(itens.VALOR_ACRESCIMO) + abs(max(itens.VALOR_VENDA_BRUTA) - max(itens.VALOR_DESCONTO) - (max(itens.VALOR_LIQUIDO_TOTAL) ) + max(itens.VALOR_ACRESCIMO)) else 0.00 end as decimal(14,2)), -- #54# #81# Acrescimo já estava calculado no campo VALOR_LIQUIDO_TOTAL  
      ACRESCIMO_SUBTOTAL   =   cast(case when max(cupom.ACRES_SUBTOTAL) > 0 and max(itens.ITEM_EXCLUIDO) = 0 then abs(max(itens.VALOR_VENDA_BRUTA) - max(itens.VALOR_DESCONTO) - (max(itens.VALOR_LIQUIDO_TOTAL) )) else 0.00 end as decimal(14,2)), -- #81#  
      RATEIO_DESCONTO_VENDA  = 0, --não usado  
      DESC_ICMS     = max(itens.DESC_ICMS),  
      ICMS      = CASE WHEN cast(max(itens.ALIQUOTA) as numeric(14,2)) < 0 THEN cast(0 as numeric(14,2)) ELSE cast(max(itens.ALIQUOTA) as numeric(14,2)) END,  
      ALIQUOTA     = max(itens.ALIQUOTA),  
      TOTALIZADOR     = MAX(ITENS.TOTALIZADOR),  
      QTDE      = max(itens.QTDE),  
      VALOR_CANCELADO    = max(itens.VALOR_CANCELADO),  
      DATA_HORA_CANCELAMENTO  = max(TICKET.DATA_HORA_CANCELAMENTO),  
      PRODUTO      = ISNULL(max(TICKET_ITENS.PRODUTO),max(itens.COD_PRODUTO_CUPOM)), -- #50#  
      DESC_PRODUTO    = ISNULL(max(TICKET_ITENS.DESC_PROD_NF),max(itens.DESC_PROD_CUPOM)), -- #50#  
      CODIGO_BARRA    = ISNULL(max(TICKET_ITENS.CODIGO_BARRA),max(itens.COD_PRODUTO_CUPOM)), -- #50#  
      UNIDADE      = max(itens.UNIDADE),  
      TRIBUT_ORIGEM    = ISNULL(max(TICKET_ITENS.TRIBUT_ORIGEM), ''), -- #50#  
      TRIBUT_ICMS     = ISNULL(max(TICKET_ITENS.TRIBUT_ICMS), ''), -- #50#  
      INDICADOR_CFOP    = ISNULL(max(TICKET_ITENS.INDICADOR_CFOP), 0), -- #50#  
      CLASSIF_FISCAL    = ISNULL(max(TICKET_ITENS.CLASSIF_FISCAL), ''), -- #50#  
      PESO      = ISNULL(max(TICKET_ITENS.PESO), 0),    -- #50#         
      --CODIGO_FISCAL_OPERACAO  = ISNULL(max(LCF.CODIGO_FISCAL_OPERACAO), '5102'),  
      --CODIGO_FISCAL_OPERACAO_ST = CASE WHEN max(itens.ALIQUOTA) = -1 THEN '5405' ELSE ISNULL(CONVERT(VARCHAR(4), max(LCF.CODIGO_FISCAL_OPERACAO)), '5102') END,  
      CONTADOR_REINICIO_OPERACAO = LCF.CRO,  
      QTDE_REDUCOES_Z    = max(E01.CRZ_FINAL),  
      NUMERO_MODELO_FISCAL  = max(LCF.NUMERO_MODELO_FISCAL),  
      --NR_MAPA_RESUMO    = max(LCF.NR_MAPA_RESUMO),  
      COO_INICIAL     = max(LCF.CF_INICIAL),  
      COO_FINAL     = max(LCF.CF_FINAL),  
      GT_INICIAL     = max(LCF.GT_INICIAL),  
      GT_FINAL     = max(LCF.GT_FINAL),  
      SERIE_NF     = max(LCF.SERIE_NF), -- #67#  
      ECF       = max(E01.NUM_SEQ_ECF),  
      TOTAL_TARIFA    = max(LCFT.TOTAL_TARIFA),  
      CNPJ_CPF_INFORMATIVO  = max(cupom.CPF_CNPJ),  
      --TIPO_ITEM_SPED    = '', -- #50#  
      LOCALIDADE     = 0, --<fixo>  
      VALOR_LIQUIDO_TOTAL   = max(itens.VALOR_LIQUIDO_TOTAL),  
      VALOR_CONTABIL    = max(itens.VALOR_LIQUIDO_TOTAL),  
      VALOR_DESCONTO    = max(itens.DESCONTO_ITEM) + cast(case when max(cupom.DESCONTO_SUBTOTAL) > 0 and max(itens.ITEM_EXCLUIDO) = 0 then max(itens.VALOR_VENDA_BRUTA) - max(itens.VALOR_LIQUIDO_TOTAL) - max(itens.VALOR_DESCONTO ) else 0.00 end as decimal(
14,2)), -- #54#  
      VALOR_ACRESCIMO    = max(itens.ACRES_ITEM)    + cast(case when max(cupom.ACRES_SUBTOTAL   ) > 0 and max(itens.ITEM_EXCLUIDO) = 0 then max(itens.VALOR_ACRESCIMO) + abs(max(itens.VALOR_VENDA_BRUTA) - max(itens.VALOR_DESCONTO) - (max(itens.VALOR_LIQUIDO_TOTAL)) + max(itens.VALOR_ACRESCIMO)) else 0.00 end as decimal(14,2)), -- #54#  
      BASE_ICMS     = CASE WHEN max(ALIQUOTA) > 0 THEN max(itens.VALOR_LIQUIDO_TOTAL) ELSE 0.00 END, -- #49#  
      VALOR_ICMS     = 0, --não usado  
      VALOR_VENDA_BRUTA   = case when max(itens.ITEM_EXCLUIDO) = 0 then max( itens.VALOR_LIQUIDO_TOTAL) +  
              max(itens.DESCONTO_ITEM) + cast(case when max(cupom.DESCONTO_SUBTOTAL) > 0 and max(itens.ITEM_EXCLUIDO) = 0 then (max(itens.VALOR_VENDA_BRUTA)) - max(itens.VALOR_LIQUIDO_TOTAL) - max(itens.VALOR_DESCONTO ) else 0.00 end as decimal(14,2)) -- #54#  
              else max(itens.VALOR_CANCELADO) end ,  
      TOTAL_BRUTO     = 0, --não usado  
      TOTAL_CANCELADO    = 0, --não usado  
      TOTAL_DESCONTO    = 0, --não usado  
      TOTAL_ACRESCIMO    = 0, --não usado  
      TOTAL_ISENTO    = CASE WHEN max(ALIQUOTA) =  0 THEN max(itens.VALOR_LIQUIDO_TOTAL) ELSE 0.00 END,  
      TOTAL_SUBSTITUICAO   = CASE WHEN max(ALIQUOTA) = -1 THEN max(itens.VALOR_LIQUIDO_TOTAL) ELSE 0.00 END,  
      TOTAL_NAO_TRIBUTAVEL  = CASE WHEN max(ALIQUOTA) = -2 THEN max(itens.VALOR_LIQUIDO_TOTAL) ELSE 0.00 END,  
      LJ_VALOR_RATEIO    = cast(0 as numeric(14,2)),  
      TOTAL_VENDA     = 0, --não usado  
      DESCONTO_ITEM_CANC   = 0, --não usado  
      ACRESCIMO_ITEM_CANC   = 0, --não usado  
      TOTAL_DESCONTO_VENDA  = 0, --não usado  
      BC_RATEIO_DESCONTO   = 0, --não usado  
      CUPOM_DESC_ACRESC_SUBTOTAL = max(cupom.DESCONTO_SUBTOTAL) - max(cupom.ACRES_SUBTOTAL), -- #47#  
      DECIMAIS_VALOR_UNIT         = MAX(ITENS.DECIMAIS_VALOR_UNIT)   
     from LJ_ECF_AC1704_E01 E01  (NOLOCK)
     inner join cupom on  
      E01.SERIE_ECF = cupom.SERIE_ECF  
     and E01.MF_ADICIONAL = cupom.MF_ADICIONAL  
     and cupom.DATA_INI_DOC BETWEEN E01.DATA_INICIAL AND E01.DATA_FINAL  
     inner join cupom_itens itens on  
      cupom.SERIE_ECF = itens.SERIE_ECF  
     and cupom.MF_ADICIONAL = itens.MF_ADICIONAL  
     and cupom.USUARIO_ECF = itens.USUARIO_ECF  
     and cupom.COO = itens.COO  
     inner join LCF on  
      cupom.SERIE_ECF = LCF.ID_EQUIPAMENTO  
     and E01.NUM_SEQ_ECF = LCF.ECF  
     and cupom.DATA_INI_DOC = LCF.DATA_FISCAL  
     and cupom.COO BETWEEN LCF.CF_INICIAL AND LCF.CF_FINAL  
     left join LCFT on  
      LCFT.CODIGO_FILIAL = LCF.CODIGO_FILIAL  
     and LCFT.TERMINAL = LCF.TERMINAL  
     and LCFT.DATA_FISCAL = LCF.DATA_FISCAL  
     and LCFT.ID_EQUIPAMENTO = LCF.ID_EQUIPAMENTO  
     and LCFT.ECF = LCF.ECF  
     and LCFT.SERIE_NF = LCF.SERIE_NF  
     and LCFT.PER_TARIFA = itens.ALIQUOTA  
     left join TICKET ON  
       cupom.SERIE_ECF = TICKET.ID_EQUIPAMENTO  
      and cupom.COO_INT = TICKET.COO_INT      -- #50#  
     left join TICKET_ITENS ON         -- #50#  
       TICKET.CODIGO_FILIAL = TICKET_ITENS.CODIGO_FILIAL -- #50#  
      AND TICKET.DATA_VENDA = TICKET_ITENS.DATA_VENDA   -- #50#  
      AND TICKET.TICKET = TICKET_ITENS.TICKET     -- #50#  
      and itens.ITEM = TICKET_ITENS.ITEM      -- #50#  
     LEFT JOIN LOJAS_VAREJO LV ON LCF.CODIGO_FILIAL = LV.CODIGO_FILIAL -- #51#  
     LEFT JOIN FILIAL F ON LV.FILIAL = F.FILIAL  
  
     WHERE LCF.CODIGO_FILIAL = @CODIGO_FILIAL  
     AND  LCF.ID_EQUIPAMENTO = @SERIALNUMBER  
     AND  LCF.DATA_FISCAL = @DATA_MES  
  
     GROUP BY  
      LCF.CODIGO_FILIAL, LCF.ID_EQUIPAMENTO, LCF.CRO, cupom.COO, itens.ITEM -- #52#  
     -- #48# (fim)  
      
  
--------------------------------------------------------------------  
--  Ajustes anterioremente realizados no Mapa Resumo Fiscal   --  
--------------------------------------------------------------------  
  
  
     Update A set VALOR_CANCELADO = VALOR_CANCELADO + ACRES_SUBTOTAL   
        from @DETALHE_ECF A 
        Inner join LJ_ECF_AC1704_E14 B  
        on rtrim(ltrim(A.TICKET))      = rtrim(ltrim(B.TICKET))   
        and rtrim(ltrim(A.COD_FILIAL)) = rtrim(ltrim(B.CODIGO_FILIAL))   
        and A.DATA_VENDA = B.DATA_VENDA  
        where CANCELADO_FISCAL > 0  
        and QTDE_CANCELADA > 0  
          
  
     Update A set ACRESCIMO_SUBTOTAL = ACRESCIMO_SUBTOTAL + ACRES_SUBTOTAL   
        from @DETALHE_ECF A  
        Inner join LJ_ECF_AC1704_E14 B  
        on rtrim(ltrim(A.TICKET))      = rtrim(ltrim(B.TICKET))   
        and rtrim(ltrim(A.COD_FILIAL)) = rtrim(ltrim(B.CODIGO_FILIAL))   
        and A.DATA_VENDA = B.DATA_VENDA  
        Where CANCELADO_FISCAL > 0  
        and QTDE_CANCELADA > 0  
          
  
     Update A set VALOR_VENDA_BRUTA = VALOR_VENDA_BRUTA + ACRES_SUBTOTAL  
        from @DETALHE_ECF A 
        Inner join LJ_ECF_AC1704_E14 B  (NOLOCK)
        on rtrim(ltrim(A.TICKET))      = rtrim(ltrim(B.TICKET))   
        and rtrim(ltrim(A.COD_FILIAL)) = rtrim(ltrim(B.CODIGO_FILIAL))   
        and A.DATA_VENDA = B.DATA_VENDA  
        Where CANCELADO_FISCAL > 0  
        and QTDE_CANCELADA > 0  
  
     -- #55# (Verifica se houve diferença de cancelamento e se há possibilidade de uma nova tentativa - Início)  
     SET @TENTA_PROC_MFD = 0  
       
     IF LEFT(@SERIALNUMBER, 2) = 'BE'  
     BEGIN  
      SET @DIF_CANC_MFD = 0  
        
      SELECT @DIF_CANC_MFD = SUM(D.VALOR_CANCELADO) - MAX(LCF.TOTAL_CANCELADO)  
      FROM @DETALHE_ECF D  
      INNER JOIN @LCF LCF  
      ON D.CODIGO_FILIAL = LCF.CODIGO_FILIAL AND D.ID_EQUIPAMENTO = LCF.ID_EQUIPAMENTO AND D.DATA_VENDA = LCF.DATA_FISCAL AND D.CONTADOR_REINICIO_OPERACAO = LCF.CONTADOR_REINICIO_OPERACAO   
        
      IF @DIF_CANC_MFD > 0  
      BEGIN  
       DELETE FROM @CUPOM_NCANC   
         
       INSERT INTO @CUPOM_NCANC   
       SELECT TOP 1 E14.SERIE_ECF, E14.MF_ADICIONAL, E14.USUARIO_ECF, E14.COO  
       FROM LJ_ECF_AC1704_E14 E14  (NOLOCK)
       INNER JOIN @LCF LCF  
       ON E14.SERIE_ECF = LCF.ID_EQUIPAMENTO  
       AND E14.DATA_INI_DOC = LCF.DATA_FISCAL  
       AND E14.COO BETWEEN LCF.CF_INICIAL AND LCF.CF_FINAL  
       INNER JOIN LJ_ECF_AC1704_E15 E15 (NOLOCK) 
       ON E14.SERIE_ECF = E15.SERIE_ECF AND E14.USUARIO_ECF = E15.USUARIO_ECF AND E14.COO = E15.COO   
       INNER JOIN LOJA_VENDA_PGTO PG  (NOLOCK)
       ON E14.SERIE_ECF = PG.ID_EQUIPAMENTO AND E14.COO = PG.NUMERO_CUPOM_FISCAL AND E14.CCF_ = PG.NUMERO_CCF       
       WHERE E14.DOC_CANCELADO = 'N'  
       AND PG.CANCELADO_FISCAL = 1  
       AND E15.ITEM_CANCELADO = 'N'  
       GROUP BY E14.SERIE_ECF, E14.MF_ADICIONAL, E14.USUARIO_ECF, E14.COO  
       HAVING SUM(E15.QTDE * E15.VALOR_UNIT) = @DIF_CANC_MFD   
         
       IF EXISTS(SELECT * FROM @CUPOM_NCANC)  
       BEGIN  
        SET @TENTA_PROC_MFD = 1  
        DELETE FROM @DETALHE_ECF  
       END  
      END  
     END  
     -- #55# (Verifica se houve diferença de cancelamento e se há possibilidade de uma nova tentativa - Fim)  
    END  
    -- PROCESSA MRF COM MFD NO MÉTODO MAIS NOVO (Fim) #65#  
   END  
     
     
   IF @TENTA_PROC_MFD = 0 -- #55#  
   BEGIN     -- #55#  
    -- #50# (Obtém dados dos produtos - Início)  
    -- Primeira tentativa via código de barras  
    UPDATE @DETALHE_ECF  
     SET PRODUTO = P.PRODUTO,  
      TRIBUT_ORIGEM = P.TRIBUT_ORIGEM,  
      TRIBUT_ICMS = P.TRIBUT_ICMS,  
      INDICADOR_CFOP = P.INDICADOR_CFOP,  
      CLASSIF_FISCAL = P.CLASSIF_FISCAL/*,  
      TIPO_ITEM_SPED = P.TIPO_ITEM_SPED*/  
    FROM @DETALHE_ECF A  
    INNER JOIN PRODUTOS_BARRA B  
     ON A.CODIGO_BARRA = B.CODIGO_BARRA   
    INNER JOIN PRODUTOS P  
     ON B.PRODUTO = P.PRODUTO   
    WHERE A.TRIBUT_ICMS = ''  
  
    -- Segunda tentativa via código do produto  
    -- #66# (Início)  
    DECLARE @CODPROD TABLE (  
     CODIGO_BARRA VARCHAR(25) NOT NULL,  
     PRODUTO CHAR(12),  
     TRIBUT_ORIGEM    CHAR(3),           
     TRIBUT_ICMS     CHAR(3),           
     INDICADOR_CFOP    TINYINT,           
     CLASSIF_FISCAL    CHAR(10),            
     TIPO_ITEM_SPED    CHAR(5),           
     TAM      TINYINT,  
     PRIMARY KEY CLUSTERED (CODIGO_BARRA)  
     )  
       
    INSERT INTO @CODPROD   
    SELECT DISTINCT A.CODIGO_BARRA, NULL, NULL, NULL, NULL, NULL, NULL, 0  
    FROM @DETALHE_ECF A  
    WHERE A.TRIBUT_ICMS = ''  
  
    UPDATE @CODPROD   
     SET TAM = T.TAM   
    FROM @CODPROD C  
    INNER JOIN (  
     SELECT A.CODIGO_BARRA, MAX(LEN(P.PRODUTO)) AS TAM  
     FROM @CODPROD A  
     INNER JOIN PRODUTOS P  
      ON LEFT(A.CODIGO_BARRA, LEN(P.PRODUTO)) = P.PRODUTO    
     GROUP BY A.CODIGO_BARRA) T  
    ON C.CODIGO_BARRA = T.CODIGO_BARRA  
  
    UPDATE @CODPROD   
     SET PRODUTO = CASE WHEN C.TAM > LEN(P.PRODUTO) THEN C.PRODUTO ELSE P.PRODUTO END,  
      TRIBUT_ORIGEM = CASE WHEN C.TAM > LEN(P.PRODUTO) THEN C.TRIBUT_ORIGEM ELSE P.TRIBUT_ORIGEM END,  
      TRIBUT_ICMS = CASE WHEN C.TAM > LEN(P.PRODUTO) THEN C.TRIBUT_ICMS ELSE P.TRIBUT_ICMS END,  
      INDICADOR_CFOP = CASE WHEN C.TAM > LEN(P.PRODUTO) THEN C.INDICADOR_CFOP ELSE P.INDICADOR_CFOP END,  
      CLASSIF_FISCAL = CASE WHEN C.TAM > LEN(P.PRODUTO) THEN C.CLASSIF_FISCAL ELSE P.CLASSIF_FISCAL END,  
      --TIPO_ITEM_SPED = CASE WHEN C.TAM > LEN(P.PRODUTO) THEN C.TIPO_ITEM_SPED ELSE P.TIPO_ITEM_SPED END,  
      TAM = CASE WHEN C.TAM > LEN(P.PRODUTO) THEN C.TAM ELSE LEN(P.PRODUTO) END  
    FROM @CODPROD C  
    INNER JOIN PRODUTOS P  
    ON LEFT(C.CODIGO_BARRA, C.TAM) = P.PRODUTO  
  
    UPDATE @DETALHE_ECF  
     SET PRODUTO = P.PRODUTO,  
      TRIBUT_ORIGEM = P.TRIBUT_ORIGEM,  
      TRIBUT_ICMS = P.TRIBUT_ICMS,  
      INDICADOR_CFOP = P.INDICADOR_CFOP,  
      CLASSIF_FISCAL = P.CLASSIF_FISCAL/*,  
      TIPO_ITEM_SPED = P.TIPO_ITEM_SPED*/  
    FROM @DETALHE_ECF A  
    INNER JOIN @CODPROD P  
    ON A.CODIGO_BARRA = P.CODIGO_BARRA   
    WHERE A.TRIBUT_ICMS = ''  
  
    
       
     -- #50# (Obtém dados dos produtos - Fim)  
  
    -- Ajusta diferença de acréscimo ou desconto no subtotal #47# (início)  
    DECLARE @E_NUMERO_CUPOM_FISCAL AS VARCHAR(8), @E_DIF AS NUMERIC(14,2), @E_CUPOM_DESC_ACRESC_SUBTOTAL AS NUMERIC(14,2), @E_ITEM CHAR(4)  
  
    DECLARE CUR_EDIF CURSOR LOCAL FAST_FORWARD FOR   
    SELECT NUMERO_CUPOM_FISCAL, MAX(CUPOM_DESC_ACRESC_SUBTOTAL) - (SUM(DESCONTO_SUBTOTAL) - SUM(ACRESCIMO_SUBTOTAL)) AS DIF, MAX(CUPOM_DESC_ACRESC_SUBTOTAL) AS CUPOM_DESC_ACRESC_SUBTOTAL -- #48#  
    FROM @DETALHE_ECF   
    WHERE ITEM_EXCLUIDO = 0  
    GROUP BY NUMERO_CUPOM_FISCAL   
    HAVING MAX(CUPOM_DESC_ACRESC_SUBTOTAL) <> 0  
    AND MAX(CUPOM_DESC_ACRESC_SUBTOTAL) <> (SUM(DESCONTO_SUBTOTAL) - SUM(ACRESCIMO_SUBTOTAL)) -- #48#  
      
    OPEN CUR_EDIF  
      
    FETCH NEXT FROM CUR_EDIF INTO @E_NUMERO_CUPOM_FISCAL, @E_DIF, @E_CUPOM_DESC_ACRESC_SUBTOTAL  
      
    WHILE @@FETCH_STATUS = 0  
    BEGIN  
     SELECT TOP 1 @E_ITEM = ITEM  
     FROM @DETALHE_ECF   
     WHERE NUMERO_CUPOM_FISCAL = @E_NUMERO_CUPOM_FISCAL   
     AND ITEM_EXCLUIDO = 0  
     ORDER BY VALOR_LIQUIDO_TOTAL DESC  
       
     UPDATE @DETALHE_ECF   
      SET DESCONTO_SUBTOTAL = DESCONTO_SUBTOTAL + CASE WHEN @E_CUPOM_DESC_ACRESC_SUBTOTAL > 0 THEN @E_DIF ELSE 0 END,  
       VALOR_DESCONTO = VALOR_DESCONTO + CASE WHEN @E_CUPOM_DESC_ACRESC_SUBTOTAL > 0 THEN @E_DIF ELSE 0 END,   
       ACRESCIMO_SUBTOTAL = ACRESCIMO_SUBTOTAL - CASE WHEN @E_CUPOM_DESC_ACRESC_SUBTOTAL < 0 THEN @E_DIF ELSE 0 END,  
       VALOR_ACRESCIMO = VALOR_ACRESCIMO - CASE WHEN @E_CUPOM_DESC_ACRESC_SUBTOTAL < 0 THEN @E_DIF ELSE 0 END,  
       VALOR_LIQUIDO_TOTAL = VALOR_LIQUIDO_TOTAL - @E_DIF,   
       VALOR_CONTABIL = VALOR_CONTABIL - @E_DIF,  
       BASE_ICMS = BASE_ICMS - @E_DIF,  
       VALOR_VENDA_BRUTA = VALOR_VENDA_BRUTA - CASE WHEN @E_CUPOM_DESC_ACRESC_SUBTOTAL < 0 THEN @E_DIF ELSE 0 END,  
       TOTAL_ISENTO = TOTAL_ISENTO - CASE WHEN ALIQUOTA = 0 THEN @E_DIF ELSE 0 END,  
       TOTAL_SUBSTITUICAO = TOTAL_SUBSTITUICAO - CASE WHEN ALIQUOTA = -1 THEN @E_DIF ELSE 0 END,  
       TOTAL_NAO_TRIBUTAVEL = TOTAL_NAO_TRIBUTAVEL - CASE WHEN ALIQUOTA = -2 THEN @E_DIF ELSE 0 END  
     WHERE NUMERO_CUPOM_FISCAL = @E_NUMERO_CUPOM_FISCAL AND ITEM = @E_ITEM   
       
     FETCH NEXT FROM CUR_EDIF INTO @E_NUMERO_CUPOM_FISCAL, @E_DIF, @E_CUPOM_DESC_ACRESC_SUBTOTAL  
    END    
    -- Ajusta diferença de acréscimo ou desconto no subtotal #47# (fim)  
   END  -- #55#  
     
  END  
 END  
  
 -- AJUSTE DE DESCONTO/ACRESCIMO ENTRE ALÍQUOTAS/SITUAÇÕES TRIBUTÁRIAS DO MESMO CUPOM          
  
          
 DECLARE @ALIQUOTA DECIMAL(5,2), @USA_DESCONTO BIT, @CODIGO_FILIAL_DIF CHAR(6), @TICKET CHAR(8),  -- #33#  
  @DATA_VENDA DATETIME, @ITEM CHAR(4), @AJUSTOU_DESC BIT, @AJUSTOU_ACRES BIT,          
  @CODIGO_FILIAL_LCF CHAR(6), @TERMINAL_LCF CHAR(3), @DATA_FISCAL_LCF DATETIME,          
  @ID_EQUIPAMENTO_LCF VARCHAR(20), @ECF_LCF SMALLINT, @CF_INICIAL_LCF INT,          
  @MAIOR_DIF DECIMAL(15,2), @LIMITE_TENTATIVAS INT, @CONT_TENTATIVAS INT, --#26#  
  @SERIE_NF_LCF VARCHAR(6), @ULT_ALIQUOTA DECIMAL(5,2) -- #24#    #67#  
          
 -- TABELA QUE GUARDA OS TICKETS QUE TEM MAIS DE UMA ALÍQUOTA/SITUAÇÃO TRIBUTÁRIA  
 DECLARE @TICKET_ALIQUOTAS TABLE   
  (          -- #31#  
  CODIGO_FILIAL CHAR(6),           -- #31#  
  TICKET CHAR(8),             -- #31#  
  DATA_VENDA DATETIME            -- #31#  
  PRIMARY KEY CLUSTERED (CODIGO_FILIAL, TICKET, DATA_VENDA)  
  )  -- #31#           
          
 SET @USA_DESCONTO = 1          
 SET @AJUSTOU_ACRES = 1          
 SET @AJUSTOU_DESC = 1          
          
 -- PESQUISA DIFERENÇA          
  
 IF @CRIAR_LCF = 0                    -- #39#  
  
 BEGIN -- SÓ TRATA DIFERENÇA SE OS DADOS JÁ EXISTIAM NA TABELA LOJA_CONTROLE_FISCAL_TARIFAS -- #39#  
  
  SET @ALIQUOTA = NULL           
  SELECT TOP 1           
   @CODIGO_FILIAL_LCF  = A.CODIGO_FILIAL,  
   @TERMINAL_LCF       = A.TERMINAL,   
   @DATA_FISCAL_LCF    = A.DATA_FISCAL,          
   @ID_EQUIPAMENTO_LCF = A.ID_EQUIPAMENTO,   
   @ECF_LCF        = A.ECF,   
   @CF_INICIAL_LCF = A.CF_INICIAL,          
   @SERIE_NF_LCF   = A.SERIE_NF,  
   @ALIQUOTA       = A.PER_TARIFA,           -- #26#  
   @MAIOR_DIF      = ABS(A.VALOR-B.VALOR) -- #26#  
  FROM   
   (          
   SELECT A.CODIGO_FILIAL, A.TERMINAL, A.DATA_FISCAL, A.ID_EQUIPAMENTO, A.ECF, A.CF_INICIAL, A.SERIE_NF,          
    A.PER_TARIFA, CASE WHEN ISNULL(A.TOTAL_TARIFA_ECF,0) = 0 THEN A.TOTAL_TARIFA ELSE A.TOTAL_TARIFA_ECF END AS VALOR          
   FROM LOJA_CONTROLE_FISCAL_TARIFAS A (NOLOCK)         
   INNER JOIN LOJA_CONTROLE_FISCAL B       (NOLOCK)   
    ON A.CODIGO_FILIAL            = B.CODIGO_FILIAL           
     AND A.TERMINAL            = B.TERMINAL          
     AND A.DATA_FISCAL         = B.DATA_FISCAL          
     AND A.ID_EQUIPAMENTO      = B.ID_EQUIPAMENTO          
     AND A.ECF           = B.ECF          
     AND A.CF_INICIAL          = B.CF_INICIAL          
     AND A.SERIE_NF            = B.SERIE_NF           
   INNER JOIN @FILIAIS C ON B.FILIAL = C.FILIAL          
   WHERE   
    ID_IMPOSTO = 1          
    AND  A.DATA_FISCAL BETWEEN @DATA_INICIAL AND @DATA_FINAL          
    AND  C.COD_MATRIZ_FISCAL = @CODIGO_MATRIZ_FISCAL           
    AND  A.PER_TARIFA <> 0          
   UNION          
   SELECT B.CODIGO_FILIAL, B.TERMINAL, B.DATA_FISCAL, B.ID_EQUIPAMENTO, B.ECF, B.CF_INICIAL, B.SERIE_NF,          
    -1 AS TARIFA, B.TOTAL_SUBSTITUICAO AS VALOR          
   FROM LOJA_CONTROLE_FISCAL B   (NOLOCK)       
   INNER JOIN @FILIAIS C ON B.FILIAL = C.FILIAL          
   WHERE B.DATA_FISCAL BETWEEN @DATA_INICIAL AND @DATA_FINAL          
    AND  C.COD_MATRIZ_FISCAL = @CODIGO_MATRIZ_FISCAL           
   UNION          
   SELECT B.CODIGO_FILIAL, B.TERMINAL, B.DATA_FISCAL, B.ID_EQUIPAMENTO, B.ECF, B.CF_INICIAL, B.SERIE_NF,          
    0 AS TARIFA, B.TOTAL_ISENTO AS VALOR          
   FROM LOJA_CONTROLE_FISCAL B    (NOLOCK)      
   INNER JOIN @FILIAIS C ON B.FILIAL = C.FILIAL          
   WHERE B.DATA_FISCAL BETWEEN @DATA_INICIAL AND @DATA_FINAL          
    AND  C.COD_MATRIZ_FISCAL = @CODIGO_MATRIZ_FISCAL           
   UNION          
   SELECT B.CODIGO_FILIAL, B.TERMINAL, B.DATA_FISCAL, B.ID_EQUIPAMENTO, B.ECF, B.CF_INICIAL, B.SERIE_NF,          
    -2 AS TARIFA, TOTAL_NAO_TRIBUTAVEL AS VALOR          
   FROM LOJA_CONTROLE_FISCAL B   (NOLOCK)       
   INNER JOIN @FILIAIS C ON B.FILIAL = C.FILIAL          
   WHERE B.DATA_FISCAL BETWEEN @DATA_INICIAL AND @DATA_FINAL          
    AND  C.COD_MATRIZ_FISCAL = @CODIGO_MATRIZ_FISCAL           
   ) A          
  INNER JOIN   
   (          
   SELECT CODIGO_FILIAL, TERMINAL, DATA, ID_EQUIPAMENTO, ECF, COO_INICIAL, SERIE_NF, -- #43#        
    ALIQUOTA AS PER_TARIFA, SUM(VALOR_CONTABIL) AS VALOR          
   FROM @DETALHE_ECF          
   WHERE DATA_VENDA BETWEEN @DATA_INICIAL AND @DATA_FINAL           
   GROUP BY CODIGO_FILIAL, TERMINAL, DATA, ID_EQUIPAMENTO, ECF, COO_INICIAL, SERIE_NF, ALIQUOTA -- #43#  
   ) B          
   ON A.CODIGO_FILIAL = B.CODIGO_FILIAL          
    AND A.TERMINAL = B.TERMINAL           
    AND A.DATA_FISCAL = B.DATA -- #43#         
    AND A.ID_EQUIPAMENTO = B.ID_EQUIPAMENTO           
    AND A.ECF = B.ECF          
    AND A.CF_INICIAL = B.COO_INICIAL           
    AND A.SERIE_NF = B.SERIE_NF           
    AND A.PER_TARIFA = B.PER_TARIFA           
  WHERE A.VALOR > B.VALOR   
  ORDER BY ABS(A.VALOR-B.VALOR) desc -- #26# - #75#       
  
           
  SET @ULT_ALIQUOTA = -10 -- ATRIBUI VALOR IMPOSSÍVEL -- #24#  
  SET @LIMITE_TENTATIVAS = (@MAIOR_DIF / 0.01) * 2 -- #26#  
  IF @LIMITE_TENTATIVAS > 500  -- #27#  
   SET @LIMITE_TENTATIVAS = 500 -- #27#  
  ELSE                               -- #36#  
   -- LIMITE DE TENTATIVAS MÍNIMO É O MÁXIMO DE ITENS EM UM ÚNICO TICKET  
   SELECT @LIMITE_TENTATIVAS = CASE WHEN MAX(QTDE_ITENS) > @LIMITE_TENTATIVAS THEN MAX(QTDE_ITENS) ELSE @LIMITE_TENTATIVAS END -- #36#  
   FROM (                              -- #36#  
    SELECT CODIGO_FILIAL, DATA_VENDA, TICKET, COUNT(*) AS QTDE_ITENS              -- #36#  
    FROM @DETALHE_ECF                          -- #36#  
    GROUP BY CODIGO_FILIAL, DATA_VENDA, TICKET) A                   -- #36#  
  
  SET @CONT_TENTATIVAS = 0       -- #26#  
  
  IF @ALIQUOTA IS NOT NULL        -- #31#  
  BEGIN             -- #31#  
   INSERT INTO @TICKET_ALIQUOTAS      -- #31#  
   SELECT CODIGO_FILIAL, TICKET, DATA_VENDA   -- #31#  
   FROM @DETALHE_ECF         -- #31#  
   WHERE ITEM_EXCLUIDO = 0 AND CANCELADO_FISCAL = 0 -- #31#  
   GROUP BY CODIGO_FILIAL, DATA_VENDA, TICKET   -- #31#  
   HAVING COUNT(DISTINCT ALIQUOTA) > 1     -- #31#  
  END             -- #31#  
                 
  WHILE @ALIQUOTA IS NOT NULL AND ((@USA_DESCONTO = 1 AND @AJUSTOU_DESC = 1) OR (@USA_DESCONTO = 0 AND @AJUSTOU_ACRES = 1) OR @ALIQUOTA <> @ULT_ALIQUOTA OR @CONT_TENTATIVAS < @LIMITE_TENTATIVAS) --#18#  -- #24# #26#         
  BEGIN       
    SET @ULT_ALIQUOTA = @ALIQUOTA -- #24#   
           
   -- AJUSTA DIFERENÇA          
   SET @CODIGO_FILIAL_DIF = NULL -- #15# #33#          
   SET @TICKET = NULL   -- #15#          
   SET @DATA_VENDA = NULL  -- #15#          
   SET @ITEM = NULL   -- #15#          
           
   IF @USA_DESCONTO = 1          
   BEGIN        
       
    -- AJUSTE VIA DESCONTO NO SUBTOTAL          
          
    SET @AJUSTOU_DESC = 0          
  
          
    SELECT TOP 1 @CODIGO_FILIAL_DIF = A.CODIGO_FILIAL, @TICKET = A.TICKET, @DATA_VENDA = A.DATA_VENDA, @ITEM = A.ITEM        -- #33#  
    FROM @DETALHE_ECF A          
    INNER JOIN @TICKET_ALIQUOTAS T   -- #31#  
     ON A.CODIGO_FILIAL = T.CODIGO_FILIAL -- #31#  
      AND A.TICKET = T.TICKET     -- #31#  
      AND A.DATA_VENDA = T.DATA_VENDA   -- #31#  
    INNER JOIN   
     (          
     SELECT A.CODIGO_FILIAL, A.TICKET, A.DATA_VENDA          
     FROM @DETALHE_ECF A          
     WHERE A.CODIGO_FILIAL = @CODIGO_FILIAL_LCF           
      AND  A.TERMINAL = @TERMINAL_LCF           
      AND  A.DATA = @DATA_FISCAL_LCF         -- #43#  
      AND  A.ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF           
      AND  A.ECF = @ECF_LCF           
      AND  A.COO_INICIAL = @CF_INICIAL_LCF           
      AND  A.SERIE_NF = @SERIE_NF_LCF           
      AND  CANCELADO_FISCAL = 0          
      AND  DESCONTO_SUBTOTAL > 0          
      AND  ALIQUOTA IN   
       (          
       SELECT A.PER_TARIFA               
       FROM   
        (          
        SELECT A.CODIGO_FILIAL, A.TERMINAL, A.DATA_FISCAL, A.ID_EQUIPAMENTO, A.ECF, A.CF_INICIAL, A.SERIE_NF,          
         A.PER_TARIFA, CASE WHEN ISNULL(A.TOTAL_TARIFA_ECF,0) = 0 THEN A.TOTAL_TARIFA ELSE A.TOTAL_TARIFA_ECF END AS VALOR          
        FROM LOJA_CONTROLE_FISCAL_TARIFAS A          
        WHERE ID_IMPOSTO = 1          
         AND  A.CODIGO_FILIAL  = @CODIGO_FILIAL_LCF           
         AND  A.TERMINAL       = @TERMINAL_LCF          
         AND  A.DATA_FISCAL    = @DATA_FISCAL_LCF           
         AND  A.ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF          
         AND  A.ECF            = @ECF_LCF          
         AND  A.CF_INICIAL     = @CF_INICIAL_LCF          
         AND  A.SERIE_NF       = @SERIE_NF_LCF           
         AND  A.PER_TARIFA <> 0          
        UNION          
        SELECT B.CODIGO_FILIAL, B.TERMINAL, B.DATA_FISCAL, B.ID_EQUIPAMENTO, B.ECF, B.CF_INICIAL, B.SERIE_NF,          
         -1 AS TARIFA, B.TOTAL_SUBSTITUICAO AS VALOR          
        FROM LOJA_CONTROLE_FISCAL B   (NOLOCK)       
        WHERE B.CODIGO_FILIAL     = @CODIGO_FILIAL_LCF           
         AND  B.TERMINAL       = @TERMINAL_LCF          
         AND  B.DATA_FISCAL    = @DATA_FISCAL_LCF           
         AND  B.ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF          
         AND  B.ECF            = @ECF_LCF          
         AND  B.CF_INICIAL     = @CF_INICIAL_LCF          
         AND  B.SERIE_NF       = @SERIE_NF_LCF           
        UNION          
        SELECT B.CODIGO_FILIAL, B.TERMINAL, B.DATA_FISCAL, B.ID_EQUIPAMENTO, B.ECF, B.CF_INICIAL, B.SERIE_NF,          
         0 AS TARIFA, B.TOTAL_ISENTO AS VALOR          
        FROM LOJA_CONTROLE_FISCAL B    (NOLOCK)      
        WHERE B.CODIGO_FILIAL     = @CODIGO_FILIAL_LCF           
         AND  B.TERMINAL       = @TERMINAL_LCF          
         AND  B.DATA_FISCAL    = @DATA_FISCAL_LCF           
         AND  B.ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF          
         AND  B.ECF            = @ECF_LCF          
         AND  B.CF_INICIAL     = @CF_INICIAL_LCF          
         AND  B.SERIE_NF       = @SERIE_NF_LCF           
        UNION          
        SELECT B.CODIGO_FILIAL, B.TERMINAL, B.DATA_FISCAL, B.ID_EQUIPAMENTO, B.ECF, B.CF_INICIAL, B.SERIE_NF,          
         -2 AS TARIFA, TOTAL_NAO_TRIBUTAVEL AS VALOR          
        FROM LOJA_CONTROLE_FISCAL B    (NOLOCK)      
        WHERE B.CODIGO_FILIAL     = @CODIGO_FILIAL_LCF           
         AND  B.TERMINAL       = @TERMINAL_LCF          
         AND  B.DATA_FISCAL    = @DATA_FISCAL_LCF           
         AND  B.ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF          
         AND  B.ECF            = @ECF_LCF          
         AND  B.CF_INICIAL     = @CF_INICIAL_LCF          
         AND  B.SERIE_NF       = @SERIE_NF_LCF           
        ) A          
       INNER JOIN   
        (          
        SELECT CODIGO_FILIAL, TERMINAL, DATA, ID_EQUIPAMENTO, ECF, COO_INICIAL, SERIE_NF,        -- #43#  
         ALIQUOTA AS PER_TARIFA, SUM(VALOR_CONTABIL) AS VALOR          
        FROM @DETALHE_ECF          
        WHERE CODIGO_FILIAL     = @CODIGO_FILIAL_LCF           
         AND  TERMINAL       = @TERMINAL_LCF          
         AND  DATA           = @DATA_FISCAL_LCF         -- #43#  
         AND  ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF          
         AND  ECF            = @ECF_LCF          
         AND  COO_INICIAL    = @CF_INICIAL_LCF          
         AND  SERIE_NF       = @SERIE_NF_LCF           
        GROUP BY CODIGO_FILIAL, TERMINAL, DATA, ID_EQUIPAMENTO, ECF, COO_INICIAL, SERIE_NF, ALIQUOTA -- #43#  
        ) B          
        ON A.CODIGO_FILIAL       = B.CODIGO_FILIAL          
         AND A.TERMINAL       = B.TERMINAL         
         AND A.DATA_FISCAL    = B.DATA -- #43#           
         AND A.ID_EQUIPAMENTO = B.ID_EQUIPAMENTO           
         AND A.ECF            = B.ECF          
         AND A.CF_INICIAL     = B.COO_INICIAL           
         AND A.SERIE_NF       = B.SERIE_NF           
         AND A.PER_TARIFA     = B.PER_TARIFA           
       WHERE B.VALOR > A.VALOR  
       )          
     ) B          
     ON A.CODIGO_FILIAL = B.CODIGO_FILIAL           
     --   AND A.TICKET = B.TICKET          
        AND A.DATA_VENDA = B.DATA_VENDA           
    WHERE A.CODIGO_FILIAL = @CODIGO_FILIAL_LCF           
     AND  A.TERMINAL = @TERMINAL_LCF           
     AND  A.DATA             = @DATA_FISCAL_LCF         -- #43#  
     AND  A.ID_EQUIPAMENTO   = @ID_EQUIPAMENTO_LCF           
     AND  A.ECF              = @ECF_LCF           
     AND  A.COO_INICIAL      = @CF_INICIAL_LCF           
     AND  A.SERIE_NF         = @SERIE_NF_LCF           
     AND  A.ALIQUOTA         = @ALIQUOTA           
     AND  A.CANCELADO_FISCAL = 0          
     AND  A.DESCONTO_SUBTOTAL > 0          
           
    -- SE ENCONTROU UM TICKET, FAZ O AJUSTE          
       IF @TICKET IS NOT NULL      
  
    BEGIN          
     UPDATE @DETALHE_ECF           
     SET VALOR_LIQUIDO_TOTAL = VALOR_LIQUIDO_TOTAL + 0.01,          
      VALOR_DESCONTO = VALOR_DESCONTO - 0.01,          
      VALOR_CONTABIL = VALOR_CONTABIL + 0.01,          
      BASE_ICMS = CASE WHEN @ALIQUOTA > 0 THEN BASE_ICMS + 0.01 ELSE BASE_ICMS END -- #24#  
     WHERE CODIGO_FILIAL = @CODIGO_FILIAL_DIF         -- #33#  
      AND  DATA_VENDA = @DATA_VENDA           
      AND  TICKET = @TICKET           
      AND  ITEM = @ITEM          
           
     UPDATE @DETALHE_ECF           
     SET VALOR_LIQUIDO_TOTAL = A.VALOR_LIQUIDO_TOTAL - 0.01,          
      VALOR_DESCONTO = A.VALOR_DESCONTO + 0.01,          
      VALOR_CONTABIL = A.VALOR_CONTABIL - 0.01,          
      BASE_ICMS = CASE WHEN A.ALIQUOTA > 0 THEN A.BASE_ICMS - 0.01 ELSE A.BASE_ICMS END  -- #24#        
     FROM @DETALHE_ECF A          
     INNER JOIN   
      (          
      SELECT TOP 1 *          
      FROM @DETALHE_ECF A          
      WHERE A.CODIGO_FILIAL = @CODIGO_FILIAL_LCF           
       AND  A.TERMINAL = @TERMINAL_LCF           
       AND  A.DATA = @DATA_FISCAL_LCF         -- #43#  
       AND  A.ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF           
       AND  A.ECF = @ECF_LCF           
       AND  A.COO_INICIAL = @CF_INICIAL_LCF           
       AND  A.SERIE_NF = @SERIE_NF_LCF           
       AND  CANCELADO_FISCAL = 0          
       AND  DESCONTO_SUBTOTAL > 0          
       AND  ALIQUOTA IN   
        (  
        SELECT A.PER_TARIFA               
        FROM   
         (          
         SELECT A.CODIGO_FILIAL, A.TERMINAL, A.DATA_FISCAL, A.ID_EQUIPAMENTO, A.ECF, A.CF_INICIAL, A.SERIE_NF,          
          A.PER_TARIFA, CASE WHEN ISNULL(A.TOTAL_TARIFA_ECF,0) = 0 THEN A.TOTAL_TARIFA ELSE A.TOTAL_TARIFA_ECF END AS VALOR          
         FROM LOJA_CONTROLE_FISCAL_TARIFAS A  (NOLOCK)        
         WHERE ID_IMPOSTO = 1          
          AND  A.CODIGO_FILIAL = @CODIGO_FILIAL_LCF           
          AND  A.TERMINAL = @TERMINAL_LCF          
          AND  A.DATA_FISCAL = @DATA_FISCAL_LCF           
          AND  A.ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF          
          AND  A.ECF = @ECF_LCF          
          AND  A.CF_INICIAL = @CF_INICIAL_LCF          
          AND  A.SERIE_NF = @SERIE_NF_LCF           
          AND  A.PER_TARIFA <> 0          
         UNION          
         SELECT B.CODIGO_FILIAL, B.TERMINAL, B.DATA_FISCAL, B.ID_EQUIPAMENTO, B.ECF, B.CF_INICIAL, B.SERIE_NF,          
          -1 AS TARIFA, B.TOTAL_SUBSTITUICAO AS VALOR          
         FROM LOJA_CONTROLE_FISCAL B    (NOLOCK)      
         WHERE B.CODIGO_FILIAL = @CODIGO_FILIAL_LCF           
          AND  B.TERMINAL = @TERMINAL_LCF          
          AND  B.DATA_FISCAL = @DATA_FISCAL_LCF           
          AND  B.ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF          
          AND  B.ECF = @ECF_LCF          
          AND  B.CF_INICIAL = @CF_INICIAL_LCF          
          AND  B.SERIE_NF = @SERIE_NF_LCF           
         UNION          
         SELECT B.CODIGO_FILIAL, B.TERMINAL, B.DATA_FISCAL, B.ID_EQUIPAMENTO, B.ECF, B.CF_INICIAL, B.SERIE_NF,          
          0 AS TARIFA, B.TOTAL_ISENTO AS VALOR          
         FROM LOJA_CONTROLE_FISCAL B    (NOLOCK)      
         WHERE B.CODIGO_FILIAL = @CODIGO_FILIAL_LCF           
          AND  B.TERMINAL = @TERMINAL_LCF          
          AND  B.DATA_FISCAL = @DATA_FISCAL_LCF           
          AND  B.ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF          
          AND  B.ECF = @ECF_LCF          
          AND  B.CF_INICIAL = @CF_INICIAL_LCF          
          AND  B.SERIE_NF = @SERIE_NF_LCF           
         UNION          
         SELECT B.CODIGO_FILIAL, B.TERMINAL, B.DATA_FISCAL, B.ID_EQUIPAMENTO, B.ECF, B.CF_INICIAL, B.SERIE_NF,          
          -2 AS TARIFA, TOTAL_NAO_TRIBUTAVEL AS VALOR          
         FROM LOJA_CONTROLE_FISCAL B     (NOLOCK)     
         WHERE B.CODIGO_FILIAL = @CODIGO_FILIAL_LCF           
          AND  B.TERMINAL = @TERMINAL_LCF          
          AND  B.DATA_FISCAL = @DATA_FISCAL_LCF           
          AND  B.ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF          
          AND  B.ECF = @ECF_LCF          
          AND  B.CF_INICIAL = @CF_INICIAL_LCF          
          AND  B.SERIE_NF = @SERIE_NF_LCF           
           
         ) A          
        INNER JOIN   
         (          
         SELECT CODIGO_FILIAL, TERMINAL, DATA, ID_EQUIPAMENTO, ECF, COO_INICIAL, SERIE_NF,        -- #43#  
          ALIQUOTA AS PER_TARIFA, SUM(VALOR_CONTABIL) AS VALOR          
         FROM @DETALHE_ECF          
         WHERE CODIGO_FILIAL = @CODIGO_FILIAL_LCF           
          AND  TERMINAL = @TERMINAL_LCF          
          AND  DATA = @DATA_FISCAL_LCF         -- #43#  
          AND  ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF          
          AND  ECF = @ECF_LCF          
          AND  COO_INICIAL = @CF_INICIAL_LCF          
          AND  SERIE_NF = @SERIE_NF_LCF           
         GROUP BY CODIGO_FILIAL, TERMINAL, DATA, ID_EQUIPAMENTO, ECF, COO_INICIAL, SERIE_NF, ALIQUOTA -- #43#  
         ) B   
         ON A.CODIGO_FILIAL = B.CODIGO_FILIAL          
          AND A.TERMINAL = B.TERMINAL           
          AND A.DATA_FISCAL = B.DATA         -- #43#  
          AND A.ID_EQUIPAMENTO = B.ID_EQUIPAMENTO           
          AND A.ECF = B.ECF          
          AND A.CF_INICIAL = B.COO_INICIAL           
          AND A.SERIE_NF = B.SERIE_NF           
          AND A.PER_TARIFA = B.PER_TARIFA           
        WHERE B.VALOR > A.VALOR  
        )          
           
      ) B          
      ON A.CODIGO_FILIAL = B.CODIGO_FILIAL AND A.DATA_VENDA = B.DATA_VENDA AND A.TICKET = B.TICKET AND A.ITEM = B.ITEM               
  
     SET @AJUSTOU_DESC = 1          
    END          
           
    SET @USA_DESCONTO = 0 -- ALTERNA ENTRE ACRÉSCIMO E DESCONTO          
   END          
   ELSE          
   BEGIN          
    -- AJUSTE VIA ACRÉSCIMO NO SUBTOTAL          
    SET @AJUSTOU_ACRES = 0          
      
     
    SELECT TOP 1 @CODIGO_FILIAL_DIF = A.CODIGO_FILIAL, @TICKET = A.TICKET, @DATA_VENDA = A.DATA_VENDA, @ITEM = A.ITEM        -- #33#  
    FROM @DETALHE_ECF A          
    INNER JOIN @TICKET_ALIQUOTAS T   -- #31#  
     ON A.CODIGO_FILIAL = T.CODIGO_FILIAL -- #31#  
      AND A.TICKET = T.TICKET     -- #31#  
      AND A.DATA_VENDA = T.DATA_VENDA   -- #31#  
    INNER JOIN   
     (          
     SELECT A.CODIGO_FILIAL, A.TICKET, A.DATA_VENDA          
     FROM @DETALHE_ECF A          
     WHERE A.CODIGO_FILIAL = @CODIGO_FILIAL_LCF           
      AND  A.TERMINAL = @TERMINAL_LCF           
      AND  A.DATA = @DATA_FISCAL_LCF         -- #43#  
      AND  A.ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF           
      AND  A.ECF = @ECF_LCF                 
      AND  A.COO_INICIAL = @CF_INICIAL_LCF           
      AND  A.SERIE_NF = @SERIE_NF_LCF           
      AND  CANCELADO_FISCAL = 0          
      AND  ACRESCIMO_SUBTOTAL > 0          
      AND  ALIQUOTA IN   
       (          
       SELECT A.PER_TARIFA               
       FROM   
        (          
        SELECT A.CODIGO_FILIAL, A.TERMINAL, A.DATA_FISCAL, A.ID_EQUIPAMENTO, A.ECF, A.CF_INICIAL, A.SERIE_NF,          
         A.PER_TARIFA, CASE WHEN ISNULL(A.TOTAL_TARIFA_ECF,0) = 0 THEN A.TOTAL_TARIFA ELSE A.TOTAL_TARIFA_ECF END AS VALOR          
        FROM LOJA_CONTROLE_FISCAL_TARIFAS A     (NOLOCK)     
        WHERE ID_IMPOSTO = 1          
         AND  A.CODIGO_FILIAL = @CODIGO_FILIAL_LCF           
         AND  A.TERMINAL = @TERMINAL_LCF          
         AND  A.DATA_FISCAL = @DATA_FISCAL_LCF           
         AND  A.ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF          
         AND  A.ECF = @ECF_LCF          
         AND  A.CF_INICIAL = @CF_INICIAL_LCF          
         AND  A.SERIE_NF = @SERIE_NF_LCF           
         AND  A.PER_TARIFA <> 0          
        UNION          
        SELECT B.CODIGO_FILIAL, B.TERMINAL, B.DATA_FISCAL, B.ID_EQUIPAMENTO, B.ECF, B.CF_INICIAL, B.SERIE_NF,          
         -1 AS TARIFA, B.TOTAL_SUBSTITUICAO AS VALOR          
        FROM LOJA_CONTROLE_FISCAL B     (NOLOCK)     
        WHERE B.CODIGO_FILIAL = @CODIGO_FILIAL_LCF           
         AND  B.TERMINAL = @TERMINAL_LCF          
         AND  B.DATA_FISCAL = @DATA_FISCAL_LCF           
         AND  B.ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF          
         AND  B.ECF = @ECF_LCF          
         AND  B.CF_INICIAL = @CF_INICIAL_LCF          
         AND  B.SERIE_NF = @SERIE_NF_LCF           
        UNION          
        SELECT B.CODIGO_FILIAL, B.TERMINAL, B.DATA_FISCAL, B.ID_EQUIPAMENTO, B.ECF, B.CF_INICIAL, B.SERIE_NF,          
         0 AS TARIFA, B.TOTAL_ISENTO AS VALOR          
        FROM LOJA_CONTROLE_FISCAL B    (NOLOCK)      
        WHERE B.CODIGO_FILIAL = @CODIGO_FILIAL_LCF           
         AND  B.TERMINAL = @TERMINAL_LCF          
         AND  B.DATA_FISCAL = @DATA_FISCAL_LCF           
         AND  B.ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF          
         AND  B.ECF = @ECF_LCF          
         AND  B.CF_INICIAL = @CF_INICIAL_LCF          
         AND  B.SERIE_NF = @SERIE_NF_LCF           
        UNION          
        SELECT B.CODIGO_FILIAL, B.TERMINAL, B.DATA_FISCAL, B.ID_EQUIPAMENTO, B.ECF, B.CF_INICIAL, B.SERIE_NF,          
         -2 AS TARIFA, TOTAL_NAO_TRIBUTAVEL AS VALOR          
        FROM LOJA_CONTROLE_FISCAL B    (NOLOCK)      
        WHERE B.CODIGO_FILIAL = @CODIGO_FILIAL_LCF           
         AND  B.TERMINAL = @TERMINAL_LCF          
         AND  B.DATA_FISCAL = @DATA_FISCAL_LCF           
         AND  B.ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF          
         AND  B.ECF = @ECF_LCF          
         AND  B.CF_INICIAL = @CF_INICIAL_LCF          
         AND  B.SERIE_NF = @SERIE_NF_LCF           
        ) A          
       INNER JOIN   
        (          
        SELECT CODIGO_FILIAL, TERMINAL, DATA, ID_EQUIPAMENTO, ECF, COO_INICIAL, SERIE_NF,        -- #43#  
         ALIQUOTA AS PER_TARIFA, SUM(VALOR_CONTABIL) AS VALOR          
        FROM @DETALHE_ECF          
        WHERE CODIGO_FILIAL = @CODIGO_FILIAL_LCF           
         AND  TERMINAL = @TERMINAL_LCF          
         AND  DATA = @DATA_FISCAL_LCF         -- #43#  
         AND  ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF          
         AND  ECF = @ECF_LCF          
         AND  COO_INICIAL = @CF_INICIAL_LCF          
         AND  SERIE_NF = @SERIE_NF_LCF           
        GROUP BY CODIGO_FILIAL, TERMINAL, DATA, ID_EQUIPAMENTO, ECF, COO_INICIAL, SERIE_NF, ALIQUOTA -- #43#  
        ) B          
        ON A.CODIGO_FILIAL = B.CODIGO_FILIAL          
         AND A.TERMINAL = B.TERMINAL           
         AND A.DATA_FISCAL = B.DATA         -- #43#  
         AND A.ID_EQUIPAMENTO = B.ID_EQUIPAMENTO           
         AND A.ECF = B.ECF          
         AND A.CF_INICIAL = B.COO_INICIAL       
         AND A.SERIE_NF = B.SERIE_NF           
         AND A.PER_TARIFA = B.PER_TARIFA         
       WHERE B.VALOR < A.VALOR  
       )  -- #26#  
     ) B          
     ON A.CODIGO_FILIAL = B.CODIGO_FILIAL           
     -- AND A.TICKET = B.TICKET          
      AND A.DATA_VENDA = B.DATA_VENDA           
    WHERE A.CODIGO_FILIAL = @CODIGO_FILIAL_LCF           
     AND  A.TERMINAL = @TERMINAL_LCF           
     AND  A.DATA = @DATA_FISCAL_LCF         -- #43#  
     AND  A.ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF           
     AND  A.ECF = @ECF_LCF           
     AND  A.COO_INICIAL = @CF_INICIAL_LCF           
     AND  A.SERIE_NF = @SERIE_NF_LCF           
     AND  A.ALIQUOTA = @ALIQUOTA           
     AND  A.CANCELADO_FISCAL = 0          
     AND  A.ACRESCIMO_SUBTOTAL > 0          
           
    -- SE ENCONTROU UM TICKET, FAZ O AJUSTE     
               
    IF @TICKET IS NOT NULL    
           
    BEGIN          
     UPDATE @DETALHE_ECF           
     SET VALOR_LIQUIDO_TOTAL = VALOR_LIQUIDO_TOTAL + 0.01,          
      VALOR_ACRESCIMO = VALOR_ACRESCIMO + 0.01,          
      VALOR_CONTABIL = VALOR_CONTABIL + 0.01,          
      BASE_ICMS = CASE WHEN @ALIQUOTA > 0 THEN BASE_ICMS + 0.01 ELSE BASE_ICMS END -- #24#  
     WHERE CODIGO_FILIAL = @CODIGO_FILIAL_DIF         -- #33#  
      AND  DATA_VENDA = @DATA_VENDA           
      AND  TICKET = @TICKET           
      AND  ITEM = @ITEM          
           
     UPDATE @DETALHE_ECF           
     SET VALOR_LIQUIDO_TOTAL = A.VALOR_LIQUIDO_TOTAL - 0.01,          
      VALOR_ACRESCIMO = A.VALOR_ACRESCIMO - 0.01,          
      VALOR_CONTABIL = A.VALOR_CONTABIL - 0.01,          
      BASE_ICMS = CASE WHEN A.ALIQUOTA > 0 THEN A.BASE_ICMS - 0.01 ELSE A.BASE_ICMS END  -- #24#  
     FROM @DETALHE_ECF A          
     INNER JOIN   
      (          
      SELECT TOP 1 *          
      FROM @DETALHE_ECF A          
      WHERE A.CODIGO_FILIAL = @CODIGO_FILIAL_LCF           
       AND  A.TERMINAL = @TERMINAL_LCF           
       AND  A.DATA = @DATA_FISCAL_LCF         -- #43#  
       AND  A.ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF           
       AND  A.ECF = @ECF_LCF           
       AND  A.COO_INICIAL = @CF_INICIAL_LCF           
       AND  A.SERIE_NF = @SERIE_NF_LCF           
       AND  CANCELADO_FISCAL = 0          
       AND  ACRESCIMO_SUBTOTAL > 0          
       AND  ALIQUOTA IN   
        (          
        SELECT A.PER_TARIFA               
        FROM   
         (          
         SELECT A.CODIGO_FILIAL, A.TERMINAL, A.DATA_FISCAL, A.ID_EQUIPAMENTO, A.ECF, A.CF_INICIAL, A.SERIE_NF,          
          A.PER_TARIFA, CASE WHEN ISNULL(A.TOTAL_TARIFA_ECF,0) = 0 THEN A.TOTAL_TARIFA ELSE A.TOTAL_TARIFA_ECF END AS VALOR          
         FROM LOJA_CONTROLE_FISCAL_TARIFAS A  (NOLOCK)        
         WHERE ID_IMPOSTO = 1          
          AND  A.CODIGO_FILIAL = @CODIGO_FILIAL_LCF           
          AND  A.TERMINAL = @TERMINAL_LCF          
          AND  A.DATA_FISCAL = @DATA_FISCAL_LCF           
          AND  A.ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF          
          AND  A.ECF = @ECF_LCF          
          AND  A.CF_INICIAL = @CF_INICIAL_LCF          
          AND  A.SERIE_NF = @SERIE_NF_LCF           
          AND  A.PER_TARIFA <> 0          
         UNION          
         SELECT B.CODIGO_FILIAL, B.TERMINAL, B.DATA_FISCAL, B.ID_EQUIPAMENTO, B.ECF, B.CF_INICIAL, B.SERIE_NF,          
          -1 AS TARIFA, B.TOTAL_SUBSTITUICAO AS VALOR          
         FROM LOJA_CONTROLE_FISCAL B       (NOLOCK)   
         WHERE B.CODIGO_FILIAL = @CODIGO_FILIAL_LCF           
          AND  B.TERMINAL = @TERMINAL_LCF          
          AND  B.DATA_FISCAL = @DATA_FISCAL_LCF           
          AND  B.ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF          
          AND  B.ECF = @ECF_LCF          
          AND  B.CF_INICIAL = @CF_INICIAL_LCF          
          AND  B.SERIE_NF = @SERIE_NF_LCF           
         UNION          
         SELECT B.CODIGO_FILIAL, B.TERMINAL, B.DATA_FISCAL, B.ID_EQUIPAMENTO, B.ECF, B.CF_INICIAL, B.SERIE_NF,          
          0 AS TARIFA, B.TOTAL_ISENTO AS VALOR          
         FROM LOJA_CONTROLE_FISCAL B          (NOLOCK)
         WHERE B.CODIGO_FILIAL = @CODIGO_FILIAL_LCF           
          AND  B.TERMINAL = @TERMINAL_LCF          
          AND  B.DATA_FISCAL = @DATA_FISCAL_LCF           
          AND  B.ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF          
          AND  B.ECF = @ECF_LCF          
          AND  B.CF_INICIAL = @CF_INICIAL_LCF          
          AND  B.SERIE_NF = @SERIE_NF_LCF           
         UNION          
         SELECT B.CODIGO_FILIAL, B.TERMINAL, B.DATA_FISCAL, B.ID_EQUIPAMENTO, B.ECF, B.CF_INICIAL, B.SERIE_NF,          
          -2 AS TARIFA, TOTAL_NAO_TRIBUTAVEL AS VALOR          
         FROM LOJA_CONTROLE_FISCAL B          
         WHERE B.CODIGO_FILIAL = @CODIGO_FILIAL_LCF           
          AND  B.TERMINAL = @TERMINAL_LCF          
          AND  B.DATA_FISCAL = @DATA_FISCAL_LCF           
          AND  B.ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF          
          AND  B.ECF = @ECF_LCF          
          AND  B.CF_INICIAL = @CF_INICIAL_LCF          
          AND  B.SERIE_NF = @SERIE_NF_LCF           
         ) A          
        INNER JOIN   
         (          
         SELECT CODIGO_FILIAL, TERMINAL, DATA, ID_EQUIPAMENTO, ECF, COO_INICIAL, SERIE_NF,        -- #43#  
          ALIQUOTA AS PER_TARIFA, SUM(VALOR_CONTABIL) AS VALOR          
         FROM @DETALHE_ECF          
         WHERE CODIGO_FILIAL = @CODIGO_FILIAL_LCF           
          AND  TERMINAL = @TERMINAL_LCF          
          AND  DATA = @DATA_FISCAL_LCF         -- #43#  
          AND  ID_EQUIPAMENTO = @ID_EQUIPAMENTO_LCF          
          AND  ECF = @ECF_LCF          
          AND  COO_INICIAL = @CF_INICIAL_LCF          
          AND  SERIE_NF = @SERIE_NF_LCF           
         GROUP BY CODIGO_FILIAL, TERMINAL, DATA, ID_EQUIPAMENTO, ECF, COO_INICIAL, SERIE_NF, ALIQUOTA -- #43#  
         ) B          
         ON A.CODIGO_FILIAL = B.CODIGO_FILIAL          
          AND A.TERMINAL = B.TERMINAL           
          AND A.DATA_FISCAL = B.DATA         -- #43#  
          AND A.ID_EQUIPAMENTO = B.ID_EQUIPAMENTO           
          AND A.ECF = B.ECF          
          AND A.CF_INICIAL = B.COO_INICIAL           
          AND A.SERIE_NF = B.SERIE_NF           
          AND A.PER_TARIFA = B.PER_TARIFA           
        WHERE B.VALOR > A.VALOR  
        )          
      ) B          
      ON A.CODIGO_FILIAL = B.CODIGO_FILIAL AND A.DATA_VENDA = B.DATA_VENDA AND A.TICKET = B.TICKET AND A.ITEM = B.ITEM               
           
     SET @AJUSTOU_ACRES = 1          
    END          
           
    SET @USA_DESCONTO = 1 -- ALTERNA ENTRE ACRÉSCIMO E DESCONTO          
   END          
           
   -- PESQUISA DIFERENÇA          
   SET @ALIQUOTA = NULL           
           
   SELECT TOP 1           
    @CODIGO_FILIAL_LCF = A.CODIGO_FILIAL, @TERMINAL_LCF = A.TERMINAL, @DATA_FISCAL_LCF = A.DATA_FISCAL,          
    @ID_EQUIPAMENTO_LCF = A.ID_EQUIPAMENTO, @ECF_LCF = A.ECF, @CF_INICIAL_LCF = A.CF_INICIAL,          
    @SERIE_NF_LCF = A.SERIE_NF,   
    @ALIQUOTA = A.PER_TARIFA           
   FROM   
    (          
    SELECT A.CODIGO_FILIAL, A.TERMINAL, A.DATA_FISCAL, A.ID_EQUIPAMENTO, A.ECF, A.CF_INICIAL, A.SERIE_NF,          
     A.PER_TARIFA, CASE WHEN ISNULL(A.TOTAL_TARIFA_ECF,0) = 0 THEN A.TOTAL_TARIFA ELSE A.TOTAL_TARIFA_ECF END AS VALOR          
    FROM LOJA_CONTROLE_FISCAL_TARIFAS A   (NOLOCK)       
    INNER JOIN LOJA_CONTROLE_FISCAL B          
     ON A.CODIGO_FILIAL = B.CODIGO_FILIAL           
      AND A.TERMINAL = B.TERMINAL          
      AND A.DATA_FISCAL = B.DATA_FISCAL          
      AND A.ID_EQUIPAMENTO = B.ID_EQUIPAMENTO          
      AND A.ECF = B.ECF          
      AND A.CF_INICIAL = B.CF_INICIAL          
      AND A.SERIE_NF = B.SERIE_NF           
    INNER JOIN @FILIAIS C ON B.FILIAL = C.FILIAL          
    WHERE ID_IMPOSTO = 1          
       AND  A.DATA_FISCAL BETWEEN @DATA_INICIAL AND @DATA_FINAL          
       AND  C.COD_MATRIZ_FISCAL = @CODIGO_MATRIZ_FISCAL           
       AND  A.PER_TARIFA <> 0          
    UNION          
    SELECT B.CODIGO_FILIAL, B.TERMINAL, B.DATA_FISCAL, B.ID_EQUIPAMENTO, B.ECF, B.CF_INICIAL, B.SERIE_NF,          
     -1 AS TARIFA, B.TOTAL_SUBSTITUICAO AS VALOR          
    FROM LOJA_CONTROLE_FISCAL B      (NOLOCK)    
    INNER JOIN @FILIAIS C ON B.FILIAL = C.FILIAL          
    WHERE B.DATA_FISCAL BETWEEN @DATA_INICIAL AND @DATA_FINAL        
     AND  C.COD_MATRIZ_FISCAL = @CODIGO_MATRIZ_FISCAL           
    UNION          
    SELECT B.CODIGO_FILIAL, B.TERMINAL, B.DATA_FISCAL, B.ID_EQUIPAMENTO, B.ECF, B.CF_INICIAL, B.SERIE_NF,          
     0 AS TARIFA, B.TOTAL_ISENTO AS VALOR          
    FROM LOJA_CONTROLE_FISCAL B     (NOLOCK)     
    INNER JOIN @FILIAIS C ON B.FILIAL = C.FILIAL          
    WHERE B.DATA_FISCAL BETWEEN @DATA_INICIAL AND @DATA_FINAL          
     AND  C.COD_MATRIZ_FISCAL = @CODIGO_MATRIZ_FISCAL           
    UNION          
    SELECT B.CODIGO_FILIAL, B.TERMINAL, B.DATA_FISCAL, B.ID_EQUIPAMENTO, B.ECF, B.CF_INICIAL, B.SERIE_NF,          
     -2 AS TARIFA, TOTAL_NAO_TRIBUTAVEL AS VALOR          
    FROM LOJA_CONTROLE_FISCAL B   (NOLOCK)       
    INNER JOIN @FILIAIS C ON B.FILIAL = C.FILIAL          
    WHERE B.DATA_FISCAL BETWEEN @DATA_INICIAL AND @DATA_FINAL          
     AND  C.COD_MATRIZ_FISCAL = @CODIGO_MATRIZ_FISCAL           
    ) A          
   INNER JOIN   
    (          
    SELECT CODIGO_FILIAL, TERMINAL, DATA, ID_EQUIPAMENTO, ECF, COO_INICIAL, SERIE_NF,        -- #43#  
     ALIQUOTA AS PER_TARIFA, SUM(VALOR_CONTABIL) AS VALOR          
    FROM @DETALHE_ECF          
    WHERE DATA_VENDA BETWEEN @DATA_INICIAL AND @DATA_FINAL           
    GROUP BY CODIGO_FILIAL, TERMINAL, DATA, ID_EQUIPAMENTO, ECF, COO_INICIAL, SERIE_NF, ALIQUOTA -- #43#  
    ) B          
    ON A.CODIGO_FILIAL = B.CODIGO_FILIAL          
     AND A.TERMINAL = B.TERMINAL           
     AND A.DATA_FISCAL = B.DATA -- #43#           
     AND A.ID_EQUIPAMENTO = B.ID_EQUIPAMENTO           
     AND A.ECF = B.ECF          
     AND A.CF_INICIAL = B.COO_INICIAL           
     AND A.SERIE_NF = B.SERIE_NF           
     AND A.PER_TARIFA = B.PER_TARIFA           
   WHERE A.VALOR > B.VALOR     
   ORDER BY ABS(A.VALOR-B.VALOR) DESC -- #26# - #75#       
           
   IF @ULT_ALIQUOTA = @ALIQUOTA      -- #26#  
    SET @CONT_TENTATIVAS = @CONT_TENTATIVAS + 1 -- #26#  
   ELSE            -- #26#  
    SET @CONT_TENTATIVAS = 0      -- #26#  
  END           
  
  
 END -- #39#  
  
--------------------------------------------------------------------  
--  Ajustes anteriormente realizados no Mapa Resumo Fiscal   --  
--------------------------------------------------------------------  
  
--*(¯`·.¸¸.·´¯`·.¸¸.->  --*(¯`·.¸¸.·´¯`·.¸¸.-> #24#  - PROCESSO NOVO DE CAPTURA DOS DADOS VIA MFD --*(¯`·.¸¸.·´¯`·.¸¸.->  --*(¯`·.¸¸.·´¯`·.¸¸.->        
 end  
  
--------------------------------------------------------------------  
--     Método antigo não utilizava a MFD      --  
--------------------------------------------------------------------  
  
 DECLARE @REDUCAOZ_XML XML,   
   @REDUCAOZ_XML_REPLACE VARCHAR(MAX),   
   @CRZ_MAXOLD CHAR(6),  
   @FILIAL VARCHAR(25), --#9#  
   @Signature VARCHAR(MAX),  
   @ID_BLOCOX INT,   
   @NUMERO_FABRICACAO VARCHAR(20),   
   @TIPO_ECF VARCHAR(15),  
   @MARCA_ECF VARCHAR(20),  
   @MODELO_ECF VARCHAR(20),  
   @QTD_COO AS TINYINT,--#5#  
   @VERSAO_ECF VARCHAR(20),  
   @CAIXA VARCHAR(3),  
   @VAZIO VARCHAR(1),  
   @XML_GERADO INT,  
   @ENCODING VARCHAR(40),--#2#  
   @NUMERO_CREDENCIAMENTO_ECF VARCHAR(20),--#3#  
   @INTSEQBCGX INT,--#4#   
   @INTSEQBCX INT,--#4#  
   @ERRORMESSAGE NVARCHAR(2048),--#4#   
   @ERRORSEVERITY SMALLINT,--#4#  
   @ERRORSTATE SMALLINT--#4#  
  
   DECLARE @CODIGO_FILIAL_DR VARCHAR(6), @DATA_VENDA_DR DATETIME, @TICKET_DR VARCHAR(8), @SOMA_RATEIO NUMERIC(14,2),--#5#  
     @BC_RATEIO_DESCONTO NUMERIC(14,2), @ITEM_DR CHAR(4), @RATEIO_DESCONTO_VENDA NUMERIC(14, 2), @VALOR_AJUSTE NUMERIC(14,2),--#5#  
     @TOTALIZADOR_PARCIAL VARCHAR(7), @TOTALIZADOR_PARCIAL_OLD VARCHAR(7), @DIFERENCA_ACUMULADOR NUMERIC (14,2),--#5#  
     @VALOR_ACUMULADO NUMERIC(14,2), @TOTALIDOR_ALIQUOTA_MAIOR VARCHAR(7),--#5#  
     @COO AS VARCHAR(9), @COD_PRODUTO_CUPOM_SUBTRAIR VARCHAR(25), @ITEM_SUBTRAIR INT, @VALOR_LIQUIDO_ITEM_SUBTRAIR NUMERIC(14,2),--#5#  
     @COD_PRODUTO_CUPOM_ADICIONAR VARCHAR(25), @ITEM_ADICIONAR INT, @VALOR_LIQUIDO_ITEM_ADICIONAR NUMERIC(14,2),--#5#  
     @ALQUOTA_DIF_MAIOR NUMERIC(14,2), @ALIQUOTA_DIF_MENOR NUMERIC(14,2)--#5#  
  
   DECLARE @CUPONS_CANDIDATOS TABLE(COO VARCHAR(9), TOTALIZADOR_PARCIAL VARCHAR(7))--#5#  

   CREATE TABLE #PRODUTOS_ECF  (   
         CODIGO_FILIAL  CHAR(6),  
         TERMINAL   CHAR(3),  
         SERIE_ECF   VARCHAR(20),  
         CODIGO_BARRA  VARCHAR(25),     
         PRODUTO    CHAR (12) COLLATE DATABASE_DEFAULT ,	    --> Verificar impacto
         COR_PRODUTO   CHAR (10) COLLATE DATABASE_DEFAULT,		--> Verificar impacto
         GRADE    VARCHAR (8)  COLLATE DATABASE_DEFAULT,  
         TAMANHO    INT,  
         TIPO_COD_BAR  TINYINT,  
         COD_PRODUTO_CUPOM VARCHAR (25) COLLATE DATABASE_DEFAULT,            
         DESCRICAO   VARCHAR (256) COLLATE DATABASE_DEFAULT, -- #17#  
         QUANTIDADE   INT,   
         UNIDADE    VARCHAR (6)  COLLATE DATABASE_DEFAULT,  
         CODIGO_CEST   CHAR(7),  
         CODIGO_NCM   CHAR(10),  
         VALOR_DESCONTO  NUMERIC(14,2),  
         VALOR_ACRESCIMO  NUMERIC(14,2),  
         VALOR_CANCELAMENTO NUMERIC(14,2),  
         VALOR_TOTAL_LIQUIDO NUMERIC(14,2),  
         TOTALIZADOR   VARCHAR(7),  
         COO     VARCHAR(9),            
         DATA_VENDA     DATETIME,      
         TICKET      CHAR(8),  
         FATOR_DESCONTO_VENDA NUMERIC(8, 5),        
         RATEIO_DESCONTO_VENDA  NUMERIC(14, 2),                 
         BC_RATEIO_DESCONTO NUMERIC(14,2),  
         ITEM      INT,  
         ACRESCIMO_SUBTOTAL   NUMERIC(14, 2),    
         DESCONTO_SUBTOTAL   NUMERIC(14, 2),  
         VALOR_TOTAL_VENDA NUMERIC(14,2),  
         VALOR_TOTAL_VENDA_ITECUPCANCVAL NUMERIC(14,2),  
         VALOR_LIQUIDO_ITECUPCANCVAL NUMERIC(14,2),  
         VALOR_LIQUIDO_ITEM NUMERIC(14,2),  
         DECIMAIS_VALOR_UNIT SMALLINT NOT NULL,  
         AJUSTE BIT NOT NULL,  
         UTILIZADO BIT NOT NULL  
      )--#5#  
      
   DECLARE @ERD TABLE( VALOR_ACUMULADO NUMERIC(14,2),   
        TOTALIZADOR_PARCIAL VARCHAR(7)  
        )--#5#  
  
   DECLARE @DIFERENCA_ALIQUOTA_MENOR TABLE ( TOTALIZADOR_PARCIAL VARCHAR (7),  
              DIFERENCA_ACUMULADOR NUMERIC (14,2)  
              )--#5#  
  
   DECLARE @DIFERENCA_ALIQUOTA_MAIOR TABLE ( TOTALIZADOR_PARCIAL VARCHAR (7),  
              DIFERENCA_ACUMULADOR NUMERIC (14,2)  
              )--#5#  
  
   DECLARE @TOTAL_ALIQUOTA TABLE( TOTALIZADOR_PARCIAL VARCHAR(7),  
           VALOR_ACUMULADO NUMERIC(14,2)  
           )--#5#  
  
   -- #10# Início  
   DECLARE @CONFERE TABLE ( TOTALIZADOR_PARCIAL VARCHAR(7),  
          TOTAL_BRUTO NUMERIC(14,2),  
          VALOR_ACUMULADO NUMERIC(14,2),  
          DESCONTO NUMERIC(14,2),  
          CANCELAMENTO NUMERIC(14,2),  
          TOTAL_LIQUIDO NUMERIC(14,2))  
  
   DECLARE @TOTALIZADORES_ERRO VARCHAR(1024), @RETORNO_ERRO VARCHAR(1024)  
   SET @TOTALIZADORES_ERRO = ''  
   SET @RETORNO_ERRO = ''  
   -- #10# Fim  
  
 SET @Signature = ''  
 SET @VAZIO = ''  
 SET @ENCODING = '<' + CHAR(63) + 'xml version=' + CHAR(34) + '1.0' + CHAR(34) + ' encoding=' + CHAR(34) + 'utf-8' + CHAR(34)  + CHAR(63) + '>' --#2#  
   
 SELECT @FILIAL = FILIAL FROM LOJAS_VAREJO (NOLOCK) WHERE CODIGO_FILIAL = @CODIGO_FILIAL--#5#  
 SET @NUMERO_FABRICACAO = @SERIALNUMBER--#5#  
  
 BEGIN  
  
  --EXEC DBO.LX_LJ_BLOCOX_MOVIMENTO_ECF @CODIGO_FILIAL, @SERIALNUMBER, @CRO, @CRZ, @DATA_MES -- Ajusta dados de erros de gravação  
  
  -- #7# Início  
  DECLARE @ID INT  
  
  SET @ID = OBJECT_ID('tempdb.dbo.#LJ_ECF_ITEM')  
  IF (@ID IS NOT NULL)  
   DROP TABLE #LJ_ECF_ITEM  
  
  SET @ID = OBJECT_ID('tempdb.dbo.#LJ_DOCUMENTO_ECF')  
  IF (@ID IS NOT NULL)  
   DROP TABLE #LJ_DOCUMENTO_ECF  
  
  SELECT *  
  INTO #LJ_DOCUMENTO_ECF  
  FROM LJ_DOCUMENTO_ECF  (NOLOCK)
  WHERE DENOMINACAO_DOCUMENTO = 'CF'  
  AND DATA_FISCAL = @DATA_MES  
  AND CODIGO_FILIAL = @CODIGO_FILIAL  
  AND ID_EQUIPAMENTO = @SERIALNUMBER   
    
  -- #22# Início  
  DECLARE @CF_INICIAL INT, @CF_FINAL INT, @USUARIO INT  
  SELECT @CF_INICIAL = MIN(CF_INICIAL), @CF_FINAL = MAX(CF_FINAL), @USUARIO = MAX(NUMERO_USUARIO)  
  FROM LOJA_CONTROLE_FISCAL   (NOLOCK)
  WHERE ID_EQUIPAMENTO = @SERIALNUMBER AND DATA_FISCAL = @DATA_MES   
    
  IF (ISNULL(@USUARIO, 0) = 0)  
   SELECT @USUARIO = MAX(USUARIO_ECF)  
   FROM LJ_ECF_ITEM  (NOLOCK)
   WHERE SERIE_ECF = @SERIALNUMBER AND COO BETWEEN @CF_INICIAL AND @CF_FINAL  
  
  INSERT INTO #LJ_DOCUMENTO_ECF (CODIGO_FILIAL, ID_DOCUMENTO_ECF, ID_EQUIPAMENTO, DENOMINACAO_DOCUMENTO, COO, CCF, DATA_HORA_EMISSAO, CANCELADO,  
          DATA_PARA_TRANSFERENCIA, VALOR_SUBTOTAL, DESCONTO_SUBTOTAL, TIPO_DESCONTO_SUBTOTAL,  
          VALOR_TOTAL_LIQ, CANC_ACRESC_SUBTOTAL, MF_ADICIONAL, NUMERO_USUARIO, MARCA, MODELO,   
          TIPO_ECF, VALOR_TROCO_TEF, DATA_FISCAL, LX_STATUS_DOCUMENTO_ECF)  
  SELECT PG.CODIGO_FILIAL, -1 * PG.NUMERO_CCF AS ID_DOCUMENTO_ECF, PG.ID_EQUIPAMENTO, 'CF' AS DENOMINACAO_DOCUMENTO, CAST(PG.NUMERO_CUPOM_FISCAL AS INT) AS COO,  
    PG.NUMERO_CCF AS CCF, LV.DATA_DIGITACAO AS DATA_HORA_EMISSAO, PG.CANCELADO_FISCAL AS CANCELADO, PG.DATA_PARA_TRANSFERENCIA,  
    CASE WHEN PG.CANCELADO_FISCAL = 0 THEN LV.VALOR_VENDA_BRUTA ELSE 0 END AS VALOR_SUBTOTAL,   
    CASE WHEN PG.CANCELADO_FISCAL = 0 THEN LV.DESCONTO + PG.DESCONTO_PGTO ELSE 0 END AS DESCONTO_SUBTOTAL,  
    'V' AS TIPO_DESCONTO_SUBTOTAL,   
    CASE WHEN PG.CANCELADO_FISCAL = 0 THEN PG.TOTAL_VENDA + LV.VALOR_TROCA ELSE 0 END AS VALOR_TOTAL_LIQ,   
    0 AS CANC_ACRESC_SUBTOTAL,   
    ' ' AS MF_ADICIONAL, @USUARIO AS NUMERO_USUARIO, '' AS MARCA, '' AS MODELO, '' AS TIPO_ECF, 0 AS VALOR_TROCO_TEF,  
    @DATA_MES AS DATA_FISCAL, 1 AS LX_STATUS_DOCUMENTO_ECF  
  FROM LOJA_VENDA_PGTO PG  (NOLOCK)
  INNER JOIN LOJA_VENDA LV  
  ON PG.CODIGO_FILIAL = LV.CODIGO_FILIAL_PGTO AND PG.TERMINAL = LV.TERMINAL_PGTO AND PG.LANCAMENTO_CAIXA = LV.LANCAMENTO_CAIXA   
  LEFT JOIN LJ_DOCUMENTO_ECF LDE  
  ON PG.CODIGO_FILIAL = LDE.CODIGO_FILIAL AND PG.ID_EQUIPAMENTO = LDE.ID_EQUIPAMENTO AND PG.NUMERO_CUPOM_FISCAL = LDE.COO AND PG.NUMERO_CCF = LDE.CCF  
  WHERE PG.ID_EQUIPAMENTO = @SERIALNUMBER AND PG.NUMERO_CUPOM_FISCAL BETWEEN @CF_INICIAL AND @CF_FINAL   
  AND LDE.DENOMINACAO_DOCUMENTO = 'CF'  
  AND LDE.CODIGO_FILIAL IS NULL  
  
  -- #22# Fim  
  SELECT  A.SERIE_ECF, A.MF_ADICIONAL, A.USUARIO_ECF, A.COO, A.ITEM, A.MODELO_ECF, A.CCF_, A.COD_PRODUTO_CUPOM,  -- #22#  
    A.DESC_PROD_CUPOM, A.QTDE, A.UNIDADE, A.VALOR_UNIT, A.DESCONTO_ITEM, A.ACRES_ITEM, A.VALOR_TOTAL_LIQ_ITEM, -- #22#  
    A.TOTALIZADOR, A.ITEM_CANCELADO, A.QTDE_CANC, A.VALOR_CANC, A.CANC_ACRESC_ITEM, A.IAT, A.DECIMAIS_QTDE,  -- #22#  
    A.DECIMAIS_VALOR_UNIT, A.LX_STATUS_REGISTRO, A.DATA_PARA_TRANSFERENCIA, A.IMPORTACAO_CONCLUIDA,    -- #22#  
    A.PRODUCAO_PROPRIA, A.CODIGO_FILIAL,                  -- #22#  
    CASE WHEN A.ID_DOCUMENTO_ECF = 0 THEN -1 * A.CCF_ ELSE A.ID_DOCUMENTO_ECF END ID_DOCUMENTO_ECF,    -- #22#  
    A.LX_HASH                         -- #22#  
  INTO #LJ_ECF_ITEM  
  FROM LJ_ECF_ITEM A  (NOLOCK)
  INNER JOIN #LJ_DOCUMENTO_ECF B  
  ON A.CODIGO_FILIAL = B.CODIGO_FILIAL AND (A.ID_DOCUMENTO_ECF = B.ID_DOCUMENTO_ECF OR      -- #22#  
   (A.ID_DOCUMENTO_ECF = 0 AND A.SERIE_ECF = B.ID_EQUIPAMENTO AND A.MF_ADICIONAL = B.MF_ADICIONAL AND  -- #22#  
    A.USUARIO_ECF = B.NUMERO_USUARIO AND A.COO = B.COO AND A.CCF_ = B.CCF))        -- #22#  
  WHERE B.DENOMINACAO_DOCUMENTO = 'CF'  
   AND B.DATA_FISCAL = @DATA_MES  
   AND A.CODIGO_FILIAL = @CODIGO_FILIAL   
   AND A.SERIE_ECF = @SERIALNUMBER  
  
  IF EXISTS(SELECT COO, CCF_, MIN(ITEM) FROM #LJ_ECF_ITEM GROUP BY COO, CCF_ HAVING MIN(ITEM) <> 1)  
  BEGIN  
   UPDATE #LJ_ECF_ITEM   
    SET ITEM = A.ITEM - (B.PRIMEIRO_ITEM - 1)  
   FROM #LJ_ECF_ITEM A  
   INNER JOIN (  
    SELECT COO, CCF_, MIN(ITEM) AS PRIMEIRO_ITEM  
    FROM #LJ_ECF_ITEM GROUP BY COO, CCF_ ) B  
   ON A.CCF_ = B.CCF_ AND A.COO = B.COO   
  END  
  
  UPDATE #LJ_DOCUMENTO_ECF   
  SET CANCELADO = 1, VALOR_SUBTOTAL = B.VALOR_CANCELADO, VALOR_TOTAL_LIQ = B.VALOR_CANCELADO  
  FROM #LJ_DOCUMENTO_ECF A  
  INNER JOIN LOJA_VENDA_PGTO B  
  ON A.CODIGO_FILIAL = B.CODIGO_FILIAL AND A.ID_EQUIPAMENTO = B.ID_EQUIPAMENTO AND A.COO = B.NUMERO_CUPOM_FISCAL AND A.CCF = B.NUMERO_CCF   
  WHERE A.CANCELADO = 0 AND A.VALOR_TOTAL_LIQ = 0 AND B.CANCELADO_FISCAL = 1  
  
  -- #7# Fim  
  
  -- #10# Início  
  UPDATE #LJ_ECF_ITEM   
   SET ITEM_CANCELADO = CASE WHEN VP.QTDE = 0 AND VP.QTDE_CANCELADA > 0 AND VP.ITEM_EXCLUIDO = 1 AND VP.VALOR_TOTAL = 0 THEN 'S' ELSE 'N' END,  
    QTDE_CANC = CASE WHEN VP.QTDE = 0 AND VP.QTDE_CANCELADA > 0 AND VP.ITEM_EXCLUIDO = 1 AND VP.VALOR_TOTAL = 0 THEN VP.QTDE_CANCELADA ELSE 0 END,  
    VALOR_TOTAL_LIQ_ITEM = CASE WHEN VP.QTDE = 0 AND VP.QTDE_CANCELADA > 0 AND VP.ITEM_EXCLUIDO = 1 AND VP.VALOR_TOTAL = 0 THEN    
           0.00  
          ELSE I.VALOR_TOTAL_LIQ_ITEM  
          END,  
    VALOR_CANC = CASE WHEN VP.QTDE = 0 AND VP.QTDE_CANCELADA > 0 AND VP.ITEM_EXCLUIDO = 1 AND VP.VALOR_TOTAL = 0 THEN    
         I.VALOR_TOTAL_LIQ_ITEM -- #11#  
        ELSE 0.00   
        END  
  FROM #LJ_ECF_ITEM I  
  INNER JOIN LOJA_VENDA_PGTO PG  
  ON I.CODIGO_FILIAL = PG.CODIGO_FILIAL AND I.SERIE_ECF = PG.ID_EQUIPAMENTO AND I.CCF_ = PG.NUMERO_CCF   
  INNER JOIN LOJA_VENDA V  
  ON PG.CODIGO_FILIAL = V.CODIGO_FILIAL_PGTO AND PG.TERMINAL = V.TERMINAL_PGTO AND PG.LANCAMENTO_CAIXA = V.LANCAMENTO_CAIXA   
  INNER JOIN LOJA_VENDA_PRODUTO VP  
  ON V.CODIGO_FILIAL = VP.CODIGO_FILIAL AND V.DATA_VENDA = VP.DATA_VENDA AND V.TICKET = VP.TICKET AND I.ITEM = CAST(VP.ITEM AS INT)  
    -- inclusao da data 13/11 
  AND V.DATA_VENDA = @DATA_MES 
  -- #10# Fim  
  
  -- #13# Início  
  -- Elimina duplicidade da LOJA_CONTROLE_FISCAL  
  SET @ID = OBJECT_ID('tempdb.dbo.#LOJA_CONTROLE_FISCAL')  
  IF (@ID IS NOT NULL)  
   DROP TABLE #LOJA_CONTROLE_FISCAL  
  
  SELECT CODIGO_FILIAL, TERMINAL, DATA_FISCAL, ID_EQUIPAMENTO, CF_INICIAL, SERIE_NF, MAX(ECF) AS ECF,  
  MAX(TOTAL_BRUTO) AS TOTAL_BRUTO, MAX(DATA_HORA_REDUCAO_Z) AS DATA_HORA_REDUCAO_Z,  
  MAX(GT_FINAL) AS GT_FINAL,  
  MAX(TOTAL_CANCELADO) AS TOTAL_CANCELADO, MAX(TOTAL_DESCONTO) AS TOTAL_DESCONTO,   
  MAX(TOTAL_ISENTO)AS TOTAL_ISENTO, MAX(TOTAL_NAO_TRIBUTAVEL) AS TOTAL_NAO_TRIBUTAVEL,  
  MAX(TOTAL_ACRESCIMO) AS TOTAL_ACRESCIMO, MAX(TOTAL_SUBSTITUICAO) AS TOTAL_SUBSTITUICAO,  
  MAX(CF_FINAL) AS CF_FINAL, MAX(QTDE_REDUCOES_Z) AS QTDE_REDUCOES_Z, MAX(CONTADOR_REINICIO_OPERACAO) AS CONTADOR_REINICIO_OPERACAO  
  INTO #LOJA_CONTROLE_FISCAL  
  FROM LOJA_CONTROLE_FISCAL  (NOLOCK)
  WHERE ID_EQUIPAMENTO = @SERIALNUMBER AND DATA_FISCAL = @DATA_MES AND CODIGO_FILIAL = @CODIGO_FILIAL    
  GROUP BY CODIGO_FILIAL, TERMINAL, DATA_FISCAL, ID_EQUIPAMENTO, CF_INICIAL, SERIE_NF  
  
  -- Elimina duplicidade da LJ_DOCUMENTO_ECF para DENOMINACAO_DOCUMENTO = 'RZ'  
  SET @ID = OBJECT_ID('tempdb.dbo.#LJ_DOCUMENTO_ECF_RZ')  
  IF (@ID IS NOT NULL)  
   DROP TABLE #LJ_DOCUMENTO_ECF_RZ  
  
  SELECT LDE.CODIGO_FILIAL, LDE.ID_DOCUMENTO_ECF, LDE.ID_EQUIPAMENTO, LDE.COO, LDE.CRZ, B.DATA_FISCAL, LDE.DENOMINACAO_DOCUMENTO, LDE.DATA_HORA_EMISSAO -- #18#  
  INTO #LJ_DOCUMENTO_ECF_RZ  
  FROM (  
   SELECT CODIGO_FILIAL, ID_EQUIPAMENTO, COO, CRZ, MAX(ISNULL(DATA_FISCAL, '20000101')) AS DATA_FISCAL,   
     MAX(CASE WHEN D_ID_DOCUMENTO_ECF IS NULL THEN 'A' ELSE 'Z' END + CAST(ID_DOCUMENTO_ECF AS VARCHAR)) AS X_D_ID_DOCUMENTO_ECF  
   FROM (  
    SELECT LDE.CODIGO_FILIAL, LDE.ID_DOCUMENTO_ECF, LDE.ID_EQUIPAMENTO, LDE.COO, LDE.CRZ,   
      ISNULL(LDE.DATA_FISCAL, LCF.DATA_FISCAL) AS DATA_FISCAL, RZD.ID_DOCUMENTO_ECF AS D_ID_DOCUMENTO_ECF  
    FROM #LOJA_CONTROLE_FISCAL LCF  
    INNER JOIN LJ_DOCUMENTO_ECF LDE  
    ON LCF.CODIGO_FILIAL = LDE.CODIGO_FILIAL AND LCF.ID_EQUIPAMENTO = LDE.ID_EQUIPAMENTO   
    AND LCF.CF_FINAL = LDE.COO AND LCF.QTDE_REDUCOES_Z = LDE.CRZ AND LDE.DENOMINACAO_DOCUMENTO = 'RZ'  
    LEFT JOIN (  
     SELECT DISTINCT CODIGO_FILIAL, ID_DOCUMENTO_ECF   
     FROM LJ_ECF_RZ_DETALHE  (NOLOCK) 
     WHERE CODIGO_FILIAL = @CODIGO_FILIAL AND SERIE_ECF = @SERIALNUMBER AND CRZ = @CRZ) RZD  
    ON LDE.CODIGO_FILIAL = RZD.CODIGO_FILIAL AND LDE.ID_DOCUMENTO_ECF = RZD.ID_DOCUMENTO_ECF ) A  
   GROUP BY CODIGO_FILIAL, ID_EQUIPAMENTO, COO, CRZ) B  
  INNER JOIN LJ_DOCUMENTO_ECF LDE  
  ON B.CODIGO_FILIAL = LDE.CODIGO_FILIAL AND CAST(RIGHT(B.X_D_ID_DOCUMENTO_ECF, LEN(B.X_D_ID_DOCUMENTO_ECF) - 1) AS int) = ID_DOCUMENTO_ECF       
  
  -- #13# Fim  
  
  -- #18# Início  
  IF (EXISTS(SELECT 1 FROM #LOJA_CONTROLE_FISCAL WHERE DATA_HORA_REDUCAO_Z IS NULL))  
  BEGIN -- Tenta obter informação da Redução Z em LJ_DOCUMENTO_ECF.  
   UPDATE #LOJA_CONTROLE_FISCAL  
    SET DATA_HORA_REDUCAO_Z = LDE.DATA_HORA_EMISSAO  
   FROM #LOJA_CONTROLE_FISCAL LCF  
   INNER JOIN #LJ_DOCUMENTO_ECF_RZ LDE  
   ON LCF.CODIGO_FILIAL = LDE.CODIGO_FILIAL AND LCF.ID_EQUIPAMENTO = LDE.ID_EQUIPAMENTO  
   AND LCF.CF_FINAL = LDE.COO AND LCF.QTDE_REDUCOES_Z = LDE.CRZ  
  END  
  
  IF (EXISTS(SELECT 1 FROM #LOJA_CONTROLE_FISCAL WHERE DATA_HORA_REDUCAO_Z IS NULL))  
  BEGIN -- Tentar estimar a informação a partir de outros documentos em LJ_DOCUMENTO_ECF.  
   UPDATE #LOJA_CONTROLE_FISCAL  
    SET DATA_HORA_REDUCAO_Z = DATEADD(minute, DE.CF_FINAL - DE.COO, DE.DATA_HORA_EMISSAO)  
   FROM #LOJA_CONTROLE_FISCAL LCF  
   INNER JOIN (  
    SELECT TOP 1 LDE.COO, LDE.DATA_HORA_EMISSAO, LCF.CF_FINAL  
    FROM #LOJA_CONTROLE_FISCAL LCF  
    INNER JOIN LJ_DOCUMENTO_ECF LDE  
    ON LCF.CODIGO_FILIAL = LDE.CODIGO_FILIAL AND LCF.ID_EQUIPAMENTO = LDE.ID_EQUIPAMENTO  
    AND LDE.COO BETWEEN LCF.CF_INICIAL AND LCF.CF_FINAL  
    ORDER BY LDE.COO DESC) DE  
   ON LCF.CF_FINAL = DE.CF_FINAL  
  END  
  
  IF (EXISTS(SELECT 1 FROM #LOJA_CONTROLE_FISCAL WHERE DATA_HORA_REDUCAO_Z IS NULL))  
  BEGIN -- Se não conseguiu obter, pega o último minuto da data fiscal.  
   UPDATE #LOJA_CONTROLE_FISCAL  
    SET DATA_HORA_REDUCAO_Z = DATEADD(minute, -1, DATEADD(day, 1, DATA_FISCAL))  
  END  
  -- #18# Fim  
  
  -- #21# Início  
  -- Inclui na LJ_ECF_ITEM itens que faltam, a partir de LOJA_VENDA_PRODUTO.  
  INSERT INTO #LJ_ECF_ITEM ( SERIE_ECF, MF_ADICIONAL, USUARIO_ECF, COO, ITEM, MODELO_ECF, CCF_, COD_PRODUTO_CUPOM, DESC_PROD_CUPOM,   
       QTDE, UNIDADE, VALOR_UNIT, DESCONTO_ITEM, ACRES_ITEM, VALOR_TOTAL_LIQ_ITEM, TOTALIZADOR, ITEM_CANCELADO,  
       QTDE_CANC, VALOR_CANC, CANC_ACRESC_ITEM, IAT, DECIMAIS_QTDE, DECIMAIS_VALOR_UNIT, CODIGO_FILIAL,   
       ID_DOCUMENTO_ECF, IMPORTACAO_CONCLUIDA, PRODUCAO_PROPRIA)  
  SELECT LDE.ID_EQUIPAMENTO AS SERIE_ECF,  
    LDE.MF_ADICIONAL AS MF_ADICIONAL,  
    LDE.NUMERO_USUARIO AS USUARIO_ECF,  
    LDE.COO AS COO,  
    CAST(LVP.ITEM AS INT) AS ITEM,  
    LDE.MODELO AS MODELO_ECF,  
    LDE.CCF AS CCF_,  
    LVP.CODIGO_BARRA AS COD_PRODUTO_CUPOM,  
    '' AS DESC_PROD_CUPOM,  
    LVP.QTDE + LVP.QTDE_CANCELADA AS QTDE,  
    '' AS UNIDADE,  
    LVP.PRECO_LIQUIDO + LVP.DESCONTO_ITEM AS VALOR_UNIT,  
    (LVP.QTDE + LVP.QTDE_CANCELADA) * CASE WHEN LVP.DESCONTO_ITEM > 0 THEN LVP.DESCONTO_ITEM ELSE 0 END AS DESCONTO_ITEM,  
    (LVP.QTDE + LVP.QTDE_CANCELADA) * CASE WHEN LVP.DESCONTO_ITEM < 0 THEN LVP.DESCONTO_ITEM * -1 ELSE 0 END AS ACRES_ITEM,  
    (LVP.QTDE + LVP.QTDE_CANCELADA) * LVP.PRECO_LIQUIDO AS VALOR_TOTAL_LIQ_ITEM,  
    LCFT.LEGENDA_TARIFA AS TOTALIZADOR,  
    CASE WHEN LVP.QTDE_CANCELADA > 0 THEN 'S' ELSE 'N' END AS ITEM_CANCELADO,  
    LVP.QTDE_CANCELADA AS QTDE_CANC,  
    CASE WHEN LVP.QTDE_CANCELADA > 0 THEN (LVP.QTDE + LVP.QTDE_CANCELADA) * LVP.PRECO_LIQUIDO ELSE 0 END AS VALOR_CANC,  
    0 AS CANC_ACRESC_ITEM,  
    'A' AS IAT,  
    0 AS DECIMAIS_QTDE,  
    2 AS DECIMAIS_VALOR_UNIT,  
    LVP.CODIGO_FILIAL AS CODIGO_FILIAL,  
    LDE.ID_DOCUMENTO_ECF AS ID_DOCUMENTO_ECF,  
    0 AS IMPORTACAO_CONCLUIDA,  
    0 AS PRODUCAO_PROPRIA  
  FROM #LJ_DOCUMENTO_ECF LDE  
  INNER JOIN LOJA_VENDA_PGTO PG  
  ON LDE.CODIGO_FILIAL = PG.CODIGO_FILIAL AND LDE.COO = PG.NUMERO_CUPOM_FISCAL AND LDE.CCF = PG.NUMERO_CCF AND LDE.ID_EQUIPAMENTO = PG.ID_EQUIPAMENTO --#25#  
  INNER JOIN LOJA_VENDA LV  
  ON PG.CODIGO_FILIAL = LV.CODIGO_FILIAL_PGTO AND PG.TERMINAL = LV.TERMINAL_PGTO AND PG.LANCAMENTO_CAIXA = LV.LANCAMENTO_CAIXA  
  INNER JOIN LOJA_VENDA_PRODUTO LVP  
  ON LV.CODIGO_FILIAL = LVP.CODIGO_FILIAL AND LV.DATA_VENDA = LVP.DATA_VENDA AND LV.TICKET = LVP.TICKET   
  INNER JOIN LOJA_CONTROLE_FISCAL LCF  
  ON LDE.CODIGO_FILIAL = LCF.CODIGO_FILIAL AND LDE.ID_EQUIPAMENTO = LCF.ID_EQUIPAMENTO AND LDE.DATA_FISCAL = LCF.DATA_FISCAL AND LDE.COO BETWEEN LCF.CF_INICIAL AND LCF.CF_FINAL  
  INNER JOIN LOJA_CONTROLE_FISCAL_TARIFAS LCFT  
  ON LCF.CODIGO_FILIAL = LCFT.CODIGO_FILIAL AND LCF.TERMINAL = LCFT.TERMINAL AND LCF.ECF = LCFT.ECF AND LCF.ID_EQUIPAMENTO = LCFT.ID_EQUIPAMENTO AND LCF.DATA_FISCAL = LCFT.DATA_FISCAL AND LCF.CF_INICIAL = LCFT.CF_INICIAL AND LCF.SERIE_NF = LCFT.SERIE_NF 
AND LCFT.ID_IMPOSTO = 1 AND LVP.ALIQUOTA = LCFT.PER_TARIFA   
  LEFT JOIN #LJ_ECF_ITEM LEI  
  ON LDE.CODIGO_FILIAL = LEI.CODIGO_FILIAL AND LDE.ID_DOCUMENTO_ECF = LEI.ID_DOCUMENTO_ECF AND LVP.ITEM = LEI.ITEM   
  WHERE LEI.CODIGO_FILIAL IS NULL  
  
  -- Preenche a descrição e a unidade dos itens que não os tem, a partir de outros itens do movimento.  
  UPDATE #LJ_ECF_ITEM  
   SET DESC_PROD_CUPOM = INFO.DESC_PROD_CUPOM, UNIDADE = INFO.UNIDADE  
  FROM #LJ_ECF_ITEM LEI  
  INNER JOIN (  
   SELECT COD_PRODUTO_CUPOM, MAX(DESC_PROD_CUPOM) AS DESC_PROD_CUPOM, MAX(UNIDADE) AS UNIDADE  
   FROM #LJ_ECF_ITEM  
   WHERE LEN(DESC_PROD_CUPOM) > 0 AND LEN(UNIDADE) > 0  
   GROUP BY COD_PRODUTO_CUPOM) INFO  
  ON LEI.COD_PRODUTO_CUPOM = INFO.COD_PRODUTO_CUPOM   
  WHERE LEN(LEI.DESC_PROD_CUPOM) = 0 OR LEN(LEI.UNIDADE) = 0  
  
  -- Preenche a descrição e a unidade dos itens que não os tem, a partir da tabela PRODUTOS.  
  UPDATE #LJ_ECF_ITEM  
   SET DESC_PROD_CUPOM = P.DESC_PRODUTO , UNIDADE = P.UNIDADE  
  FROM #LJ_ECF_ITEM LEI  
  INNER JOIN PRODUTOS_BARRA PB  
  ON LEI.COD_PRODUTO_CUPOM = PB.CODIGO_BARRA  
  INNER JOIN PRODUTOS P  
  ON PB.PRODUTO = P.PRODUTO  
  WHERE LEN(LEI.DESC_PROD_CUPOM) = 0 OR LEN(LEI.UNIDADE) = 0  
  
  -- #21# Fim  
  
  -- #12# Início  
  DECLARE @ID_DOCUMENTO_ECF INT  
  DECLARE @TOTAL_CANCELADO NUMERIC(14,2), @TOTAL_DESCONTO NUMERIC(14,2), @TOTAL_ISENTO NUMERIC(14,2)  
  DECLARE @TOTAL_NAO_TRIBUTAVEL NUMERIC(14,2), @TOTAL_SUBSTITUICAO NUMERIC(14,2), @TOTAL_ACRESCIMO NUMERIC(14,2)  
  --DECLARE @CF_INICIAL INT -- #22#  
    
  SELECT @ID_DOCUMENTO_ECF = ISNULL(LDE.ID_DOCUMENTO_ECF, -1), -- #15#  
    @TOTAL_CANCELADO = LCF.TOTAL_CANCELADO, @TOTAL_DESCONTO = LCF.TOTAL_DESCONTO,  
    @TOTAL_ISENTO = LCF.TOTAL_ISENTO, @TOTAL_NAO_TRIBUTAVEL = LCF.TOTAL_NAO_TRIBUTAVEL,  
    @TOTAL_SUBSTITUICAO = LCF.TOTAL_SUBSTITUICAO, @TOTAL_ACRESCIMO = LCF.TOTAL_ACRESCIMO,  
    @CF_INICIAL = LCF.CF_INICIAL   
  FROM #LOJA_CONTROLE_FISCAL LCF -- #13#  
  LEFT JOIN #LJ_DOCUMENTO_ECF_RZ LDE -- #13# -- #15#  
  ON LCF.CODIGO_FILIAL = LDE.CODIGO_FILIAL AND LCF.ID_EQUIPAMENTO = LDE.ID_EQUIPAMENTO   
   AND LCF.CF_FINAL = LDE.COO AND LCF.QTDE_REDUCOES_Z = LDE.CRZ AND DENOMINACAO_DOCUMENTO = 'RZ'  
  WHERE LCF.ID_EQUIPAMENTO = @SERIALNUMBER AND LCF.DATA_FISCAL = @DATA_MES AND LCF.CODIGO_FILIAL = @CODIGO_FILIAL    
  
  SET @ID = OBJECT_ID('tempdb.dbo.#LJ_ECF_RZ_DETALHE')  
  IF (@ID IS NOT NULL)  
  BEGIN  
   DROP TABLE #LJ_ECF_RZ_DETALHE  
  END  
  
   SELECT RD.CODIGO_FILIAL, RD.SERIE_ECF, RD.CRZ, RD.TOTALIZADOR_PARCIAL, RD.VALOR_ACUMULADO -- #13#  
   INTO #LJ_ECF_RZ_DETALHE  
   FROM LJ_ECF_RZ_DETALHE RD  (NOLOCK)               -- #13#  
   INNER JOIN #LJ_DOCUMENTO_ECF_RZ RZ               -- #13#  
   ON RD.CODIGO_FILIAL = RZ.CODIGO_FILIAL AND RD.ID_DOCUMENTO_ECF = RZ.ID_DOCUMENTO_ECF   
   WHERE 1 = 0  
  

   IF @MPR_DADOS_MFD = 0 --#24#  
   BEGIN   
     INSERT INTO #LJ_ECF_RZ_DETALHE   
     SELECT RD.CODIGO_FILIAL, RD.SERIE_ECF, RD.CRZ, RD.TOTALIZADOR_PARCIAL, RD.VALOR_ACUMULADO -- #13#  
     --INTO #LJ_ECF_RZ_DETALHE  
     FROM LJ_ECF_RZ_DETALHE RD  (NOLOCK)               -- #13#  
     INNER JOIN #LJ_DOCUMENTO_ECF_RZ RZ               -- #13#  
     ON RD.CODIGO_FILIAL = RZ.CODIGO_FILIAL AND RD.ID_DOCUMENTO_ECF = RZ.ID_DOCUMENTO_ECF  -- #13#   
   --  WHERE RD.CODIGO_FILIAL = @CODIGO_FILIAL AND ID_DOCUMENTO_ECF = @ID_DOCUMENTO_ECF   -- #13#  
  
     IF (NOT EXISTS(SELECT TOP 1 1 FROM #LJ_ECF_RZ_DETALHE))  
     BEGIN  
      INSERT INTO #LJ_ECF_RZ_DETALHE   
      SELECT CODIGO_FILIAL, SERIE_ECF, @CRZ AS CRZ, TOTALIZADOR_PARCIAL, 0 AS VALOR_ACUMULADO  
      FROM (  
       SELECT CODIGO_FILIAL, SERIE_ECF, TOTALIZADOR_PARCIAL  
       FROM LJ_ECF_RZ_DETALHE   
       WHERE  
        SERIE_ECF = @SERIALNUMBER AND (  
        TOTALIZADOR_PARCIAL IN ('F1', 'I1', 'N1', 'Can-T', 'AT', 'DT') OR   
        (SUBSTRING(TOTALIZADOR_PARCIAL, 3, 1) = 'T' AND LEN(TOTALIZADOR_PARCIAL) = 7   
        AND ISNUMERIC(LEFT(TOTALIZADOR_PARCIAL, 2)) = 1 AND ISNUMERIC(RIGHT(TOTALIZADOR_PARCIAL, 4)) = 1))     
       GROUP BY CODIGO_FILIAL, SERIE_ECF, TOTALIZADOR_PARCIAL) T  
        
      UPDATE #LJ_ECF_RZ_DETALHE   
      SET VALOR_ACUMULADO = @TOTAL_NAO_TRIBUTAVEL   
      WHERE TOTALIZADOR_PARCIAL = 'N1'  
      
      UPDATE #LJ_ECF_RZ_DETALHE   
      SET VALOR_ACUMULADO = @TOTAL_CANCELADO   
      WHERE TOTALIZADOR_PARCIAL = 'Can-T'  
      
      UPDATE #LJ_ECF_RZ_DETALHE   
      SET VALOR_ACUMULADO = @TOTAL_ISENTO   
      WHERE TOTALIZADOR_PARCIAL = 'I1'  
      
      UPDATE #LJ_ECF_RZ_DETALHE   
      SET VALOR_ACUMULADO = @TOTAL_DESCONTO   
      WHERE TOTALIZADOR_PARCIAL = 'DT'  
      
      UPDATE #LJ_ECF_RZ_DETALHE   
      SET VALOR_ACUMULADO = @TOTAL_ACRESCIMO   
      WHERE TOTALIZADOR_PARCIAL = 'AT'  
      
      UPDATE #LJ_ECF_RZ_DETALHE   
      SET VALOR_ACUMULADO = @TOTAL_SUBSTITUICAO   
      WHERE TOTALIZADOR_PARCIAL = 'F1'  
      
      UPDATE #LJ_ECF_RZ_DETALHE  
       SET VALOR_ACUMULADO = LCFT.TOTAL_TARIFA   
      FROM #LJ_ECF_RZ_DETALHE ERD  
      INNER JOIN (  
       SELECT *  
       FROM LOJA_CONTROLE_FISCAL_TARIFAS   (NOLOCK)
       WHERE CODIGO_FILIAL = @CODIGO_FILIAL   
       AND ID_EQUIPAMENTO = @SERIALNUMBER   
       AND DATA_FISCAL = @DATA_MES   
       AND CF_INICIAL = @CF_INICIAL   
       AND ID_IMPOSTO = 1  
       AND TOTAL_TARIFA > 0) LCFT  
      ON ERD.CODIGO_FILIAL = LCFT.CODIGO_FILIAL AND ERD.SERIE_ECF = LCFT.ID_EQUIPAMENTO   
       AND ERD.TOTALIZADOR_PARCIAL = LCFT.LEGENDA_TARIFA   
     END  
   END  

    
   IF @MPR_DADOS_MFD = 1 --#24#  
   BEGIN  
    INSERT INTO #LJ_ECF_RZ_DETALHE   
    SELECT @CODIGO_FILIAL AS CODIGO_FILIAL, @SERIALNUMBER AS SERIE_ECF, CAST(@CRZ AS INT) AS CRZ, TOTALIZADOR_PARCIAL, VALOR_ACUMULADO -- #13#  
    FROM LJ_ECF_AC1704_E13 E13  (NOLOCK)
    WHERE E13.SERIE_ECF = @SERIALNUMBER AND E13.MF_ADICIONAL = @MF_ADICIONAL AND E13.USUARIO_ECF = @USUARIO_ECF AND CAST(E13.CRZ AS INT) = CAST(@CRZ AS INT) --#27#  

	--#28#
	INSERT INTO #LJ_ECF_RZ_DETALHE  
	 SELECT @CODIGO_FILIAL AS CODIGO_FILIAL, @SERIALNUMBER AS SERIE_ECF, CAST(@CRZ AS INT) AS CRZ, TOT.TOTALIZADOR, 0 AS VALOR_ACUMULADO
	 FROM (
		SELECT DISTINCT E15.TOTALIZADOR 
		FROM LJ_ECF_AC1704_E12 E12  (NOLOCK)
		INNER JOIN LJ_ECF_AC1704_E14 E14 (NOLOCK)
		ON E12.SERIE_ECF = E14.SERIE_ECF AND E12.MF_ADICIONAL = E14.MF_ADICIONAL AND E12.USUARIO_ECF = E14.USUARIO_ECF AND E14.COO BETWEEN E12.COO_INICIAL AND E12.COO 
		INNER JOIN LJ_ECF_AC1704_E15 E15 (NOLOCK)
		ON E14.SERIE_ECF = E15.SERIE_ECF AND E14.MF_ADICIONAL = E15.MF_ADICIONAL AND E14.USUARIO_ECF = E15.USUARIO_ECF AND E14.CCF_ = E15.CCF_ 
		WHERE E12.SERIE_ECF = @SERIALNUMBER 
		AND 	E12.MF_ADICIONAL = @MF_ADICIONAL AND E12.USUARIO_ECF = @USUARIO_ECF
		AND CAST(E12.CRZ AS INT) = CAST(@CRZ AS INT)) TOT
	LEFT JOIN #LJ_ECF_RZ_DETALHE  TEMP
	ON TOT.TOTALIZADOR = TEMP.TOTALIZADOR_PARCIAL 
	WHERE TEMP.TOTALIZADOR_PARCIAL IS NULL
	--#28#
   END  
  
  -- #12# Fim  
  
  --Verificar se o registro da redução z existe na LOJA_CONTROLE_FISCAL  
  IF EXISTS( SELECT LJ.DATA_FISCAL AS DATA_FISCAL, LJ.QTDE_REDUCOES_Z  
     FROM #LOJA_CONTROLE_FISCAL LJ -- #13#  
     WHERE LJ.CODIGO_FILIAL  = @CODIGO_FILIAL   
      --AND LJ.TERMINAL = @TERMINAL #6#  
      AND LJ.ID_EQUIPAMENTO = @SERIALNUMBER  
      AND LJ.DATA_FISCAL <= @DATA_MES  
      AND LJ.QTDE_REDUCOES_Z = @CRZ)  
     
   BEGIN  
    --#6# - Início (Obter o terminal da Redução Z (pode não ser o mesmo que o atual)  
    SELECT @TERMINAL = TERMINAL  
    FROM #LOJA_CONTROLE_FISCAL LJ -- #13#  
    WHERE LJ.CODIGO_FILIAL  = @CODIGO_FILIAL   
     AND LJ.ID_EQUIPAMENTO = @SERIALNUMBER  
     AND LJ.DATA_FISCAL <= @DATA_MES  
     AND LJ.QTDE_REDUCOES_Z = @CRZ  
    --#6# - Fim  
    --#5# - Inicio  
    SELECT DISTINCT  
     @MODELO_ECF = ISNULL(LIF.MODELO,'')  
    FROM DBO.LOJA_IMPRESSORAS_FISCAIS LIF  (NOLOCK)
    WHERE LIF.CODIGO_FILIAL = @CODIGO_FILIAL    
    AND LIF.ID_EQUIPAMENTO = @SERIALNUMBER  
    AND LIF.TERMINAL = @TERMINAL  
  
    SELECT @QTD_COO = CASE WHEN DBO.FX_ECF_CONVENIO_092009(@MODELO_ECF) = 1 THEN 9 ELSE 6 END--#5#  
  
    IF @MPR_DADOS_MFD = 1 --#24#  
    BEGIN   
       
     INSERT INTO #PRODUTOS_ECF  
     ( CODIGO_FILIAL, TERMINAL, SERIE_ECF, CODIGO_BARRA, COD_PRODUTO_CUPOM, DESCRICAO, UNIDADE, TOTALIZADOR, VALOR_TOTAL_LIQUIDO, VALOR_CANCELAMENTO,   
     VALOR_TOTAL_VENDA, VALOR_DESCONTO, VALOR_ACRESCIMO, BC_RATEIO_DESCONTO, ACRESCIMO_SUBTOTAL, DESCONTO_SUBTOTAL, VALOR_TOTAL_VENDA_ITECUPCANCVAL,  
     VALOR_LIQUIDO_ITECUPCANCVAl,VALOR_LIQUIDO_ITEM,QUANTIDADE,RATEIO_DESCONTO_VENDA,  
      COO, ITEM, DECIMAIS_VALOR_UNIT, AJUSTE, UTILIZADO)   
     SELECT    
     CODIGO_FILIAL,   
     TERMINAL,   
     ID_EQUIPAMENTO AS SERIE_ECF,   
     CODIGO_BARRA AS CODIGO_BARRA,     
     CODIGO_BARRA AS COD_PRODUTO_CUPOM,  
     DESC_PRODUTO AS DESCRICAO,  
     UNIDADE AS UNIDADE,  
     TOTALIZADOR AS TOTALIZADOR,  
     VALOR_LIQUIDO_TOTAL AS VALOR_TOTAL_LIQUIDO,   
     VALOR_CANCELADO AS VALOR_CANCELAMENTO,  
     VALOR_LIQUIDO_TOTAL AS VALOR_TOTAL_VENDA,   
     DESCONTO_ITEM AS VALOR_DESCONTO,  
     ACRESCIMO_ITEM AS VALOR_ACRESCIMO,  
     RATEIO_DESCONTO_VENDA AS BC_RATEIO_DESCONTO,  
     DESCONTO_SUBTOTAL AS DESCONTO_SUBTOTAL,  
     ACRESCIMO_SUBTOTAL AS ACRESCIMO_SUBTOTAL,  
     TOTAL_CANCELADO AS VALOR_TOTAL_VENDA_ITECUPCANCVAL,  
     TOTAL_CANCELADO as VALOR_LIQUIDO_ITECUPCANCVAl,  
     VALOR_LIQUIDO_TOTAL as VALOR_LIQUIDO_ITEM,  
     QTDE as QUANTIDADE,  
     RATEIO_DESCONTO_VENDA AS RATEIO_DESCONTO_VENDA,  
     NUMERO_CUPOM_FISCAL AS COO,   
     ITEM AS ITEM,   
     DECIMAIS_VALOR_UNIT,   
     0 AS AJUSTE,   
     0 AS UTILIZADO  
     FROM @DETALHE_ECF  
         
    END  
    ELSE  
    BEGIN  
     INSERT INTO #PRODUTOS_ECF  
     ( CODIGO_FILIAL, TERMINAL, SERIE_ECF, CODIGO_BARRA, COD_PRODUTO_CUPOM, DESCRICAO, UNIDADE, TOTALIZADOR, VALOR_TOTAL_LIQUIDO, COO, ITEM, DECIMAIS_VALOR_UNIT, AJUSTE, UTILIZADO) -- #18#  
     SELECT  
     @CODIGO_FILIAL,  
     @TERMINAL,  
     @SERIALNUMBER,  
     A.COD_PRODUTO_CUPOM, -- #18# Se não encontrar linha em LOJA_VENDA_PRODUTO, tenta usar o código do produto no cupom como código de barras.  
     A.COD_PRODUTO_CUPOM,   
     LEFT(RTRIM(LTRIM(DBO.FX_REPLACE_CARACTER_ESPECIAL_NFE(DEFAULT,A.DESC_PROD_CUPOM))),4000) as DESCRICAO,  
     LEFT(RTRIM(LTRIM(DBO.FX_REPLACE_CARACTER_ESPECIAL_NFE(DEFAULT,A.UNIDADE))),4000) AS UNIDADE,  
     A.TOTALIZADOR,  
     SUM(A.VALOR_TOTAL_LIQ_ITEM),  
     A.COO,  
     A.ITEM,  
     A.DECIMAIS_VALOR_UNIT,  
     0,  
     0  
     FROM DBO.#LJ_ECF_ITEM A     -- #7#  
     INNER JOIN DBO.#LJ_DOCUMENTO_ECF B  -- #7#  
      ON A.CODIGO_FILIAL = B.CODIGO_FILIAL   
       AND A.SERIE_ECF = B.ID_EQUIPAMENTO   
       AND A.ID_DOCUMENTO_ECF = B.ID_DOCUMENTO_ECF    
     WHERE B.DENOMINACAO_DOCUMENTO = 'CF'  
      AND B.DATA_FISCAL = @DATA_MES  
      AND A.CODIGO_FILIAL = @CODIGO_FILIAL   
      AND A.SERIE_ECF = @SERIALNUMBER  
     GROUP BY A.COO, A.COD_PRODUTO_CUPOM, A.ITEM, A.TOTALIZADOR, A.DESC_PROD_CUPOM, A.UNIDADE, DECIMAIS_VALOR_UNIT  
      
    END  
  
  
    --#5# Totalizadores gravados em tempo de execução pelo ECF.  
    INSERT INTO @ERD(VALOR_ACUMULADO, TOTALIZADOR_PARCIAL)  
    SELECT ERD.VALOR_ACUMULADO, ERD.TOTALIZADOR_PARCIAL  
    FROM #PRODUTOS_ECF PD  
    INNER JOIN #LJ_ECF_RZ_DETALHE ERD -- #12#  
     ON  PD.SERIE_ECF = ERD.SERIE_ECF  
      AND ERD.CRZ = CONVERT(CHAR(6),@CRZ)  
      AND PD.TOTALIZADOR = ERD.TOTALIZADOR_PARCIAL  
    GROUP BY ERD.VALOR_ACUMULADO, ERD.TOTALIZADOR_PARCIAL  
  
    UPDATE PD SET CODIGO_BARRA = LVP.CODIGO_BARRA, DATA_VENDA = LV.DATA_VENDA, TICKET = LV.TICKET,   
    FATOR_DESCONTO_VENDA = LVP.FATOR_DESCONTO_VENDA  
    FROM #PRODUTOS_ECF PD  
    INNER JOIN LOJA_VENDA_PGTO LVPGTO  
     ON PD.COO = LVPGTO.NUMERO_CUPOM_FISCAL  
      AND PD.SERIE_ECF = LVPGTO.ID_EQUIPAMENTO  
      AND PD.CODIGO_FILIAL = LVPGTO.CODIGO_FILIAL   
      AND PD.TERMINAL = LVPGTO.TERMINAL  
    INNER JOIN LOJA_VENDA LV  
     ON LVPGTO.CODIGO_FILIAL = LV.CODIGO_FILIAL_PGTO  
      AND LVPGTO.TERMINAL = LV.TERMINAL_PGTO  
      AND LVPGTO.LANCAMENTO_CAIXA = LV.LANCAMENTO_CAIXA  
    INNER JOIN LOJA_VENDA_PRODUTO LVP  
     ON LV.CODIGO_FILIAL = LVP.CODIGO_FILIAL  
      AND LV.TICKET = LVP.TICKET   
      AND LV.DATA_VENDA = LVP.DATA_VENDA  
      AND PD.ITEM = LVP.ITEM   
      AND LVP.DATA_VENDA = @DATA_MES
	  
	  
    --#5# Produtos  
    UPDATE PD  
    SET PRODUTO = PB.PRODUTO,  
     COR_PRODUTO = PB.COR_PRODUTO,  
     GRADE = PB.GRADE,  
     TAMANHO = PB.TAMANHO,  
     TIPO_COD_BAR = PB.TIPO_COD_BAR  
    FROM #PRODUTOS_ECF PD  
    INNER JOIN PRODUTOS_BARRA PB  
     ON PD.CODIGO_BARRA = PB.CODIGO_BARRA  
  
    --#5# CEST / NCM  
    UPDATE PDECF  
    SET CODIGO_CEST =  ISNULL(CEST.CODIGO_CEST,''),  
     CODIGO_NCM = ISNULL(NCM.CODIGO_NCM,SUBSTRING(REPLACE(PD.CLASSIF_FISCAL,'.',''),1,10))  
    FROM #PRODUTOS_ECF PDECF  
    INNER JOIN DBO.PRODUTOS PD        
	 ON ( PDECF.PRODUTO = PD.PRODUTO OR PDECF.DESCRICAO = PD.DESC_PRODUTO) -- #PRODSHOP-11747#
    LEFT JOIN CEST_NCM CN  
     ON PD.ID_CEST_NCM = CN.ID AND CN.INATIVO = 0  
    LEFT JOIN TABELA_LX_CEST CEST  
     ON CEST.ID = CN.ID_CEST  
    LEFT JOIN TABELA_LX_NCM NCM  
     ON NCM.ID = CN.ID_NCM  
      
    --#5# Calcular os valores com base nos dados fornecedos pelo ECF e gravados durante a venda.  
    UPDATE PD_UPDATE  
     SET PD_UPDATE.VALOR_DESCONTO = ISNULL(TMP.DESCONTO_ITEM,0),  
      PD_UPDATE.VALOR_ACRESCIMO = ISNULL(TMP.ACRES_ITEM,0),  
      PD_UPDATE.VALOR_CANCELAMENTO = ISNULL(TMP.VALOR_CANC,0),  
      PD_UPDATE.BC_RATEIO_DESCONTO = ISNULL(TMP.BC_RATEIO_DESCONTO,0),  
      PD_UPDATE.ACRESCIMO_SUBTOTAL = TMP.ACRESCIMO_SUBTOTAL,   
      PD_UPDATE.DESCONTO_SUBTOTAL = TMP.DESCONTO_SUBTOTAL,  
      PD_UPDATE.VALOR_TOTAL_VENDA = ISNULL(TMP.VALOR_TOTAL_VENDA,0),  
      PD_UPDATE.VALOR_TOTAL_VENDA_ITECUPCANCVAL = ISNULL(TMP.VALOR_TOTAL_VENDA_ITECUPCANCVAL,0),  
      PD_UPDATE.VALOR_LIQUIDO_ITECUPCANCVAL = ISNULL(TMP.VALOR_LIQUIDO_ITECUPCANCVAL,0),  
      PD_UPDATE.VALOR_LIQUIDO_ITEM = ISNULL(TMP.VALOR_LIQUIDO_ITEM,0),  
      PD_UPDATE.QUANTIDADE = ISNULL(TMP.QUANTIDADE,0),  
      PD_UPDATE.RATEIO_DESCONTO_VENDA = TMP.FATOR_DESCONTO_VENDA * TMP.VALOR_LIQUIDO_ITEM  
    FROM #PRODUTOS_ECF PD_UPDATE  
    INNER JOIN (   
    SELECT  
    PD.COD_PRODUTO_CUPOM,  
    A.ITEM,  
    A.COO,  
    PD.FATOR_DESCONTO_VENDA,  
    ISNULL(SUMDESC.QTDE,0) * ISNULL(SUMDESC.DESCONTO_ITEM,0) DESCONTO_ITEM,  
    ISNULL(SUMDESC.QTDE,0) * ISNULL(SUMDESC.ACRES_ITEM,0) ACRES_ITEM,  
    ISNULL(SUMITECANCVAL.VALOR_CANC,0) + (ISNULL(SUMITECANCVAL.QTDE,0) * ISNULL(SUMITECANCVAL.DESCONTO_ITEM,0)) + --Considerar apenas desconto acréscimo já incluso em valor_canc  
    ISNULL(SUMITECUPCANCVAL.QTDE,0) * ISNULL(SUMITECUPCANCVAL.VALOR_UNIT,0) + ISNULL(SUMITECUPCANCVAL.QTDE,0) * ISNULL(SUMITECUPCANCVAL.ACRES_ITEM,0) VALOR_CANC,  
    ISNULL(B.DESCONTO_SUBTOTAL,0) AS BC_RATEIO_DESCONTO,   
    ACRESCIMO_SUBTOTAL = CASE WHEN ISNULL(B.DESCONTO_SUBTOTAL, 0) < 0 THEN NULL ELSE 0 END,  
    DESCONTO_SUBTOTAL = CASE WHEN ISNULL(B.DESCONTO_SUBTOTAL, 0) < 0  THEN 0 ELSE NULL END,       
    ISNULL(SUM(SUMTOTALVENDA.QTDE * SUMTOTALVENDA.VALOR_UNIT + SUMTOTALVENDA.QTDE * CASE WHEN SUMTOTALVENDA.DESCONTO_ITEM > 0 THEN -1 * SUMTOTALVENDA.DESCONTO_ITEM ELSE SUMTOTALVENDA.ACRES_ITEM END),0) VALOR_TOTAL_VENDA,--Total Venda sem cancelamento  
    ISNULL(SUM(SUMTOTALVENDACUPOMCANCELADO.QTDE * SUMTOTALVENDACUPOMCANCELADO.VALOR_UNIT + SUMTOTALVENDACUPOMCANCELADO.QTDE * CASE WHEN SUMTOTALVENDACUPOMCANCELADO.DESCONTO_ITEM > 0 THEN -1 * SUMTOTALVENDACUPOMCANCELADO.DESCONTO_ITEM ELSE SUMTOTALVENDACUPOMCANCELADO.ACRES_ITEM END),0) VALOR_TOTAL_VENDA_ITECUPCANCVAL, --Total venda só cupom cancelado  
    ISNULL((SUMITECUPCANCVAL.QTDE * SUMITECUPCANCVAL.VALOR_UNIT + SUMITECUPCANCVAL.QTDE * CASE WHEN SUMITECUPCANCVAL.DESCONTO_ITEM > 0 THEN -1 * SUMITECUPCANCVAL.DESCONTO_ITEM ELSE A.ACRES_ITEM END),0) VALOR_LIQUIDO_ITECUPCANCVAL,--Valor Liquido Itens de cupons cancelados  
    CASE WHEN A.ITEM_CANCELADO NOT IN('S','P')  
      THEN (A.QTDE * A.VALOR_UNIT + A.QTDE * CASE WHEN A.DESCONTO_ITEM > 0 THEN -1 * A.DESCONTO_ITEM ELSE A.ACRES_ITEM END)  
    ELSE 0 END AS VALOR_LIQUIDO_ITEM,  
    ISNULL(SUMDESC.QTDE,0) AS QUANTIDADE  
    FROM #PRODUTOS_ECF PD  
    INNER JOIN DBO.#LJ_ECF_ITEM A -- #7#  
     ON PD.COO = A.COO  
      AND PD.COD_PRODUTO_CUPOM = A.COD_PRODUTO_CUPOM  
      AND PD.ITEM = A.ITEM  
    INNER JOIN DBO.#LJ_DOCUMENTO_ECF B -- #7#  
     ON A.CODIGO_FILIAL = B.CODIGO_FILIAL   
      AND A.SERIE_ECF = B.ID_EQUIPAMENTO   
      AND A.ID_DOCUMENTO_ECF = B.ID_DOCUMENTO_ECF   
    LEFT JOIN DBO.#LJ_ECF_ITEM SUMDESC  -- #7#  
     ON A.COD_PRODUTO_CUPOM = SUMDESC.COD_PRODUTO_CUPOM  
      AND A.SERIE_ECF = SUMDESC.SERIE_ECF  
      AND A.COO = SUMDESC.COO  
      AND A.ITEM = SUMDESC.ITEM  
      AND A.USUARIO_ECF = SUMDESC.USUARIO_ECF  
      AND A.MF_ADICIONAL = SUMDESC.MF_ADICIONAL  
      AND SUMDESC.ITEM_CANCELADO IN('N')  
      AND SUMDESC.QTDE_CANC = 0   
      AND SUMDESC.VALOR_CANC = 0   
      AND B.CANCELADO = 0  
    LEFT JOIN DBO.#LJ_ECF_ITEM SUMITECANCVAL  -- #7#  
     ON  A.COD_PRODUTO_CUPOM = SUMITECANCVAL.COD_PRODUTO_CUPOM  
      AND A.SERIE_ECF = SUMITECANCVAL.SERIE_ECF  
      AND A.COO = SUMITECANCVAL.COO  
      AND A.ITEM = SUMITECANCVAL.ITEM  
      AND A.USUARIO_ECF = SUMITECANCVAL.USUARIO_ECF  
      AND A.MF_ADICIONAL = SUMITECANCVAL.MF_ADICIONAL  
      AND SUMITECANCVAL.QTDE_CANC > 0   
      AND SUMITECANCVAL.ITEM_CANCELADO IN('S','P')  
      AND B.CANCELADO = 0  
    LEFT JOIN DBO.#LJ_ECF_ITEM SUMITECUPCANCVAL  -- #7#  
     ON  A.COD_PRODUTO_CUPOM = SUMITECUPCANCVAL.COD_PRODUTO_CUPOM  
      AND A.SERIE_ECF = SUMITECUPCANCVAL.SERIE_ECF  
      AND A.COO = SUMITECUPCANCVAL.COO  
      AND A.ITEM = SUMITECUPCANCVAL.ITEM  
      AND A.USUARIO_ECF = SUMITECUPCANCVAL.USUARIO_ECF  
      AND A.MF_ADICIONAL = SUMITECUPCANCVAL.MF_ADICIONAL  
      AND B.CANCELADO = 1  
    LEFT JOIN DBO.#LJ_ECF_ITEM SUMTOTALVENDA  -- #7#  
     ON  A.ID_DOCUMENTO_ECF = SUMTOTALVENDA.ID_DOCUMENTO_ECF  
      AND A.SERIE_ECF = SUMTOTALVENDA.SERIE_ECF  
      AND B.CANCELADO = 0  
      AND SUMTOTALVENDA.ITEM_CANCELADO IN('N')  
      AND SUMTOTALVENDA.QTDE_CANC = 0   
      AND SUMTOTALVENDA.VALOR_CANC = 0   
    LEFT JOIN DBO.#LJ_ECF_ITEM SUMTOTALVENDACUPOMCANCELADO  -- #7#  
     ON  A.ID_DOCUMENTO_ECF = SUMTOTALVENDACUPOMCANCELADO.ID_DOCUMENTO_ECF  
      AND A.SERIE_ECF = SUMTOTALVENDACUPOMCANCELADO.SERIE_ECF  
      AND B.CANCELADO = 1  
    WHERE B.DENOMINACAO_DOCUMENTO = 'CF'  
     AND B.DATA_FISCAL = @DATA_MES  
     AND A.CODIGO_FILIAL = @CODIGO_FILIAL   
     AND A.SERIE_ECF = @SERIALNUMBER  
     GROUP BY A.COO, PD.COD_PRODUTO_CUPOM, A.ITEM, PD.FATOR_DESCONTO_VENDA, SUMDESC.QTDE,SUMDESC.DESCONTO_ITEM, SUMDESC.ACRES_ITEM,SUMITECANCVAL.VALOR_CANC, SUMITECANCVAL.DESCONTO_ITEM, SUMITECANCVAL.ACRES_ITEM, SUMITECANCVAL.QTDE,  
     SUMITECUPCANCVAL.QTDE, SUMITECUPCANCVAL.VALOR_UNIT, SUMITECUPCANCVAL.ACRES_ITEM, SUMITECUPCANCVAL.DESCONTO_ITEM, B.DESCONTO_SUBTOTAL, B.CANCELADO, A.QTDE, A.VALOR_UNIT, A.DESCONTO_ITEM, A.ACRES_ITEM, A.ITEM_CANCELADO,  
     A.DECIMAIS_VALOR_UNIT) TMP   
      ON PD_UPDATE.COO = TMP.COO  
       AND PD_UPDATE.COD_PRODUTO_CUPOM = TMP.COD_PRODUTO_CUPOM  
       AND PD_UPDATE.ITEM  = TMP.ITEM  
  
    --#5# Ajustar diferença entre o desconto no subtotal rateado e o desconto no subtotal do ticket  
    DECLARE CUR_DIF_RATEIO CURSOR FOR  
    SELECT CODIGO_FILIAL, DATA_VENDA, TICKET, SUM(RATEIO_DESCONTO_VENDA) AS SOMA_RATEIO, MAX(BC_RATEIO_DESCONTO)  
    FROM #PRODUTOS_ECF   
    GROUP BY CODIGO_FILIAL, DATA_VENDA, TICKET  
    HAVING SUM(RATEIO_DESCONTO_VENDA) <> MAX(BC_RATEIO_DESCONTO)  
   
    OPEN CUR_DIF_RATEIO  
    FETCH NEXT FROM CUR_DIF_RATEIO INTO @CODIGO_FILIAL_DR, @DATA_VENDA_DR, @TICKET_DR, @SOMA_RATEIO, @BC_RATEIO_DESCONTO  
   
    --#5# Permanecer no ticket enquanto não zerar a diferença.  
    WHILE @@FETCH_STATUS = 0 AND (@BC_RATEIO_DESCONTO - @SOMA_RATEIO) <> 0   
    BEGIN  
     -- Trata diferença entre valor rateado e valor a ratear.  
     IF @BC_RATEIO_DESCONTO > 0  
     --#5# Trata o ajuste de desconto  
     BEGIN                           
      SELECT TOP 1 @ITEM_DR = ITEM, @RATEIO_DESCONTO_VENDA = RATEIO_DESCONTO_VENDA        
      FROM #PRODUTOS_ECF   
      WHERE   
       CODIGO_FILIAL = @CODIGO_FILIAL_DR   
       AND  DATA_VENDA = @DATA_VENDA_DR   
       AND  TICKET = @TICKET_DR   
      ORDER BY RATEIO_DESCONTO_VENDA DESC  
  
      --#5# Calcular o ajuste   
      SET @VALOR_AJUSTE = CASE WHEN @RATEIO_DESCONTO_VENDA + (@BC_RATEIO_DESCONTO - @SOMA_RATEIO) < 0    
            THEN @RATEIO_DESCONTO_VENDA * -1             
            ELSE (@BC_RATEIO_DESCONTO - @SOMA_RATEIO)           
           END                      
     END                            
     ELSE  
     BEGIN        
      --#5# Tratar o ajuste de acréscimo                     
      SELECT TOP 1 @ITEM_DR = ITEM, @RATEIO_DESCONTO_VENDA = RATEIO_DESCONTO_VENDA        
      FROM #PRODUTOS_ECF   
      WHERE CODIGO_FILIAL = @CODIGO_FILIAL_DR   
      AND  DATA_VENDA = @DATA_VENDA_DR   
      AND  TICKET = @TICKET_DR   
      ORDER BY RATEIO_DESCONTO_VENDA   
    
      --#5# Calcular o ajuste  
      SET @VALOR_AJUSTE = CASE WHEN @RATEIO_DESCONTO_VENDA + (@BC_RATEIO_DESCONTO - @SOMA_RATEIO) > 0    
            THEN @RATEIO_DESCONTO_VENDA * -1             
            ELSE (@BC_RATEIO_DESCONTO - @SOMA_RATEIO)           
           END                      
     END                            
  
     --#5# Aplicar o ajuste calculado  
     UPDATE #PRODUTOS_ECF   
     SET RATEIO_DESCONTO_VENDA = RATEIO_DESCONTO_VENDA + @VALOR_AJUSTE  
     WHERE CODIGO_FILIAL = @CODIGO_FILIAL_DR   
     AND  DATA_VENDA = @DATA_VENDA_DR   
     AND  TICKET = @TICKET_DR   
     AND  ITEM = @ITEM_DR    
  
     --#5# Calcular a nova soma do rateio em função do ajuste realizado  
     SET @SOMA_RATEIO = @SOMA_RATEIO + @VALOR_AJUSTE                 
  
     IF (@BC_RATEIO_DESCONTO - @SOMA_RATEIO) = 0                  
      --#5# Só passa para o próximo ticket depois de ter zerado a diferença   
      FETCH NEXT FROM CUR_DIF_RATEIO INTO @CODIGO_FILIAL_DR, @DATA_VENDA_DR, @TICKET_DR, @SOMA_RATEIO, @BC_RATEIO_DESCONTO  
    END  
  
    CLOSE CUR_DIF_RATEIO          
    DEALLOCATE CUR_DIF_RATEIO          
          
    --#5# Ajustar os valores de desconto e acréscimo nulos  
    UPDATE          
     #PRODUTOS_ECF          
    SET          
     ACRESCIMO_SUBTOTAL = CASE WHEN RATEIO_DESCONTO_VENDA  < 0 THEN ABS(ISNULL(RATEIO_DESCONTO_VENDA, 0)) ELSE 0 END,          
     DESCONTO_SUBTOTAL  = CASE WHEN RATEIO_DESCONTO_VENDA  > 0 THEN ISNULL(RATEIO_DESCONTO_VENDA, 0) ELSE 0 END      
      
  
    --#5# Ajuste dos Totalizadores conforme Redução Z   
    --#5# Somar por alíquota  
    INSERT INTO @TOTAL_ALIQUOTA(TOTALIZADOR_PARCIAL, VALOR_ACUMULADO)  
    SELECT PD.TOTALIZADOR,  
      SUM(CASE WHEN VALOR_TOTAL_VENDA = 0   
       THEN 0 ELSE VALOR_LIQUIDO_ITEM - DESCONTO_SUBTOTAL + ACRESCIMO_SUBTOTAL END) VALOR_TOTAL_LIQUIDO  
    FROM #PRODUTOS_ECF PD  
    GROUP BY PD.TOTALIZADOR  
      
      
  
    --#5# Diferenças: ECF X PROCEDURE - ECF MAIOR  
    INSERT INTO @DIFERENCA_ALIQUOTA_MENOR(TOTALIZADOR_PARCIAL,DIFERENCA_ACUMULADOR)  
    SELECT ERD.TOTALIZADOR_PARCIAL, (SUM(ERD.VALOR_ACUMULADO) - SUM(TA.VALOR_ACUMULADO)) DIF_ECF_PROC  
    FROM @TOTAL_ALIQUOTA TA  
    INNER JOIN @ERD ERD  
     ON TA.TOTALIZADOR_PARCIAL = ERD.TOTALIZADOR_PARCIAL  
    WHERE (ERD.VALOR_ACUMULADO - TA.VALOR_ACUMULADO) > 0  
    GROUP BY ERD.TOTALIZADOR_PARCIAL  
      
    --#5# Diferenças: ECF X PROCEDURE (ECF MENOR)  
    INSERT INTO @DIFERENCA_ALIQUOTA_MAIOR(TOTALIZADOR_PARCIAL,DIFERENCA_ACUMULADOR)  
    SELECT ERD.TOTALIZADOR_PARCIAL, (SUM(ERD.VALOR_ACUMULADO) - SUM(TA.VALOR_ACUMULADO)) DIF_ECF_PROC  
    FROM @TOTAL_ALIQUOTA TA  
    INNER JOIN @ERD ERD  
     ON TA.TOTALIZADOR_PARCIAL = ERD.TOTALIZADOR_PARCIAL  
    WHERE (ERD.VALOR_ACUMULADO - TA.VALOR_ACUMULADO) < 0  
    GROUP BY ERD.TOTALIZADOR_PARCIAL  
  
    --#5# Marcar os cupons que serão candidatos a ajuste com diferença no totalizador.  
    UPDATE PD SET AJUSTE = 1  
    FROM #PRODUTOS_ECF PD  
    INNER JOIN @DIFERENCA_ALIQUOTA_MENOR DAMENOR  
     ON PD.TOTALIZADOR = DAMENOR.TOTALIZADOR_PARCIAL  
  
    --#5# Marcar os cupons que serão candidatos a ajuste com diferença no totalizador.  
    UPDATE PD SET AJUSTE = 1  
    FROM #PRODUTOS_ECF PD  
    INNER JOIN @DIFERENCA_ALIQUOTA_MAIOR DAMAIOR  
     ON PD.TOTALIZADOR = DAMAIOR.TOTALIZADOR_PARCIAL  
  
    SELECT @ALQUOTA_DIF_MAIOR = SUM(DIFERENCA_ACUMULADOR) FROM @DIFERENCA_ALIQUOTA_MAIOR  
    SELECT @ALIQUOTA_DIF_MENOR = SUM(DIFERENCA_ACUMULADOR) FROM @DIFERENCA_ALIQUOTA_MENOR  
  
    --#5# Antes de processar validar se há difenças de alíquota   
    --#5# Somatório das diferenças negativas dever ser igual a soma das positivas  
    IF @ALQUOTA_DIF_MAIOR < 0 AND @ALIQUOTA_DIF_MENOR > 0 AND (@ALQUOTA_DIF_MAIOR + @ALIQUOTA_DIF_MENOR) = 0  
    BEGIN  
  
     SET @TOTALIZADOR_PARCIAL_OLD = ''  
     SET @VALOR_ACUMULADO = 0  
  
     DECLARE CUR_AJUSTE CURSOR FOR  
     SELECT TOTALIZADOR_PARCIAL, DIFERENCA_ACUMULADOR  
     FROM @DIFERENCA_ALIQUOTA_MENOR   
     ORDER BY DIFERENCA_ACUMULADOR  
  
     OPEN CUR_AJUSTE  
     FETCH NEXT FROM CUR_AJUSTE INTO @TOTALIZADOR_PARCIAL, @DIFERENCA_ACUMULADOR  
      
     --#5# Enquanto não zerar a diferença no totalizador não pode sair do loop  
     WHILE @@FETCH_STATUS = 0 AND (@DIFERENCA_ACUMULADOR - @VALOR_ACUMULADO) <> 0  
     BEGIN  
      --#5# Se alterar o totalizador zerar as variáveis de controle  
      IF @TOTALIZADOR_PARCIAL_OLD <> @TOTALIZADOR_PARCIAL  
       BEGIN   
        SET @VALOR_ACUMULADO = 0  
        SET @TOTALIZADOR_PARCIAL_OLD = @TOTALIZADOR_PARCIAL  
       END  
       
      SET @ITEM_SUBTRAIR = NULL  
      SET @ITEM_ADICIONAR = NULL  
  
      --#5# Sempre refazer as informações por alíquota  
      DELETE FROM @CUPONS_CANDIDATOS  
  
      --#5# Filtrar os cupons candidatos com alíquota contida na referência do cursor  
      INSERT INTO @CUPONS_CANDIDATOS (COO, TOTALIZADOR_PARCIAL)  
      SELECT PD.COO, PD.TOTALIZADOR  
      FROM #PRODUTOS_ECF PD  
      WHERE PD.TOTALIZADOR = @TOTALIZADOR_PARCIAL AND PD.AJUSTE = 1  
  
      --#5# Retornar item com valor maior que o ECF para reduzir(totalizador com valor negativo)  
      SELECT TOP 1   
       @TOTALIDOR_ALIQUOTA_MAIOR = PD.TOTALIZADOR,   
       @COO = PD.COO,   
       @COD_PRODUTO_CUPOM_SUBTRAIR = PD.COD_PRODUTO_CUPOM,   
       @ITEM_SUBTRAIR = PD.ITEM,   
       @VALOR_LIQUIDO_ITEM_SUBTRAIR = PD.VALOR_LIQUIDO_ITEM   
      FROM #PRODUTOS_ECF PD  
      INNER JOIN @CUPONS_CANDIDATOS CC  
       ON PD.COO = CC.COO  
      INNER JOIN @DIFERENCA_ALIQUOTA_MAIOR DN  
       ON PD.TOTALIZADOR = DN.TOTALIZADOR_PARCIAL  
      WHERE PD.AJUSTE = 1 AND PD.UTILIZADO = 0   
      AND ( SELECT (VALOR_ACUMULADO - VALOR_TOTAL_LIQUIDO) DIF_ECF_PROC  
        FROM (  
          SELECT ERD.TOTALIZADOR_PARCIAL, MAX(ERD.VALOR_ACUMULADO) VALOR_ACUMULADO,   
          SUM(CASE WHEN PDE.VALOR_TOTAL_VENDA = 0   
           THEN 0 ELSE PDE.VALOR_LIQUIDO_ITEM - PDE.DESCONTO_SUBTOTAL + PDE.ACRESCIMO_SUBTOTAL END) VALOR_TOTAL_LIQUIDO  
          FROM #PRODUTOS_ECF PDE  
          INNER JOIN @ERD ERD  
            ON PDE.TOTALIZADOR = ERD.TOTALIZADOR_PARCIAL  
          WHERE PDE.TOTALIZADOR = DN.TOTALIZADOR_PARCIAL  
          GROUP BY ERD.TOTALIZADOR_PARCIAL) TMP) <> 0  
      ORDER BY PD.VALOR_LIQUIDO_ITEM DESC  
  
      --#5# Se não encontrar pode ter sido utilizado e deve ser liberado para reutilização.  
      IF @ITEM_SUBTRAIR IS NULL  
       BEGIN  
        --#5# Buscar o item de maior valor a ser liberado que não possui ainda totalizador fechado.  
        SELECT TOP 1   
         @TOTALIDOR_ALIQUOTA_MAIOR = PD.TOTALIZADOR,   
         @COO = PD.COO,   
         @COD_PRODUTO_CUPOM_SUBTRAIR = PD.COD_PRODUTO_CUPOM,   
         @ITEM_SUBTRAIR = PD.ITEM,   
         @VALOR_LIQUIDO_ITEM_SUBTRAIR = PD.VALOR_LIQUIDO_ITEM   
        FROM #PRODUTOS_ECF PD  
        INNER JOIN @CUPONS_CANDIDATOS CC  
         ON PD.COO = CC.COO  
        INNER JOIN @DIFERENCA_ALIQUOTA_MAIOR DN  
         ON PD.TOTALIZADOR = DN.TOTALIZADOR_PARCIAL  
        WHERE PD.AJUSTE = 1 AND PD.UTILIZADO = 1   
        AND   
        (SELECT (VALOR_ACUMULADO - VALOR_TOTAL_LIQUIDO) DIF_ECF_PROC  
         FROM (  
          SELECT ERD.TOTALIZADOR_PARCIAL, MAX(ERD.VALOR_ACUMULADO) VALOR_ACUMULADO,   
          SUM(CASE WHEN PDE.VALOR_TOTAL_VENDA = 0   
           THEN 0 ELSE PDE.VALOR_LIQUIDO_ITEM - PDE.DESCONTO_SUBTOTAL + PDE.ACRESCIMO_SUBTOTAL END) VALOR_TOTAL_LIQUIDO  
          FROM #PRODUTOS_ECF PDE  
          INNER JOIN @ERD ERD  
            ON PDE.TOTALIZADOR = ERD.TOTALIZADOR_PARCIAL  
          WHERE PDE.TOTALIZADOR = DN.TOTALIZADOR_PARCIAL  
          GROUP BY ERD.TOTALIZADOR_PARCIAL) TMP) <> 0  
        ORDER BY PD.VALOR_LIQUIDO_ITEM DESC  
  
        IF @ITEM_SUBTRAIR IS NOT NULL  
         BEGIN  
          --#5# Liberar o Item para reutilização  
          UPDATE #PRODUTOS_ECF SET UTILIZADO = 0   
          WHERE COO = @COO   
          AND COD_PRODUTO_CUPOM = @COD_PRODUTO_CUPOM_SUBTRAIR  
          AND ITEM = @ITEM_SUBTRAIR  
          AND TOTALIZADOR = @TOTALIDOR_ALIQUOTA_MAIOR  
         END  
        ELSE  
         BEGIN  
         --#5# Se não encontrar mais item para liberar não pode ficar em loop infinito  
         --#5# Considerar que atingiu o valor acumulado para o tratar próximo acumulador.  
          SET @VALOR_ACUMULADO = @DIFERENCA_ACUMULADOR   
         END  
       END  
       
      --#5# Só continuar se houver item.  
      IF @ITEM_SUBTRAIR IS NOT NULL  
       BEGIN  
        --#5# Retorna item com alíquota para zerar a diferença.  
        SELECT TOP 1   
         @COD_PRODUTO_CUPOM_ADICIONAR = PD.COD_PRODUTO_CUPOM,   
         @ITEM_ADICIONAR = PD.ITEM,   
         @VALOR_LIQUIDO_ITEM_ADICIONAR = PD.VALOR_LIQUIDO_ITEM   
        FROM #PRODUTOS_ECF PD  
        WHERE PD.COO = @COO AND PD.AJUSTE = 1 AND PD.UTILIZADO = 0  AND PD.TOTALIZADOR = @TOTALIZADOR_PARCIAL  
        AND ( SELECT (VALOR_ACUMULADO - VALOR_TOTAL_LIQUIDO) DIF_ECF_PROC  
          FROM (SELECT ERD.TOTALIZADOR_PARCIAL, MAX(ERD.VALOR_ACUMULADO) VALOR_ACUMULADO,   
          SUM(CASE WHEN PDE.VALOR_TOTAL_VENDA = 0   
             THEN 0 ELSE PDE.VALOR_LIQUIDO_ITEM - PDE.DESCONTO_SUBTOTAL + PDE.ACRESCIMO_SUBTOTAL END) VALOR_TOTAL_LIQUIDO  
          FROM #PRODUTOS_ECF PDE  
          INNER JOIN @ERD ERD  
            ON PDE.TOTALIZADOR = ERD.TOTALIZADOR_PARCIAL  
          WHERE PDE.TOTALIZADOR = @TOTALIZADOR_PARCIAL  
          GROUP BY ERD.TOTALIZADOR_PARCIAL) TMP) <> 0  
        ORDER BY PD.VALOR_LIQUIDO_ITEM DESC  
  
        --#5# Se não encontrou item no cupom tentar verificar itens já utizados com totalizadores não fechados  
        IF @ITEM_ADICIONAR IS NULL  
         BEGIN  
          --#5# No mesmo cupom busca o item com alíquota positiva e já utilizado para ajustar o valor a menor  
          SELECT TOP 1   
           @COD_PRODUTO_CUPOM_ADICIONAR = PD.COD_PRODUTO_CUPOM,   
           @ITEM_ADICIONAR = PD.ITEM,   
           @VALOR_LIQUIDO_ITEM_ADICIONAR = PD.VALOR_LIQUIDO_ITEM   
          FROM #PRODUTOS_ECF PD  
          WHERE PD.COO = @COO AND PD.AJUSTE = 1 AND PD.UTILIZADO = 1  AND PD.TOTALIZADOR = @TOTALIZADOR_PARCIAL  
          AND ( SELECT (VALOR_ACUMULADO - VALOR_TOTAL_LIQUIDO) DIF_ECF_PROC  
            FROM (SELECT ERD.TOTALIZADOR_PARCIAL, MAX(ERD.VALOR_ACUMULADO) VALOR_ACUMULADO,   
            SUM(CASE WHEN PDE.VALOR_TOTAL_VENDA = 0   
             THEN 0 ELSE PDE.VALOR_LIQUIDO_ITEM - PDE.DESCONTO_SUBTOTAL + PDE.ACRESCIMO_SUBTOTAL END) VALOR_TOTAL_LIQUIDO  
            FROM #PRODUTOS_ECF PDE  
            INNER JOIN @ERD ERD  
              ON PDE.TOTALIZADOR = ERD.TOTALIZADOR_PARCIAL  
              WHERE PDE.TOTALIZADOR = @TOTALIZADOR_PARCIAL  
            GROUP BY ERD.TOTALIZADOR_PARCIAL) TMP) <> 0  
          ORDER BY PD.VALOR_LIQUIDO_ITEM DESC  
  
          IF @ITEM_ADICIONAR IS NOT NULL  
           BEGIN  
            --#5# Liberar item para reduzir valor  
            UPDATE #PRODUTOS_ECF SET UTILIZADO = 0   
            WHERE COO = @COO   
            AND COD_PRODUTO_CUPOM = @COD_PRODUTO_CUPOM_ADICIONAR  
            AND ITEM = @ITEM_ADICIONAR  
            AND TOTALIZADOR = @TOTALIDOR_ALIQUOTA_MAIOR  
           END  
          ELSE  
           BEGIN  
            --#5# Se não encontrar mais item para liberar não pode ficar em loop infinito  
            --#5# Considerar que atingiu o valor acumulado para o tratar próximo acumulador.  
            SET @VALOR_ACUMULADO = @DIFERENCA_ACUMULADOR  
           END   
         END  
        END  
       
      --#5# Item encontrado e par encontrado   
      IF @ITEM_ADICIONAR IS NOT NULL AND @ITEM_SUBTRAIR IS NOT NULL  
       BEGIN  
        --#5# Faz o ajuste a menor porque o resultado alíquota negativo indica que o totalizador está a maior.  
        UPDATE #PRODUTOS_ECF   
         SET VALOR_LIQUIDO_ITEM = @VALOR_LIQUIDO_ITEM_SUBTRAIR - 0.01,  
          UTILIZADO = 1  
        WHERE TOTALIZADOR = @TOTALIDOR_ALIQUOTA_MAIOR   
          AND COO = @COO   
          AND COD_PRODUTO_CUPOM = @COD_PRODUTO_CUPOM_SUBTRAIR  
          AND ITEM  = @ITEM_SUBTRAIR  
         
        --#5# Faz o ajuste a maior porque o resultado alíquota positivo indica que o totalizador está a menor  
        UPDATE #PRODUTOS_ECF   
         SET VALOR_LIQUIDO_ITEM = @VALOR_LIQUIDO_ITEM_ADICIONAR + 0.01,  
          UTILIZADO = 1  
        WHERE COO = @COO  
          AND COD_PRODUTO_CUPOM = @COD_PRODUTO_CUPOM_ADICIONAR  
          AND ITEM = @ITEM_ADICIONAR  
          AND TOTALIZADOR = @TOTALIZADOR_PARCIAL --Totalizado com diferença a maior   
  
        SET @VALOR_ACUMULADO = @VALOR_ACUMULADO + 0.01  
       END  
  
       --#5# Zerar as variáveis  
       SET @TOTALIDOR_ALIQUOTA_MAIOR = 0   
       SET @COO = ''  
       SET @COD_PRODUTO_CUPOM_SUBTRAIR = ''   
       SET @VALOR_LIQUIDO_ITEM_SUBTRAIR = 0  
       SET @COD_PRODUTO_CUPOM_ADICIONAR = ''   
       SET @VALOR_LIQUIDO_ITEM_ADICIONAR = 0  
  
      --#5# Só passar para o próximo tolizador depois de ter zerado a diferença  
      IF (@DIFERENCA_ACUMULADOR - @VALOR_ACUMULADO) = 0            
        FETCH NEXT FROM CUR_AJUSTE INTO @TOTALIZADOR_PARCIAL, @DIFERENCA_ACUMULADOR  
     END  
  
     CLOSE CUR_AJUSTE          
     DEALLOCATE CUR_AJUSTE  
    END   
      
    --Atualizar os novos Totais obtidos  
    UPDATE TA SET VALOR_ACUMULADO = TA_TEMP.VALOR_TOTAL_LIQUIDO  
    FROM @TOTAL_ALIQUOTA TA  
    INNER JOIN (  
       SELECT PD.TOTALIZADOR,  
         SUM(CASE WHEN VALOR_TOTAL_VENDA = 0   
          THEN 0 ELSE VALOR_LIQUIDO_ITEM - DESCONTO_SUBTOTAL + ACRESCIMO_SUBTOTAL END) VALOR_TOTAL_LIQUIDO  
       FROM #PRODUTOS_ECF PD  
       GROUP BY PD.TOTALIZADOR  
    )TA_TEMP ON TA.TOTALIZADOR_PARCIAL = TA_TEMP.TOTALIZADOR  
    --#5# [Fim]  
  
    -- #10# Início  
    -- Confere dados antes de gerar o XML  
    --SELECT MAX(VendaBrutaDiaria) As VendaBrutaDiaria,  
    --  SUM(ValorTotalLiquido) As ValorTotalLiquido,  
    --  SUM(ValorCancelamento) As ValorCancelamento,  
    --  SUM(ValorDesconto) As ValorDesconto,  
    --  SUM(ValorTotalLiquido) + SUM(ValorCancelamento) + SUM(ValorDesconto) As Teste5  
    --FROM (  
    INSERT INTO @CONFERE (TOTALIZADOR_PARCIAL, TOTAL_BRUTO, VALOR_ACUMULADO, DESCONTO, CANCELAMENTO, TOTAL_LIQUIDO)  
    SELECT ERD.TOTALIZADOR_PARCIAL,   
      MAX(ISNULL(C.TOTAL_BRUTO,0)) AS VendaBrutaDiaria,  
  
      MAX( CASE WHEN (ISNULL(ERD.VALOR_ACUMULADO,0) - ISNULL(TALIQUOTA.VALOR_ACUMULADO,0)) <> 0   
        THEN ISNULL(TALIQUOTA.VALOR_ACUMULADO,0)  
        ELSE ISNULL(ERD.VALOR_ACUMULADO,0) END) AS VALOR_ACUMULADO,  
  
      ISNULL( SUM(VALOR_DESCONTO) +   
          SUM(CASE WHEN PROD.BC_RATEIO_DESCONTO > 0 AND PROD.VALOR_TOTAL_VENDA > 0  
            THEN PROD.DESCONTO_SUBTOTAL ELSE 0 END),0) AS ValorDesconto,  
      --ISNULL( SUM(VALOR_ACRESCIMO) +  
      --    SUM(CASE WHEN BC_RATEIO_DESCONTO < 0 AND VALOR_TOTAL_VENDA > 0  
      --      THEN ACRESCIMO_SUBTOTAL ELSE 0 END),0) AS ValorAcrescimo,  
      ISNULL( SUM(PROD.VALOR_CANCELAMENTO) +   
          SUM(CASE WHEN PROD.BC_RATEIO_DESCONTO < 0 AND PROD.VALOR_TOTAL_VENDA_ITECUPCANCVAL > 0  
           THEN (PROD.ACRESCIMO_SUBTOTAL) ELSE 0 END),0) AS ValorCancelamento,  
      ISNULL( SUM(CASE WHEN PROD.VALOR_TOTAL_VENDA = 0   
         THEN 0   
         ELSE PROD.VALOR_LIQUIDO_ITEM - PROD.DESCONTO_SUBTOTAL + PROD.ACRESCIMO_SUBTOTAL END),0) AS ValorTotalLiquido  
    FROM #LOJA_CONTROLE_FISCAL C -- #13#  
    LEFT JOIN #LJ_ECF_RZ_DETALHE ERD -- #12#  
    ON ERD.CODIGO_FILIAL = C.CODIGO_FILIAL  
     AND ERD.SERIE_ECF = C.ID_EQUIPAMENTO  
     AND ERD.CRZ = CONVERT(CHAR(6),C.QTDE_REDUCOES_Z)   
     AND ( SUBSTRING(ERD.TOTALIZADOR_PARCIAL,3,1) IN('T','S')--#5#  
     OR  SUBSTRING(ERD.TOTALIZADOR_PARCIAL,1,1) IN('F', 'I', 'N')--#5#  
     OR  SUBSTRING(ERD.TOTALIZADOR_PARCIAL,1,2) IN('FS', 'IS', 'NS'))--#5#  
    LEFT JOIN @TOTAL_ALIQUOTA TALIQUOTA  
     ON TALIQUOTA.TOTALIZADOR_PARCIAL = ERD.TOTALIZADOR_PARCIAL  
    LEFT JOIN #PRODUTOS_ECF PROD  
     ON ERD.TOTALIZADOR_PARCIAL = PROD.TOTALIZADOR   
    WHERE C.DATA_FISCAL BETWEEN  @DATA_MES AND @DATA_MES   
     AND C.CODIGO_FILIAL  = @CODIGO_FILIAL  
     AND C.ID_EQUIPAMENTO = @SERIALNUMBER  
     AND C.TERMINAL = @TERMINAL  
     AND C.QTDE_REDUCOES_Z = @CRZ  
     AND C.CONTADOR_REINICIO_OPERACAO = @CRO   
    GROUP BY ERD.TOTALIZADOR_PARCIAL   

	--Inicio - #PRODSHOP-11088#
	select @TOTAL_DESCONTO_CONFERE =  SUM(DESCONTO) from @CONFERE
	select @TOTAL_DESCONTO_LOJA_VENDA =  SUM(DESCONTO_SUBTOTAL) from LJ_ECF_AC1704_E14 where DATA_INI_DOC = @DATA_MES and DESCONTO_SUBTOTAL > 0 AND DOC_CANCELADO = 'N'

	
	SELECT @TOTAL_BRUTO_CONFERE = SUM(TOTAL_LIQUIDO + CANCELAMENTO +  @TOTAL_DESCONTO_CONFERE + @TOTAL_DESCONTO_LOJA_VENDA)
	FROM @CONFERE	
	where TOTAL_LIQUIDO > 0 
	

		IF @TOTAL_BRUTO_CONFERE = (SELECT TOP 1 TOTAL_BRUTO FROM @CONFERE)
			BEGIN
			
				UPDATE @CONFERE SET DESCONTO = isnull(@TOTAL_DESCONTO_CONFERE,0) + isnull(@TOTAL_DESCONTO_LOJA_VENDA,0) WHERE TOTAL_LIQUIDO > 0
									   
				SET @BRESULT =1
				
			END
		ELSE
			BEGIN

				UPDATE @CONFERE SET DESCONTO =  isnull(@TOTAL_DESCONTO_LOJA_VENDA,0) WHERE TOTAL_LIQUIDO > 0
											   
				SET @BRESULT =0
			END

	select top 1 @ResultTotalizadorParcial = total_bruto from @CONFERE

	 select @SomaTotal=isnull(sum(DESCONTO),0) + sum(CANCELAMENTO)+sum(TOTAL_LIQUIDO) from @CONFERE
	 if @ResultTotalizadorParcial > @SomaTotal
	 begin
	 
	  select @ResultadoSoma =@ResultTotalizadorParcial -@SomaTotal
	 
	 update #PRODUTOS_ECF set VALOR_DESCONTO = VALOR_DESCONTO +@ResultadoSoma where TICKET = @TicketProduto and item = @itemProd
	 update @CONFERE set DESCONTO = DESCONTO+@ResultadoSoma where TOTAL_LIQUIDO > 0

	 end
	 else
	 begin
	
	
	 select @ResultadoSoma = @SomaTotal -@ResultTotalizadorParcial
	
	 select top 1  @TicketProduto = ticket ,@itemProd =item from #PRODUTOS_ECF where @ResultadoSoma <valor_desconto
		update #PRODUTOS_ECF set VALOR_DESCONTO = VALOR_DESCONTO - @ResultadoSoma where TICKET = @TicketProduto and item = @itemProd
	 end

	 select top 1  @TicketProduto = ticket ,@itemProd =item from #PRODUTOS_ECF where (VALOR_DESCONTO >0 or DESCONTO_SUBTOTAL >0)
	 	 
		  select  @SomaTotal= ISNULL( SUM(VALOR_DESCONTO) +   
          SUM(CASE WHEN PROD.BC_RATEIO_DESCONTO > 0 AND PROD.VALOR_TOTAL_VENDA > 0  
            THEN PROD.DESCONTO_SUBTOTAL ELSE 0 END),0) 
			from  #PRODUTOS_ECF prod


			select @SomasubTotal = sum(desconto) from @CONFERE

			if @SomasubTotal >@SomaTotal
			begin 
			select  @ResultadoSoma= @SomasubTotal -@SomaTotal

			update #PRODUTOS_ECF set VALOR_DESCONTO = VALOR_DESCONTO +@ResultadoSoma  where TICKET = @TicketProduto and item = @itemProd
			end
	--Fim - #PRODSHOP-11088#	
	
	update #PRODUTOS_ECF set DESCONTO_SUBTOTAL = 0 where VALOR_LIQUIDO_ITEM < DESCONTO_SUBTOTAL -- #PRODSHOP-11747#

	print @TOTALIZADORES_ERRO
    
    SELECT @TOTALIZADORES_ERRO = @TOTALIZADORES_ERRO + TOTALIZADOR_PARCIAL + ', '   
    FROM @CONFERE   
    WHERE VALOR_ACUMULADO <> TOTAL_LIQUIDO   
		  
    IF (@TOTALIZADORES_ERRO = '')  
    BEGIN  
     SELECT @RETORNO_ERRO = 'Total bruto não corresponde ao total líquido + descontos + cancelamentos.'  
     FROM @CONFERE   
     HAVING MAX(TOTAL_BRUTO) <> SUM(TOTAL_LIQUIDO+DESCONTO+CANCELAMENTO)  
    END  
    ELSE  
     SET @RETORNO_ERRO = 'Valor líquido dos produtos não corresponde ao valor do totalizador parcial em ' + LEFT(@TOTALIZADORES_ERRO, LEN(@TOTALIZADORES_ERRO) - 1) + '.' -- #13#  
  
    IF (@VALIDAR = 0) -- Não está apenas validando os dados -- #14#  
    BEGIN              -- #14#  
     IF (@RETORNO_ERRO <> '')  
     BEGIN  
      SET @RETORNO_ERRO = '@LXDATAERR ' + @RETORNO_ERRO  
      RAISERROR(@RETORNO_ERRO, 11, 1)  
      RETURN  
     END  
     -- #10# Fim  
  
--------------------------------------------------------------------  -------------------------------------------------------------------- 
--     Método antigo não utilizava a MFD      --  
-------------------------------------------------------------------- -------------------------------------------------------------------- 
--#29# Inicio 
      IF NOT EXISTS (select * from #LJ_ECF_RZ_DETALHE ERD
		   WHERE   SUBSTRING(ERD.TOTALIZADOR_PARCIAL,3,1) IN('T','S') 
		   OR  SUBSTRING(ERD.TOTALIZADOR_PARCIAL,1,1) IN('F', 'I', 'N')
		   OR  SUBSTRING(ERD.TOTALIZADOR_PARCIAL,1,2) IN('FS', 'IS', 'NS'))
		BEGIN 
			INSERT INTO #LJ_ECF_RZ_DETALHE VALUES ( @CODIGO_FILIAL,  @SERIALNUMBER,@CRZ,'I1',0)
	    END
--#29# Fim 
			
     -- Geração do XML  
     SELECT @REDUCAOZ_XML =(  
           (--ReducaoZ inicio  
            SELECT '1.0' AS "@Versao",  
              (--Mensagem inicio  
               SELECT  
                (--Estabelecimento  
                 SELECT   
                  REPLACE(REPLACE(REPLACE(REPLACE(RTRIM(LTRIM(RG_IE)), '.', ''), '-', ''), '/', ''), '\', '') as Ie--#5# #20#  
                 FROM   CADASTRO_CLI_FOR   
                 WHERE  NOME_CLIFOR = @FILIAL   
                 FOR XML PATH('Estabelecimento'), TYPE  
                ),-- Estabelecimento  
                (-- PafEcf  
                 --SELECT  RTRIM(LTRIM(LEFT(@NUMEROCREDENCIAMENTO, 15))) AS NumeroCredenciamento   
				 SELECT  RTRIM(LTRIM(LEFT('1906900007911', 15))) AS NumeroCredenciamento   				 
                  FOR XML PATH('PafEcf'),TYPE  
                 ),--PafEcf  
                (--Ecf  
                 SELECT @NUMERO_FABRICACAO AS NumeroFabricacao,   
                (--DadosReducaoZ  
                 SELECT   
                  --Forçar retornar a data no formato aaaa-mm-dd  
                  (RIGHT(REPLICATE('0',4) + CONVERT(VARCHAR,YEAR(C.DATA_FISCAL)),4) + '-'   
                   + RIGHT(REPLICATE('0',2) + CONVERT(VARCHAR,MONTH(C.DATA_FISCAL)),2) + '-'   
                   + RIGHT(REPLICATE('0',2) + CONVERT(VARCHAR,DAY(C.DATA_FISCAL)), 2)) AS DataReferencia,--#5#  
                  C.DATA_HORA_REDUCAO_Z AS DataHoraEmissao,--#5#  
                  RIGHT(REPLICATE('0',4) + CONVERT(VARCHAR,ISNULL(C.QTDE_REDUCOES_Z,0)),4) AS CRZ,--#2#  
                  RIGHT(REPLICATE('0',9) + CONVERT(VARCHAR,ISNULL(C.CF_FINAL,0)),9) AS COO,--#2#  
                  RIGHT(REPLICATE('0',3) + CONVERT(VARCHAR,ISNULL(C.CONTADOR_REINICIO_OPERACAO,0)),3) AS CRO,--#2#  
                  RIGHT(REPLICATE('0',14) + CONVERT(VARCHAR,REPLACE(ISNULL(C.TOTAL_BRUTO,0),'.','')),14) AS VendaBrutaDiaria,--#2#  
                  RIGHT(REPLICATE('0',18) + CONVERT(VARCHAR,REPLACE(ISNULL(C.GT_FINAL,0),'.','')),18) AS GT,-- #2#  
				  (--TotalizadoresParciais inicio  
                    SELECT   
                     (--TotalizadorParcial  
                      SELECT  
					    ERD.TOTALIZADOR_PARCIAL AS Nome,  
							CASE WHEN (ISNULL(ERD.VALOR_ACUMULADO,0) - ISNULL(TALIQUOTA.VALOR_ACUMULADO,0)) <> 0   
							THEN REPLACE(ISNULL(TALIQUOTA.VALOR_ACUMULADO,0),'.',',')  
							ELSE REPLACE(ISNULL(ERD.VALOR_ACUMULADO,0),'.',',') END Valor,  
                        (--ProdutosServicos  
                         SELECT  
                          (--Produto  
                          SELECT   
                          DESCRICAO as "Descricao",  
                          CASE WHEN ISNULL(TIPO_COD_BAR,0) = 1 AND COD_PRODUTO_CUPOM <> CODIGO_BARRA  THEN CODIGO_BARRA ELSE '' END "CodigoGTIN",--#5#  --#30#   
                          CASE WHEN ISNULL(CODIGO_CEST,'') <> '' THEN RTRIM(CODIGO_CEST) ELSE '' END "CodigoCEST",--#5#  
                          CASE WHEN ISNULL(CODIGO_NCM,'') <> '' THEN RTRIM(CODIGO_NCM) ELSE '' END "CodigoNCMSH",--#5#  
                          RTRIM(COD_PRODUTO_CUPOM) AS "CodigoProprio",--#5#  
                          SUM(QUANTIDADE) as "Quantidade",--#5#  
                          RTRIM(UNIDADE) AS "Unidade",--#5#  
                          REPLACE(ISNULL( SUM(VALOR_DESCONTO) +   
                              SUM(CASE WHEN BC_RATEIO_DESCONTO > 0 AND VALOR_TOTAL_VENDA > 0  
                                THEN DESCONTO_SUBTOTAL ELSE 0 END),0),'.',',') AS "ValorDesconto",--#5#  
                          REPLACE(ISNULL( SUM(VALOR_ACRESCIMO) +  
                              SUM(CASE WHEN BC_RATEIO_DESCONTO < 0 AND VALOR_TOTAL_VENDA > 0  
                                THEN ACRESCIMO_SUBTOTAL ELSE 0 END),0),'.',',') AS "ValorAcrescimo",--#5#  
                          REPLACE(ISNULL( SUM(VALOR_CANCELAMENTO) +   
                              SUM(CASE WHEN BC_RATEIO_DESCONTO < 0 AND VALOR_TOTAL_VENDA_ITECUPCANCVAL > 0  
                               THEN (ACRESCIMO_SUBTOTAL) ELSE 0 END),0),'.',',') AS "ValorCancelamento",--#5#  
                          REPLACE(ISNULL( SUM(CASE WHEN VALOR_TOTAL_VENDA = 0   
                                THEN 0 ELSE VALOR_LIQUIDO_ITEM - DESCONTO_SUBTOTAL + ACRESCIMO_SUBTOTAL END),0),'.',',') AS "ValorTotalLiquido"--#5#  
                          FROM #PRODUTOS_ECF  
                          WHERE TOTALIZADOR = ERD.TOTALIZADOR_PARCIAL  
                          GROUP BY DESCRICAO, TIPO_COD_BAR, COD_PRODUTO_CUPOM, CODIGO_CEST, CODIGO_NCM, UNIDADE, CODIGO_BARRA
                           FOR XML PATH('Produto'),TYPE  
                          )--Produto  
                         FOR XML PATH('ProdutosServicos'),TYPE  
                        )--ProdutosServicos  
                      FROM #LJ_ECF_RZ_DETALHE ERD -- #12#  
                      LEFT JOIN @TOTAL_ALIQUOTA TALIQUOTA  
                       ON TALIQUOTA.TOTALIZADOR_PARCIAL = ERD.TOTALIZADOR_PARCIAL  
                      WHERE ERD.CODIGO_FILIAL = C.CODIGO_FILIAL  
                       AND ERD.SERIE_ECF = C.ID_EQUIPAMENTO  
                       AND ERD.CRZ = CONVERT(CHAR(6),C.QTDE_REDUCOES_Z)   
                       AND ( SUBSTRING(ERD.TOTALIZADOR_PARCIAL,3,1) IN('T','S')--#5#  
                       OR  SUBSTRING(ERD.TOTALIZADOR_PARCIAL,1,1) IN('F', 'I', 'N')--#5#  
                       OR  SUBSTRING(ERD.TOTALIZADOR_PARCIAL,1,2) IN('FS', 'IS', 'NS'))
                      FOR XML PATH('TotalizadorParcial'),TYPE  
                     )--TotalizadorParcial  
                    FOR XML PATH('TotalizadoresParciais'),TYPE  
                   )--TotalizadoresParciais  
                 FROM #LOJA_CONTROLE_FISCAL C -- #13#  
                 WHERE C.DATA_FISCAL BETWEEN  @DATA_MES AND @DATA_MES   
                  AND C.CODIGO_FILIAL  = @CODIGO_FILIAL  
                  AND C.ID_EQUIPAMENTO = @SERIALNUMBER  
                  AND C.TERMINAL = @TERMINAL  
                  AND C.QTDE_REDUCOES_Z = @CRZ  
                  AND C.CONTADOR_REINICIO_OPERACAO = @CRO   
                 FOR XML PATH('DadosReducaoZ'), TYPE  
                )--DadosReducaoZ  
                FOR XML PATH('Ecf'),TYPE  
               )  
              FOR XML PATH('Mensagem'),TYPE  
             )--Mesangem  
           FOR XML PATH('ReducaoZ'), TYPE  
          )--ReducaoZ fim  
         )  
     --Validar campos do XML de acordo com o XSD #23# Início  
     IF @VALIDAR_XSD = 1  
      BEGIN  
       DECLARE @OUTPUT VARCHAR(MAX)  
  
       EXEC LX_LJ_VALIDAR_XML @REDUCAOZ_XML, 'DBO.XML_XSD_REDUCAOZ_BLOCOX', @OUTPUT OUTPUT  
        
       IF @OUTPUT <> ''  
        BEGIN  
         SET @OUTPUT = '@LXDATAERR ' + @OUTPUT  
         RAISERROR(@OUTPUT, 11, 1)  
         RETURN  
        END  
      END  
     --#23# Fim             
     
     SELECT @REDUCAOZ_XML_REPLACE = @ENCODING + CONVERT(VARCHAR(MAX),@REDUCAOZ_XML)--#2#  
     SELECT @Signature = LTRIM(RTRIM(@Signature + '</Signature>'))  
  
     SELECT @REDUCAOZ_XML_REPLACE  
       
     IF LEN(@REDUCAOZ_XML_REPLACE) > 0  
      BEGIN  
       PRINT @REDUCAOZ_XML_REPLACE  
      END  
     ELSE  
      BEGIN  
       PRINT 'NÃO HÁ DADOS A SEREM EXIBIDOS'  
      END  
       
     IF EXISTS(SELECT * FROM DBO.LJ_BLOCOX_CONTROLE_GERA_XML WHERE CODIGO_FILIAL = @CODIGO_FILIAL AND ID_EQUIPAMENTO = @SERIALNUMBER AND CRO=@CRO AND CRZ=@CRZ) -- #8# -- #16#  
      BEGIN  
       SELECT @ID_BLOCOX = ID_BLOCOX   
        FROM DBO.LJ_BLOCOX_CONTROLE_GERA_XML -- #16#  
        WHERE ID_EQUIPAMENTO = @SERIALNUMBER  
        AND CODIGO_FILIAL = @CODIGO_FILIAL  
        AND CRO = @CRO  
        AND CRZ = @CRZ  
  
        IF EXISTS(SELECT * FROM DBO.LJ_BLOCOX_XML WHERE ID_BLOCOX = @ID_BLOCOX) -- #16#  
         BEGIN  
          UPDATE DBO.LJ_BLOCOX_XML SET XML_ARQUIVO = @REDUCAOZ_XML_REPLACE, DATA_PARA_TRANSFERENCIA = GETDATE() WHERE ID_BLOCOX = @ID_BLOCOX -- #16#  
         END  
        ELSE  
         -- #16# Início  
         --BEGIN  
         -- BEGIN TRY--#4#  
         -- --Procura o próximo sequencial  
         --  SELECT @INTSEQBCX = ISNULL(MAX(ID_XML),0) + 1 FROM DBO.BLOCOX_XML BCX (NOLOCK) WHERE BCX.CODIGO_FILIAL = @CODIGO_FILIAL-- #4#  
         -- END TRY  
           
         -- BEGIN CATCH  
         --  SELECT @ERRORMESSAGE = ERROR_MESSAGE(),@ERRORSEVERITY = ERROR_SEVERITY(),@ERRORSTATE = ERROR_STATE()--#4#  
         --  -- Se for Arithmetic overflow não grava.  
         --  RAISERROR (@ERRORMESSAGE, @ERRORSEVERITY,@ERRORSTATE)--#4#  
            
         --  RETURN--#4#   
         -- END CATCH--#4#  
  
         INSERT INTO DBO.LJ_BLOCOX_XML(ID_BLOCOX, CODIGO_FILIAL, XML_ARQUIVO, DATA_PARA_TRANSFERENCIA)  
          VALUES(@ID_BLOCOX, @CODIGO_FILIAL, @REDUCAOZ_XML_REPLACE, GETDATE())--#4#  
         --END   
         -- #16# Fim  
      END  
         
     ELSE  
      BEGIN  
       IF NOT EXISTS(SELECT * FROM DBO.LJ_BLOCOX_CONTROLE_GERA_XML WHERE CODIGO_FILIAL = @CODIGO_FILIAL AND ID_EQUIPAMENTO = @SERIALNUMBER AND CRO=@CRO AND CRZ=@CRZ) -- #16#  
        BEGIN  
         BEGIN TRY--#4#  
          --Procura o próximo sequencial  
          SELECT @INTSEQBCGX = ISNULL(MAX(ID_BLOCOX),0) + 1 FROM DBO.LJ_BLOCOX_CONTROLE_GERA_XML BCGX (NOLOCK) WHERE BCGX.CODIGO_FILIAL = @CODIGO_FILIAL--#4# -- #16#  
         END TRY--#4#  
          
         BEGIN CATCH--#4#  
          SELECT @ERRORMESSAGE = ERROR_MESSAGE(),@ERRORSEVERITY = ERROR_SEVERITY(),@ERRORSTATE = ERROR_STATE()--#4#  
          -- Se for Arithmetic overflow não grava.  
          RAISERROR (@ERRORMESSAGE, @ERRORSEVERITY,@ERRORSTATE)--#4#  
           
          RETURN--#4#  
         END CATCH--#4#  
     
         /**INSIRO AS INFORMAÇÕES NA TABELA [dbo].[LJ_BLOCOX_CONTROLE_GERA_XML] E [dbo].[LJ_BLOCOX_XML]*/ -- #16#  
         INSERT INTO DBO.LJ_BLOCOX_CONTROLE_GERA_XML  -- #16#  
         (ID_BLOCOX, CODIGO_FILIAL, TIPO_ARQUIVO, ID_EQUIPAMENTO, CRO, CRZ, DATA_MES, SITUACAO, COD_RET_SEFAZ, MSG_RET_SEFAZ, RECIBO, DATA_PARA_TRANSFERENCIA)  
          VALUES(@INTSEQBCGX, @CODIGO_FILIAL, 'RZ', @SERIALNUMBER, @CRO, @CRZ, @DATA_MES, 1, 0, NULL, NULL, GETDATE())--#4#  
       
         SELECT @ID_BLOCOX = ID_BLOCOX   
          FROM DBO.LJ_BLOCOX_CONTROLE_GERA_XML -- #16#  
          WHERE ID_EQUIPAMENTO = @SERIALNUMBER  
          AND CODIGO_FILIAL = @CODIGO_FILIAL  
          AND CRO = @CRO  
          AND CRZ = @CRZ  
          
         -- #16# Início  
         --BEGIN TRY--#4#  
         ----Procura o próximo sequencial  
         -- SELECT @INTSEQBCX = ISNULL(MAX(ID_XML),0) + 1 FROM DBO.BLOCOX_XML BCX (NOLOCK) WHERE BCX.CODIGO_FILIAL = @CODIGO_FILIAL-- #4#  
         --END TRY--#4#  
          
         --BEGIN CATCH--#4#  
         -- SELECT @ERRORMESSAGE = ERROR_MESSAGE(),@ERRORSEVERITY = ERROR_SEVERITY(),@ERRORSTATE = ERROR_STATE()--#4#  
         -- -- Se for Arithmetic overflow não grava.  
         -- RAISERROR (@ERRORMESSAGE, @ERRORSEVERITY,@ERRORSTATE)--#4#  
           
         -- RETURN--#4#  
         --END CATCH--#4#  
  
         INSERT INTO DBO.LJ_BLOCOX_XML(ID_BLOCOX, CODIGO_FILIAL, XML_ARQUIVO, DATA_PARA_TRANSFERENCIA)--#4#  
          VALUES(@ID_BLOCOX, @CODIGO_FILIAL, @REDUCAOZ_XML_REPLACE, GETDATE())--#4#  
         -- #16# Fim  
        END  
      END  
       
     /*Verifica se o xml foi inserido na tabela abaixo e altera a situação da tabela DBO.LJ_BLOCOX_CONTROLE_GERA_XML */ -- #16#  
     SELECT @XML_GERADO = COUNT(ID_BLOCOX)  
     FROM DBO.LJ_BLOCOX_XML -- #16#  
     WHERE ID_BLOCOX = @ID_BLOCOX  
       
     IF @XML_GERADO > 0  
      BEGIN  
       UPDATE DBO.LJ_BLOCOX_CONTROLE_GERA_XML  SET SITUACAO = 2, DATA_PARA_TRANSFERENCIA = GETDATE() WHERE ID_BLOCOX = @ID_BLOCOX -- #8# -- #16#  
      END   
    END            -- #14#  
    ELSE           -- #14#  
    BEGIN           -- #14#  
     IF (@RETORNO_ERRO = '')      -- #14#  
      SET @RETORNO_ERRO = 'OK'    -- #14#  
     SET @RETORNO_VALIDACAO =  @RETORNO_ERRO  -- #14#  
    END            -- #14#  
    /* Situação de envio:  
     1. A gerar (a geração do arquivo está pendente);  
     2. A transmitir (o arquivo está gerado, mas ainda não foi enviado);  
     3. Transmissão solicitada (o arquivo está sendo enviado, porém, ainda com a situação pendente por a transmissão não tem sido concretizada);  
     4. Transmitido para a SEFAZ (temporariamente não pendente, pois será analisado pela SEFAZ);  
     5. Rejeitado pela SEFAZ (volta ao estado pendente, necessitando ser regerado);  
     6. Aceito pela SEFAZ (definitivamente não pendente);  
     */  
  
   END  
  END  
   
END
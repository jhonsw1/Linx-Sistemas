IF NOT EXISTS 
(
   SELECT
      1 
   FROM
      INFORMATION_SCHEMA.COLUMNS 
   WHERE
      TABLE_NAME = 'HR_PROMOCAO_CLIENTE' 
      AND COLUMN_NAME = 'TICKET'
)
BEGIN
   ALTER TABLE [dbo].[HR_PROMOCAO_CLIENTE] ADD TICKET VARCHAR(8) NULL 
END

IF NOT EXISTS 
(
   SELECT
      1 
   FROM
      INFORMATION_SCHEMA.COLUMNS 
   WHERE
      TABLE_NAME = 'HR_PROMOCAO_CLIENTE' 
      AND COLUMN_NAME = 'CODIGO_FILIAL'
)
BEGIN
   ALTER TABLE [dbo].[HR_PROMOCAO_CLIENTE] ADD CODIGO_FILIAL CHAR(6) NULL 
END

IF NOT EXISTS 
(
   SELECT
      1 
   FROM
      INFORMATION_SCHEMA.COLUMNS 
   WHERE
      TABLE_NAME = 'HR_PROMOCAO_CLIENTE' 
      AND COLUMN_NAME = 'DATA_VENDA'
)
BEGIN
   ALTER TABLE [dbo].[HR_PROMOCAO_CLIENTE] ADD DATA_VENDA DATETIME NULL 
END

-----------------------------------------------------------------------------------

IF NOT EXISTS 
(
   SELECT
      1 
   FROM
      INFORMATION_SCHEMA.COLUMNS 
   WHERE
      TABLE_NAME = 'HR_VENDA_PROMOCAO' 
      AND COLUMN_NAME = 'ID_TIPO_PROMOCAO'
)
BEGIN
   ALTER TABLE [dbo].[HR_VENDA_PROMOCAO] ADD ID_TIPO_PROMOCAO VARCHAR (MAX) NULL 
END

IF NOT EXISTS 
(
   SELECT
      1 
   FROM
      INFORMATION_SCHEMA.COLUMNS 
   WHERE
      TABLE_NAME = 'HR_VENDA_PROMOCAO' 
      AND COLUMN_NAME = 'TEXTO_CAMPANHA'
)
BEGIN
   ALTER TABLE [dbo].[HR_VENDA_PROMOCAO] ADD TEXTO_CAMPANHA VARCHAR (MAX) NULL 
END

IF NOT EXISTS 
(
    SELECT 
        TOP 1 1 
    FROM
         SYS.COLUMNS
    WHERE
        NAME = 'STATUS_VOUCHER' 
        AND object_id = object_id('HR_VENDA_PROMOCAO')
)
BEGIN
ALTER TABLE [dbo].[HR_VENDA_PROMOCAO] ADD STATUS_VOUCHER INT NOT NULL CONSTRAINT [DF_HR_VENDA_PROMOCAO__STATUS_VOUCHER] DEFAULT(0)
END

-------------------------------------------------------------------------------------

IF EXISTS 
(
SELECT 1 FROM SYS.views WHERE NAME = 'PaymentDetails'
)
BEGIN
	DROP VIEW [dbo].[PaymentDetails]
END
BEGIN
EXEC
(
'
CREATE VIEW [dbo].[PaymentDetails]  
AS  
SELECT   
 A.CODIGO_FILIAL, A.TERMINAL, A.LANCAMENTO_CAIXA, A.DATA, A.PERIODO_FECHAMENTO, A.NUMERO_CUPOM_FISCAL, 
 A.CAIXA_VENDEDOR, F.VENDEDOR_APELIDO, F.NOME_VENDEDOR AS NOME_CAIXA, A.COD_FORMA_PGTO, J.FORMA_PGTO, A.TOTAL_VENDA, B.QTDE_TOTAL,  
 B.VENDEDOR, G.VENDEDOR_APELIDO AS NOME_VENDEDOR, B.TICKET, B.CODIGO_CLIENTE, H.CLIENTE_VAREJO,  
 B.OPERACAO_VENDA, I.DESC_OPERACAO_VENDA, C.PARCELA, C.TIPO_PGTO, D.DESC_TIPO_PGTO, C.CODIGO_ADMINISTRADORA,   
 E.ADMINISTRADORA, C.VENCIMENTO, C.BANCO, C.AGENCIA, C.CONTA_CORRENTE, C.NUMERO_TITULO, C.MOEDA, C.VALOR,   
   CASE WHEN ISNULL(C.PARCELAS_CARTAO,0)< 2 THEN ''VISTA'' ELSE ''PARCELADO'' END AS PARCELA_CARTAO,
 A.VENDA_FINALIZADA
FROM  
 LOJA_VENDA_PGTO A  
 INNER JOIN LOJA_VENDA B ON A.CODIGO_FILIAL = B.CODIGO_FILIAL_PGTO AND A.TERMINAL = B.TERMINAL_PGTO AND A.LANCAMENTO_CAIXA = B.LANCAMENTO_CAIXA  
 INNER JOIN LOJA_VENDA_PARCELAS C ON A.CODIGO_FILIAL = C.CODIGO_FILIAL AND A.TERMINAL = C.TERMINAL AND A.LANCAMENTO_CAIXA = C.LANCAMENTO_CAIXA  
 INNER JOIN TIPOS_PGTO D ON D.TIPO_PGTO = C.TIPO_PGTO  
 LEFT JOIN ADMINISTRADORAS_CARTAO E ON E.CODIGO_ADMINISTRADORA = C.CODIGO_ADMINISTRADORA  
 INNER JOIN LOJA_VENDEDORES F ON A.CAIXA_VENDEDOR = F.VENDEDOR  
 INNER JOIN LOJA_VENDEDORES G ON B.VENDEDOR = G.VENDEDOR  
 LEFT JOIN CLIENTES_VAREJO H ON B.CODIGO_CLIENTE = H.CODIGO_CLIENTE  
 INNER JOIN LOJA_OPERACOES_VENDA I ON B.OPERACAO_VENDA = I.OPERACAO_VENDA  
 INNER JOIN LOJA_FORMAS_PGTO J ON A.COD_FORMA_PGTO = J.COD_FORMA_PGTO  
 INNER JOIN LOJAS_VAREJO K ON A.CODIGO_FILIAL = K.CODIGO_FILIAL  
WHERE  
 A.VALOR_CANCELADO = 0 AND B.TOTAL_QTDE_CANCELADA = 0 AND B.VALOR_CANCELADO = 0
'
)
END

--------------------------------------------------------------------------------------

IF EXISTS 
(
SELECT 1 FROM SYS.views WHERE NAME = 'SaleExchanges'
)
BEGIN
	DROP VIEW [dbo].[SaleExchanges]
END
	BEGIN
EXEC
(
'
CREATE VIEW [dbo].[SaleExchanges] AS 
SELECT   
 A.CODIGO_FILIAL, A.TERMINAL, A.LANCAMENTO_CAIXA, A.DATA, A.PERIODO_FECHAMENTO, A.NUMERO_CUPOM_FISCAL,   
 A.CAIXA_VENDEDOR, D.VENDEDOR_APELIDO, A.TOTAL_VENDA, B.QTDE_TOTAL, B.QTDE_TROCA_TOTAL, B.VENDEDOR, B.TICKET,   
 F.VENDEDOR_APELIDO AS NOME_VENDEDOR, C.ITEM, C.PRODUTO, C.COR_PRODUTO, C.TAMANHO, C.QTDE, C.PRECO_LIQUIDO, E.DESC_PROD_NF, C.ITEM_EXCLUIDO,
 A.VENDA_FINALIZADA
FROM   
 LOJA_VENDA_PGTO A   
 INNER JOIN LOJA_VENDA B ON A.CODIGO_FILIAL = B.CODIGO_FILIAL_PGTO AND A.TERMINAL = B.TERMINAL_PGTO AND A.LANCAMENTO_CAIXA = B.LANCAMENTO_CAIXA   
 INNER JOIN LOJA_VENDA_TROCA C ON B.CODIGO_FILIAL = C.CODIGO_FILIAL AND B.TICKET = C.TICKET AND B.DATA_VENDA = C.DATA_VENDA   
 INNER JOIN LOJA_VENDEDORES D ON A.CAIXA_VENDEDOR = D.VENDEDOR   
 INNER JOIN PRODUTOS E ON C.PRODUTO = E.PRODUTO   
 INNER JOIN LOJA_VENDEDORES F ON B.VENDEDOR = F.VENDEDOR  
WHERE  
 A.VALOR_CANCELADO = 0 AND B.TOTAL_QTDE_CANCELADA = 0 AND B.VALOR_CANCELADO = 0  
'
)
END

--------------------------------------------------------------------------------------

IF EXISTS 
(
SELECT 1 FROM SYS.views WHERE NAME = 'SaleCancelProducts'
)
BEGIN
	DROP VIEW [dbo].[SaleCancelProducts]
END
	BEGIN
EXEC
(
'
CREATE VIEW SaleCancelProducts AS
SELECT 
	A.CODIGO_FILIAL, A.TERMINAL, A.LANCAMENTO_CAIXA, A.DATA, A.PERIODO_FECHAMENTO, A.NUMERO_CUPOM_FISCAL, 
	A.CAIXA_VENDEDOR, D.VENDEDOR_APELIDO, A.TOTAL_VENDA, B.QTDE_TOTAL, B.QTDE_TROCA_TOTAL, B.VENDEDOR, B.TICKET, 
	F.VENDEDOR_APELIDO AS NOME_VENDEDOR, C.ITEM, C.PRODUTO, C.COR_PRODUTO, C.TAMANHO, C.QTDE_CANCELADA, C.PRECO_LIQUIDO, E.DESC_PROD_NF, C.ITEM_EXCLUIDO,
	A.VENDA_FINALIZADA
FROM 
	LOJA_VENDA_PGTO A 
	INNER JOIN LOJA_VENDA B ON A.CODIGO_FILIAL = B.CODIGO_FILIAL_PGTO AND A.TERMINAL = B.TERMINAL_PGTO AND A.LANCAMENTO_CAIXA = B.LANCAMENTO_CAIXA 
	INNER JOIN LOJA_VENDA_PRODUTO C ON B.CODIGO_FILIAL = C.CODIGO_FILIAL AND B.TICKET = C.TICKET AND B.DATA_VENDA = C.DATA_VENDA 
	INNER JOIN LOJA_VENDEDORES D ON A.CAIXA_VENDEDOR = D.VENDEDOR 
	INNER JOIN PRODUTOS E ON C.PRODUTO = E.PRODUTO 
	INNER JOIN LOJA_VENDEDORES F ON B.VENDEDOR = F.VENDEDOR
WHERE
	C.QTDE_CANCELADA != 0
'
)
END

-------------------------------------------------------------------------------------

IF EXISTS 
(
SELECT 1 FROM SYS.views WHERE NAME = 'HR_PAYMENTDETAILS'
)
BEGIN
	DROP VIEW [dbo].[HR_PAYMENTDETAILS]
END
	BEGIN
EXEC
(
'
CREATE VIEW HR_PAYMENTDETAILS AS
SELECT
 A.CODIGO_FILIAL, A.TERMINAL, A.LANCAMENTO_CAIXA, A.DATA, A.PERIODO_FECHAMENTO, A.NUMERO_CUPOM_FISCAL,
 A.CAIXA_VENDEDOR, F.VENDEDOR_APELIDO, F.NOME_VENDEDOR AS NOME_CAIXA, A.COD_FORMA_PGTO, J.FORMA_PGTO, A.TOTAL_VENDA, B.QTDE_TOTAL,
 B.VENDEDOR, G.VENDEDOR_APELIDO AS NOME_VENDEDOR, B.TICKET, B.CODIGO_CLIENTE, H.CLIENTE_VAREJO,
 B.OPERACAO_VENDA, I.DESC_OPERACAO_VENDA, C.PARCELA, C.TIPO_PGTO, D.DESC_TIPO_PGTO, C.CODIGO_ADMINISTRADORA,
 E.ADMINISTRADORA, C.VENCIMENTO, C.BANCO, C.AGENCIA, C.CONTA_CORRENTE, C.NUMERO_TITULO, C.MOEDA, C.VALOR,
 CASE WHEN ISNULL(C.PARCELAS_CARTAO,0)< 2 THEN ''VISTA'' ELSE ''PARCELADO'' END AS PARCELA_CARTAO,
 A.VENDA_FINALIZADA
FROM
 LOJA_VENDA_PGTO A
 INNER JOIN LOJA_VENDA B ON A.CODIGO_FILIAL = B.CODIGO_FILIAL_PGTO AND A.TERMINAL = B.TERMINAL_PGTO AND A.LANCAMENTO_CAIXA = B.LANCAMENTO_CAIXA
 INNER JOIN LOJA_VENDA_PARCELAS C ON A.CODIGO_FILIAL = C.CODIGO_FILIAL AND A.TERMINAL = C.TERMINAL AND A.LANCAMENTO_CAIXA = C.LANCAMENTO_CAIXA
 INNER JOIN TIPOS_PGTO D ON D.TIPO_PGTO = C.TIPO_PGTO
 LEFT JOIN ADMINISTRADORAS_CARTAO E ON E.CODIGO_ADMINISTRADORA = C.CODIGO_ADMINISTRADORA
 INNER JOIN LOJA_VENDEDORES F ON A.CAIXA_VENDEDOR = F.VENDEDOR
 INNER JOIN LOJA_VENDEDORES G ON B.VENDEDOR = G.VENDEDOR
 LEFT JOIN CLIENTES_VAREJO H ON B.CODIGO_CLIENTE = H.CODIGO_CLIENTE
 INNER JOIN LOJA_OPERACOES_VENDA I ON B.OPERACAO_VENDA = I.OPERACAO_VENDA
 INNER JOIN LOJA_FORMAS_PGTO J ON A.COD_FORMA_PGTO = J.COD_FORMA_PGTO
 INNER JOIN LOJAS_VAREJO K ON A.CODIGO_FILIAL = K.CODIGO_FILIAL
WHERE
 A.VALOR_CANCELADO = 0 AND B.TOTAL_QTDE_CANCELADA = 0 AND B.VALOR_CANCELADO = 0
'
)
END

-------------------------------------------------------------------------------------
--- Ajuste para cliente não vir com DATA_PARA_TRANSFERENCIA nula quando modificado no Linx Mobile

EXEC
('ALTER trigger [dbo].[LXU_CLIENTES_VAREJO] on [dbo].[CLIENTES_VAREJO] for UPDATE NOT FOR REPLICATION as

-- 05/07/2022 - Hering - Mandicaju - Alteração para DATA_PARA_TRANSFERENCIA não ficar nula, originada na alteração de clientes no Mobile #3#
-- 12/02/2014 - DIEGO CAMARGO - TP5054269 - #2# - Passou a inserir na tabela CLIENTES_VAREJO_LOG
-- 08/05/2013 - jorge.damasco - TP3635987 - #1# - AtualizaÃ§Ã£o do campo LX_STATUS_CLIENTE para o ETL poder atualizar

/* UPDATE trigger on CLIENTES_VAREJO */
begin
  declare  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCODIGO_CLIENTE varchar(14),
           @delCODIGO_CLIENTE varchar(14),
           @errno   int,
           @errmsg  varchar(255),
		   @TipoVarejo varchar(25)

  select @numrows = @@rowcount
/* CLIENTE_VAR_CONCEITOS CONCEITO CLIENTES_VAREJO ON CHILD UPDATE RESTRICT */
  if
    update(CONCEITO)
  begin
    select @nullcnt = 0
    select @validcnt = count(*)
      from inserted,CLIENTE_VAR_CONCEITOS
     where
           inserted.CONCEITO = CLIENTE_VAR_CONCEITOS.CONCEITO
    select @nullcnt = count(*) from inserted where
      inserted.CONCEITO is null
    if @validcnt + @nullcnt != @numrows
    begin
      select @errno  = 30007,
             @errmsg = ''ImpossÃ­vel atualizar  "CLIENTES_VAREJO" porque "CLIENTE_VAR_CONCEITOS" nÃ£o existe.''
      goto error
    end
  end

/* CLIENTE_VAR_BLOQ CLIENTE_VAL_BLOQUEIO CLIENTES_VAREJO ON CHILD UPDATE RESTRICT */
  if
    update(TIPO_BLOQUEIO)
  begin
    select @nullcnt = 0
    select @validcnt = count(*)
      from inserted,CLIENTE_VAR_BLOQ
     where
           inserted.TIPO_BLOQUEIO = CLIENTE_VAR_BLOQ.TIPO_BLOQUEIO
    select @nullcnt = count(*) from inserted where
      inserted.TIPO_BLOQUEIO is null
    if @validcnt + @nullcnt != @numrows
    begin
      select @errno  = 30007,
             @errmsg = ''ImpossÃ­vel atualizar  "CLIENTES_VAREJO" porque "CLIENTE_VAR_BLOQ" nÃ£o existe.''
      goto error
    end
  end

/* CLIENTE_VAR_TIPOS CLIENTE_VAR_TIPOS CLIENTES_VAREJO ON CHILD UPDATE RESTRICT */

select @TipoVarejo =  rtrim(ltrim(TIPO_VAREJO)) from inserted 
  if
    update(TIPO_VAREJO) and rtrim(ltrim(@TipoVarejo)) < >''BLOQUEADO''
  begin
    select @nullcnt = 0
    select @validcnt = count(*)
      from inserted,CLIENTE_VAR_TIPOS
     where
           (inserted.TIPO_VAREJO = CLIENTE_VAR_TIPOS.TIPO_VAREJO)
    select @nullcnt = count(*) from inserted where
      inserted.TIPO_VAREJO is null
if @validcnt + @nullcnt != @numrows
    begin
      select @errno  = 30007,
             @errmsg = ''ImpossÃ­vel atualizar  "CLIENTES_VAREJO" porque "CLIENTE_VAR_TIPOS" nÃ£o existe.''
      goto error
    end
  end

/* CLIENTE_VAR_PONT CLIENTE_VAR_PONT CLIENTES_VAREJO ON CHILD UPDATE RESTRICT */
  if
    update(PONTUALIDADE)
  begin
    select @nullcnt = 0
    select @validcnt = count(*)
      from inserted,CLIENTE_VAR_PONT
     where
           inserted.PONTUALIDADE = CLIENTE_VAR_PONT.PONTUALIDADE
    select @nullcnt = count(*) from inserted where
      inserted.PONTUALIDADE is null
    if @validcnt + @nullcnt != @numrows
    begin
      select @errno  = 30007,
             @errmsg = ''ImpossÃ­vel atualizar  "CLIENTES_VAREJO" porque "CLIENTE_VAR_PONT" nÃ£o existe.''
      goto error
    end
  end

/* FILIAIS FILIAIS CLIENTES_VAREJO ON CHILD UPDATE RESTRICT */
  if
    update(FILIAL)
  begin
    select @nullcnt = 0
    select @validcnt = count(*)
      from inserted,FILIAIS
     where
           inserted.FILIAL = FILIAIS.FILIAL
    
    if @validcnt + @nullcnt != @numrows
    begin
      select @errno  = 30007,
             @errmsg = ''ImpossÃ­vel atualizar  "CLIENTES_VAREJO" porque "FILIAIS" nÃ£o existe.''
      goto error
    end
  end

/* LOJA_VENDEDORES VENDEDOR CLIENTES_VAREJO ON CHILD UPDATE RESTRICT */
  if 
     update(VENDEDOR)
  begin
    select @nullcnt = 0
    select @validcnt = count(*)
      from inserted,LOJA_VENDEDORES
     where 
           inserted.VENDEDOR = LOJA_VENDEDORES.VENDEDOR
    select @nullcnt = count(*) from inserted where
      inserted.VENDEDOR is null
    if @validcnt + @nullcnt != @numrows
    begin
      select @errno  = 30007,
             @errmsg = ''ImpossÃ­vel atualizar "CLIENTES_VAREJO" porque "LOJA_VENDEDORES" nÃ£o existe.''
      goto error
    end
  end

/* CLIENTES_VAREJO R/1580 CLIENTE_VAR_RELACIONADO ON PARENT UPDATE CASCADE */
  IF 
     update(CODIGO_CLIENTE)
  BEGIN
    DECLARE CLIENTES_VAREJO1888 CURSOR FOR SELECT CODIGO_CLIENTE FROM INSERTED
    DECLARE CLIENTES_VAREJO1109 CURSOR FOR SELECT CODIGO_CLIENTE FROM DELETED
    OPEN CLIENTES_VAREJO1888
    OPEN CLIENTES_VAREJO1109
    FETCH NEXT FROM CLIENTES_VAREJO1888 INTO @insCODIGO_CLIENTE
    FETCH NEXT FROM CLIENTES_VAREJO1109 INTO @delCODIGO_CLIENTE
    IF @@rowcount >= 0
    BEGIN
      WHILE @@fetch_status = 0
      BEGIN
        UPDATE CLIENTE_VAR_RELACIONADO
           SET CLIENTE_VAR_RELACIONADO.CODIGO_CLIENTE_RELACIONADO=@insCODIGO_CLIENTE
   WHERE CLIENTE_VAR_RELACIONADO.CODIGO_CLIENTE_RELACIONADO = @delCODIGO_CLIENTE

        FETCH NEXT FROM CLIENTES_VAREJO1888 INTO @insCODIGO_CLIENTE
        FETCH NEXT FROM CLIENTES_VAREJO1109 INTO @delCODIGO_CLIENTE
      END
    END
    CLOSE CLIENTES_VAREJO1888
    CLOSE CLIENTES_VAREJO1109
    DEALLOCATE CLIENTES_VAREJO1888
    DEALLOCATE CLIENTES_VAREJO1109
  END

/* CLIENTES_VAREJO R/1579 CLIENTE_VAR_RELACIONADO ON PARENT UPDATE CASCADE */
  IF 
     update(CODIGO_CLIENTE)
  BEGIN
    DECLARE CLIENTES_VAREJO1887 CURSOR FOR SELECT CODIGO_CLIENTE FROM INSERTED
    DECLARE CLIENTES_VAREJO1109 CURSOR FOR SELECT CODIGO_CLIENTE FROM DELETED
    OPEN CLIENTES_VAREJO1887
    OPEN CLIENTES_VAREJO1109
    FETCH NEXT FROM CLIENTES_VAREJO1887 INTO @insCODIGO_CLIENTE
    FETCH NEXT FROM CLIENTES_VAREJO1109 INTO @delCODIGO_CLIENTE
    IF @@rowcount >= 0
    BEGIN
      WHILE @@fetch_status = 0
      BEGIN
        UPDATE CLIENTE_VAR_RELACIONADO
           SET CLIENTE_VAR_RELACIONADO.CODIGO_CLIENTE=@insCODIGO_CLIENTE
         WHERE CLIENTE_VAR_RELACIONADO.CODIGO_CLIENTE = @delCODIGO_CLIENTE

        FETCH NEXT FROM CLIENTES_VAREJO1887 INTO @insCODIGO_CLIENTE
        FETCH NEXT FROM CLIENTES_VAREJO1109 INTO @delCODIGO_CLIENTE
      END
    END
    CLOSE CLIENTES_VAREJO1887
    CLOSE CLIENTES_VAREJO1109
    DEALLOCATE CLIENTES_VAREJO1887
    DEALLOCATE CLIENTES_VAREJO1109
  END

/* CLIENTES_VAREJO R/1556 CLIENTE_VAR_SAC ON PARENT UPDATE CASCADE */
  IF 
     update(CODIGO_CLIENTE)
  BEGIN
    DECLARE CLIENTES_VAREJO1886 CURSOR FOR SELECT CODIGO_CLIENTE FROM INSERTED
    DECLARE CLIENTES_VAREJO1109 CURSOR FOR SELECT CODIGO_CLIENTE FROM DELETED
    OPEN CLIENTES_VAREJO1886
    OPEN CLIENTES_VAREJO1109
    FETCH NEXT FROM CLIENTES_VAREJO1886 INTO @insCODIGO_CLIENTE
    FETCH NEXT FROM CLIENTES_VAREJO1109 INTO @delCODIGO_CLIENTE
    IF @@rowcount >= 0
    BEGIN
      WHILE @@fetch_status = 0
      BEGIN
        UPDATE CLIENTE_VAR_SAC
           SET CLIENTE_VAR_SAC.CODIGO_CLIENTE=@insCODIGO_CLIENTE
         WHERE CLIENTE_VAR_SAC.CODIGO_CLIENTE = @delCODIGO_CLIENTE

        FETCH NEXT FROM CLIENTES_VAREJO1886 INTO @insCODIGO_CLIENTE
        FETCH NEXT FROM CLIENTES_VAREJO1109 INTO @delCODIGO_CLIENTE
      END
    END
    CLOSE CLIENTES_VAREJO1886
    CLOSE CLIENTES_VAREJO1109
    DEALLOCATE CLIENTES_VAREJO1886
    DEALLOCATE CLIENTES_VAREJO1109
  END

/* CLIENTES_VAREJO R/1395 LOJA_RESERVA ON PARENT UPDATE CASCADE */
  IF 
     update(CODIGO_CLIENTE)
  BEGIN
    DECLARE CLIENTES_VAREJO1885 CURSOR FOR SELECT CODIGO_CLIENTE FROM INSERTED
    DECLARE CLIENTES_VAREJO1109 CURSOR FOR SELECT CODIGO_CLIENTE FROM DELETED
    OPEN CLIENTES_VAREJO1885
    OPEN CLIENTES_VAREJO1109
    FETCH NEXT FROM CLIENTES_VAREJO1885 INTO @insCODIGO_CLIENTE
    FETCH NEXT FROM CLIENTES_VAREJO1109 INTO @delCODIGO_CLIENTE
    IF @@rowcount >= 0
    BEGIN
      WHILE @@fetch_status = 0
      BEGIN
        UPDATE LOJA_RESERVA
           SET LOJA_RESERVA.CODIGO_CLIENTE=@insCODIGO_CLIENTE
         WHERE LOJA_RESERVA.CODIGO_CLIENTE = @delCODIGO_CLIENTE

        FETCH NEXT FROM CLIENTES_VAREJO1885 INTO @insCODIGO_CLIENTE
        FETCH NEXT FROM CLIENTES_VAREJO1109 INTO @delCODIGO_CLIENTE
      END
    END
    CLOSE CLIENTES_VAREJO1885
    CLOSE CLIENTES_VAREJO1109
    DEALLOCATE CLIENTES_VAREJO1885
    DEALLOCATE CLIENTES_VAREJO1109
  END

/* CLIENTES_VAREJO R/1392 LOJA_PGTO_CLIENTE ON PARENT UPDATE CASCADE */
  IF 
     update(CODIGO_CLIENTE)
  BEGIN
    DECLARE CLIENTES_VAREJO1884 CURSOR FOR SELECT CODIGO_CLIENTE FROM INSERTED
    DECLARE CLIENTES_VAREJO1109 CURSOR FOR SELECT CODIGO_CLIENTE FROM DELETED
    OPEN CLIENTES_VAREJO1884
    OPEN CLIENTES_VAREJO1109
    FETCH NEXT FROM CLIENTES_VAREJO1884 INTO @insCODIGO_CLIENTE
    FETCH NEXT FROM CLIENTES_VAREJO1109 INTO @delCODIGO_CLIENTE
    IF @@rowcount >= 0
    BEGIN
      WHILE @@fetch_status = 0
      BEGIN
  UPDATE LOJA_PGTO_CLIENTE
           SET LOJA_PGTO_CLIENTE.CODIGO_CLIENTE=@insCODIGO_CLIENTE
         WHERE LOJA_PGTO_CLIENTE.CODIGO_CLIENTE = @delCODIGO_CLIENTE

        FETCH NEXT FROM CLIENTES_VAREJO1884 INTO @insCODIGO_CLIENTE
        FETCH NEXT FROM CLIENTES_VAREJO1109 INTO @delCODIGO_CLIENTE
      END
    END
    CLOSE CLIENTES_VAREJO1884
    CLOSE CLIENTES_VAREJO1109
    DEALLOCATE CLIENTES_VAREJO1884
    DEALLOCATE CLIENTES_VAREJO1109
  END

/* CLIENTES_VAREJO clientes_varejo LOJA_VENDA ON PARENT UPDATE CASCADE */
  IF 
     update(CODIGO_CLIENTE)
  BEGIN
    DECLARE CLIENTES_VAREJO1883 CURSOR FOR SELECT CODIGO_CLIENTE FROM INSERTED
    DECLARE CLIENTES_VAREJO1109 CURSOR FOR SELECT CODIGO_CLIENTE FROM DELETED
    OPEN CLIENTES_VAREJO1883
    OPEN CLIENTES_VAREJO1109
    FETCH NEXT FROM CLIENTES_VAREJO1883 INTO @insCODIGO_CLIENTE
    FETCH NEXT FROM CLIENTES_VAREJO1109 INTO @delCODIGO_CLIENTE
    IF @@rowcount >= 0
    BEGIN
      WHILE @@fetch_status = 0
      BEGIN
        UPDATE LOJA_VENDA
           SET LOJA_VENDA.CODIGO_CLIENTE=@insCODIGO_CLIENTE
         WHERE LOJA_VENDA.CODIGO_CLIENTE = @delCODIGO_CLIENTE

        FETCH NEXT FROM CLIENTES_VAREJO1883 INTO @insCODIGO_CLIENTE
        FETCH NEXT FROM CLIENTES_VAREJO1109 INTO @delCODIGO_CLIENTE
      END
    END
    CLOSE CLIENTES_VAREJO1883
    CLOSE CLIENTES_VAREJO1109
    DEALLOCATE CLIENTES_VAREJO1883
    DEALLOCATE CLIENTES_VAREJO1109
  END
		
	    /*-- CLIENTES_VAREJO_LOG -----------------------------------------------------------------------------*/ --#2#     	   
      
      IF	UPDATE(CLIENTE_VAREJO) OR UPDATE(PF_PJ) OR UPDATE(RG_IE) OR UPDATE(CPF_CGC) OR UPDATE(TIPO_LOGRADOURO) OR UPDATE(ENDERECO) OR UPDATE(COMPLEMENTO) OR UPDATE(NUMERO) OR UPDATE(CEP) OR UPDATE(BAIRRO) OR UPDATE(CIDADE) OR			UPDATE(UF) OR UPDATE(PAIS) OR UPDATE(DDD) OR UPDATE(TELEFONE) OR UPDATE(EMAIL) 
      BEGIN 
      INSERT INTO	CLIENTES_VAREJO_LOG (DATA_ALTERACAO, CODIGO_CLIENTE, CLIENTE_VAREJO, PF_PJ, RG_IE, CPF_CGC, TIPO_LOGRADOURO, ENDERECO, COMPLEMENTO, NUMERO, CEP, BAIRRO, CIDADE, UF, PAIS, DDD, TELEFONE, EMAIL) (SELECT	GETDATE(), CODIGO_CLIENTE, CLIENTE_VAREJO, PF_PJ, RG_IE, CPF_CGC, TIPO_LOGRADOURO, ENDERECO, COMPLEMENTO, NUMERO, CEP, BAIRRO, CIDADE, UF, PAIS, DDD, TELEFONE, EMAIL FROM	DELETED) END 
      /*-----------------------------------------------------------------------------------------------------*/ --#2# 
		
       /*---LINX-ETL------------------------------------------------------------------------------------------*/  
         
       IF NOT UPDATE(LX_STATUS_CLIENTE)  
       BEGIN  
              UPDATE  CLIENTES_VAREJO   
              SET  LX_STATUS_CLIENTE  = 1, DATA_PARA_TRANSFERENCIA = inserted.DATA_PARA_TRANSFERENCIA
             FROM  CLIENTES_VAREJO, INSERTED  
              WHERE  CLIENTES_VAREJO.CODIGO_CLIENTE = INSERTED.CODIGO_CLIENTE   
       END  
       /*-----------------------------------------------------------------------------------------------------*/    
                              
       /*---LINX-UPDATE---------------------------------------------------------------------------------------*/  
         
       IF NOT UPDATE(DATA_PARA_TRANSFERENCIA)  
       BEGIN  
        UPDATE  CLIENTES_VAREJO   
        SET  DATA_PARA_TRANSFERENCIA = GETDATE()  
        FROM  CLIENTES_VAREJO, INSERTED  
        WHERE  CLIENTES_VAREJO.CODIGO_CLIENTE = INSERTED.CODIGO_CLIENTE   
         AND (INSERTED.DATA_PARA_TRANSFERENCIA IS NULL   
         OR CLIENTES_VAREJO.DATA_PARA_TRANSFERENCIA = INSERTED.DATA_PARA_TRANSFERENCIA)  
       END  
       /*-----------------------------------------------------------------------------------------------------*/  
 
-- 05/07/2022 - Hering - Mandicaju - Alteração para DATA_PARA_TRANSFERENCIA nula, originada na alteração de clientes no Mobile #3# 

 IF UPDATE (DATA_PARA_TRANSFERENCIA) AND EXISTS ( SELECT * FROM INSERTED I WHERE I.DATA_PARA_TRANSFERENCIA IS NULL)

	BEGIN
    UPDATE dbo.CLIENTES_VAREJO
    SET CLIENTES_VAREJO.DATA_PARA_TRANSFERENCIA = GETDATE()
    FROM CLIENTES_VAREJO JOIN inserted i 
        ON CLIENTES_VAREJO.CODIGO_CLIENTE = i.CODIGO_CLIENTE 
    WHERE I.DATA_PARA_TRANSFERENCIA IS NULL
	END

-- 05/07/2022 - Hering - Mandicaju - Alteração para DATA_PARA_TRANSFERENCIA nula, originada na alteração de clientes no Mobile #3#
  return
error:
    raiserror(@errmsg, 18, 1)
    rollback transaction
end')



-------------------------------------------------------------------------------------
IF EXISTS 
(
SELECT 1 FROM SYS.TRIGGERS WHERE NAME = 'TRU_HR_LOJA_VENDA'
)
BEGIN
	DROP TRIGGER [dbo].[TRU_HR_LOJA_VENDA]
END
	BEGIN
EXEC
(
'
CREATE TRIGGER [dbo].[TRU_HR_LOJA_VENDA] on [dbo].[LOJA_VENDA]  for UPDATE NOT FOR REPLICATION  as    

-- Mandicaju - 30-05-2022 - Alterada Trigger para considerar ID_TIPO_PROMOCAO 14 e 5 no DELETE
-- Mandicaju - 30-05-2022 - Alterada Trigger para abrigar campos novos no HR_PROMOCAO_CLIENTE (TICKET, CODIGO_FILIAL, DATA_VENDA)
-- Daniel 25-11-2019 Trigger criada para tratar promoção de cliente unico e exclusivo
-- Daniel 29-06-2020 Alterada Trigger para considerar também o ID_TIPO_PROMOCAO 14 - Promoção de Cupom
-- Daniel 29-09-2020 Alterada para preencher informacao de ID_TIPO_ORIGEM e ID_TIPO_MODALIDADE no LOJA_VENDA

begin    

 IF UPDATE(TICKET_IMPRESSO) OR UPDATE (DATA_HORA_CANCELAMENTO)
 BEGIN
 INSERT INTO HR_PROMOCAO_CLIENTE (ID_PROMOCAO,CPF_CLIENTE,DATA_HORA,TIPO, TICKET, CODIGO_FILIAL, DATA_VENDA)
 SELECT 
 HR_VENDA_PROMOCAO.ID_PROMOCAO,
 CLIENTES_VAREJO.CPF_CGC AS CPF_CLIENTE,
 HR_VENDA_PROMOCAO.DATA_PARA_TRANSFERENCIA AS DATA_HORA,
 TIPO =''U'',
 INSERTED.TICKET,
 INSERTED.CODIGO_FILIAL,
 INSERTED.DATA_VENDA
 FROM INSERTED
 INNER JOIN HR_VENDA_PROMOCAO
 ON HR_VENDA_PROMOCAO.CODIGO_FILIAL = INSERTED.CODIGO_FILIAL 
 AND HR_VENDA_PROMOCAO.TICKET = INSERTED.TICKET
 AND HR_VENDA_PROMOCAO.DATA_VENDA = INSERTED.DATA_VENDA
 INNER JOIN HR_PROMOCAO
 ON HR_VENDA_PROMOCAO.ID_PROMOCAO = HR_PROMOCAO.ID_PROMOCAO 
 INNER JOIN CLIENTES_VAREJO
 ON INSERTED.CODIGO_CLIENTE = CLIENTES_VAREJO.CODIGO_CLIENTE
 WHERE TICKET_IMPRESSO =1 
 AND DATA_HORA_CANCELAMENTO IS NULL 
 AND HR_PROMOCAO.ID_TIPO_PROMOCAO IN (''5'',''14'')
 AND NOT EXISTS(SELECT top 1 1 FROM HR_PROMOCAO_CLIENTE x WHERE x.TIPO = ''U'' and x.cpf_cliente = CLIENTES_VAREJO.CPF_CGC and x.id_promocao = HR_PROMOCAO.ID_PROMOCAO)

 DELETE HR_PROMOCAO_CLIENTE
 FROM INSERTED
 INNER JOIN HR_VENDA_PROMOCAO
 ON HR_VENDA_PROMOCAO.CODIGO_FILIAL = INSERTED.CODIGO_FILIAL 
 AND HR_VENDA_PROMOCAO.TICKET = INSERTED.TICKET
 AND HR_VENDA_PROMOCAO.DATA_VENDA = INSERTED.DATA_VENDA
 INNER JOIN HR_PROMOCAO
 ON HR_VENDA_PROMOCAO.ID_PROMOCAO = HR_PROMOCAO.ID_PROMOCAO 
 INNER JOIN CLIENTES_VAREJO
 ON INSERTED.CODIGO_CLIENTE = CLIENTES_VAREJO.CODIGO_CLIENTE
 INNER JOIN HR_PROMOCAO_CLIENTE
 ON  HR_PROMOCAO.ID_PROMOCAO = HR_PROMOCAO_CLIENTE.ID_PROMOCAO AND CLIENTES_VAREJO.CPF_CGC = HR_PROMOCAO_CLIENTE.CPF_CLIENTE
 WHERE DATA_HORA_CANCELAMENTO IS NOT NULL AND HR_PROMOCAO.ID_TIPO_PROMOCAO IN (''5'',''14'',''9'') AND HR_PROMOCAO_CLIENTE.TIPO = ''U''
 AND ((HR_PROMOCAO_CLIENTE.DATA_VENDA IS NULL AND HR_PROMOCAO_CLIENTE.CODIGO_FILIAL IS NULL AND HR_PROMOCAO_CLIENTE.TICKET IS NULL)
 OR (HR_PROMOCAO_CLIENTE.TICKET = INSERTED.TICKET
	AND HR_PROMOCAO_CLIENTE.CODIGO_FILIAL = INSERTED.CODIGO_FILIAL 
	AND HR_PROMOCAO_CLIENTE.DATA_VENDA = INSERTED.DATA_VENDA)
 )

 if exists ( SELECT 1 FROM INSERTED A
  INNER JOIN LOJA_PEDIDO_VENDA B
  ON A.CODIGO_FILIAL = B.CODIGO_FILIAL_ORIGEM AND A.TICKET = b.TICKET
  INNER JOIN LOJA_PEDIDO C
  ON A.CODIGO_FILIAL = C.CODIGO_FILIAL_ORIGEM AND B.PEDIDO = C.PEDIDO 
  WHERE C.TIPO_PEDIDO =''27'' ) 
   BEGIN 
  UPDATE B SET ID_TIPO_ORIGEM = 1 FROM INSERTED A
  INNER JOIN LOJA_VENDA B
  ON A.TICKET = B.TICKET AND A.DATA_VENDA = B.DATA_VENDA AND A.CODIGO_FILIAL = B.CODIGO_FILIAL
   END 

  if exists ( SELECT 1 from INSERTED a 
  inner join loja_venda_pgto b
  on a.CODIGO_FILIAL = b.CODIGO_FILIAL and a.LANCAMENTO_CAIXA = b.LANCAMENTO_CAIXA and a.TERMINAL = b.TERMINAL
  inner join LOJA_VENDA_PARCELAS c
  on a.CODIGO_FILIAL = c.CODIGO_FILIAL and a.LANCAMENTO_CAIXA = c.LANCAMENTO_CAIXA and a.TERMINAL = c.TERMINAL
  WHERE B.COD_FORMA_PGTO IN(''ZB'',''ZD'',''ZE'',''ZG'',''ZH'',''ZL'',''ZM'',''ZO'',''ZT'') ) 
   BEGIN 
  UPDATE B SET id_tipo_modalidade = 1 FROM INSERTED A
  INNER JOIN LOJA_VENDA B
  ON A.TICKET = B.TICKET AND A.DATA_VENDA = B.DATA_VENDA AND A.CODIGO_FILIAL = B.CODIGO_FILIAL
   END       
  
  if exists ( SELECT 1 from INSERTED a 
  inner join loja_venda_pgto b
  on a.CODIGO_FILIAL = b.CODIGO_FILIAL and a.LANCAMENTO_CAIXA = b.LANCAMENTO_CAIXA and a.TERMINAL = b.TERMINAL
  inner join LOJA_VENDA_PARCELAS c
  on a.CODIGO_FILIAL = c.CODIGO_FILIAL and a.LANCAMENTO_CAIXA = c.LANCAMENTO_CAIXA and a.TERMINAL = c.TERMINAL
  WHERE c.TIPO_PGTO IN(''B'') ) 
   BEGIN 
  UPDATE B SET id_tipo_modalidade = 3 FROM INSERTED A
  INNER JOIN LOJA_VENDA B
  ON A.TICKET = B.TICKET AND A.DATA_VENDA = B.DATA_VENDA AND A.CODIGO_FILIAL = B.CODIGO_FILIAL
   END 

   if not exists ( SELECT 1 from INSERTED a 
  inner join loja_venda_pgto b
  on a.CODIGO_FILIAL = b.CODIGO_FILIAL and a.LANCAMENTO_CAIXA = b.LANCAMENTO_CAIXA and a.TERMINAL = b.TERMINAL
  inner join LOJA_VENDA_PARCELAS c
  on a.CODIGO_FILIAL = c.CODIGO_FILIAL and a.LANCAMENTO_CAIXA = c.LANCAMENTO_CAIXA and a.TERMINAL = c.TERMINAL
  WHERE c.TIPO_PGTO IN(''B'') or B.COD_FORMA_PGTO IN(''ZB'',''ZD'',''ZE'',''ZG'',''ZH'',''ZL'',''ZM'',''ZO'',''ZT'') ) 
   BEGIN 
  UPDATE B SET id_tipo_modalidade = 2 FROM INSERTED A
  INNER JOIN LOJA_VENDA B
  ON A.TICKET = B.TICKET AND A.DATA_VENDA = B.DATA_VENDA AND A.CODIGO_FILIAL = B.CODIGO_FILIAL
   END 
     
  if exists ( SELECT 1 from INSERTED a 
  inner join loja_venda_pgto b
  on a.CODIGO_FILIAL = b.CODIGO_FILIAL and a.LANCAMENTO_CAIXA = b.LANCAMENTO_CAIXA and a.TERMINAL = b.TERMINAL
  inner join LOJA_VENDA_PARCELAS c
  on a.CODIGO_FILIAL = c.CODIGO_FILIAL and a.LANCAMENTO_CAIXA = c.LANCAMENTO_CAIXA and a.TERMINAL = c.TERMINAL
  WHERE B.COD_FORMA_PGTO IN(''CS'') ) 
   BEGIN 
  UPDATE B SET id_tipo_modalidade = 1 FROM INSERTED A
  INNER JOIN LOJA_VENDA B
  ON A.TICKET = B.TICKET AND A.DATA_VENDA = B.DATA_VENDA AND A.CODIGO_FILIAL = B.CODIGO_FILIAL
   END  

   IF exists(
   SELECT 1 FROM INSERTED A
   INNER JOIN LOJA_PEDIDO_VENDA C
   ON A.CODIGO_FILIAL = C.CODIGO_FILIAL_ORIGEM AND A.DATA_VENDA = C.DATA_VENDA AND A.TICKET = C.TICKET
   inner join loja_pedido d 
   on a.CODIGO_FILIAL = d.CODIGO_FILIAL_ORIGEM and c.PEDIDO = d.PEDIDO
   where D.LX_PEDIDO_ORIGEM =''4'')
       BEGIN 
  UPDATE B SET ID_TIPO_ORIGEM = 3 FROM INSERTED A
  INNER JOIN LOJA_VENDA B
  ON A.TICKET = B.TICKET AND A.DATA_VENDA = B.DATA_VENDA AND A.CODIGO_FILIAL = B.CODIGO_FILIAL
   END 

   IF exists(
   SELECT 1 FROM INSERTED A
   INNER JOIN LOJA_PEDIDO_VENDA C
   ON A.CODIGO_FILIAL = C.CODIGO_FILIAL_ORIGEM AND A.DATA_VENDA = C.DATA_VENDA AND A.TICKET = C.TICKET
   inner join loja_pedido d 
   on a.CODIGO_FILIAL = d.CODIGO_FILIAL_ORIGEM and c.PEDIDO = d.PEDIDO
   where D.LX_TIPO_PRE_VENDA =''1'')
       BEGIN 
  UPDATE B SET ID_TIPO_ORIGEM = 2 FROM INSERTED A
  INNER JOIN LOJA_VENDA B
  ON A.TICKET = B.TICKET AND A.DATA_VENDA = B.DATA_VENDA AND A.CODIGO_FILIAL = B.CODIGO_FILIAL
   END 

    IF exists(
   SELECT 1 FROM INSERTED A
   INNER JOIN LOJA_VENDA_SHOWROOMER C
   ON A.CODIGO_FILIAL = C.CODIGO_FILIAL AND A.TICKET = C.TICKET AND A.DATA_VENDA = C.DATA_VENDA
   INNER JOIN LOJA_PEDIDO D
   ON A.CODIGO_FILIAL = D.CODIGO_FILIAL_ORIGEM AND C.PEDIDO = D.PEDIDO
   WHERE D.LX_PEDIDO_ORIGEM IN(''3'',''5'')
   )
       BEGIN 
  UPDATE B SET ID_TIPO_ORIGEM = 2 FROM INSERTED A
  INNER JOIN LOJA_VENDA B
  ON A.TICKET = B.TICKET AND A.DATA_VENDA = B.DATA_VENDA AND A.CODIGO_FILIAL = B.CODIGO_FILIAL
   END


 END   
END
'
)
END

IF NOT EXISTS(SELECT 1 FROM PARAMETROS WHERE PARAMETRO = 'HR_SUPRIMIR_DADOS_CLIENTE') 	
BEGIN
INSERT INTO PARAMETROS(PARAMETRO,PENULT_ATUALIZACAO,VALOR_DEFAULT,ULT_ATUALIZACAO,VALOR_ATUAL,DESC_PARAMETRO,TIPO_DADO,RANGE_VALOR_ATUAL,GLOBAL,NOTA_PROGRAMADOR,ESCOPO,POR_USUARIO_OK,PERMITE_POR_EMPRESA,ENVIA_PARA_LOJA,PERMITE_POR_LOJA,PERMITE_POR_TERMINAL,PERMITE_ALTERAR_NA_LOJA,PERMITE_ALTERAR_NO_TERMINAL,ENVIA_PARA_REPRESENTANTE,PERMITE_POR_REPRESENTANTE,PERMITE_ALTERAR_NO_REPRESENTANTE,DATA_PARA_TRANSFERENCIA)  
VALUES  ('HR_SUPRIMIR_DADOS_CLIENTE','2022-06-12 00:00:00','.T.','2022-06-12 00:00:00','.T.','Suprime os dados na consulta de clientes (Transforma dados sensiveis em *******)','L','','0',Null,'0','0','0','1','1','1','1','1','0','0','0','2022-06-12 01:00:00') 
END
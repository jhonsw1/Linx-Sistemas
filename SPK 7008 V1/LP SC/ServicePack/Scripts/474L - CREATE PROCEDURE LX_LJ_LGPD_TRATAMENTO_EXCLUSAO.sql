-- POSSP-5822 - Roberto Beda - (01/07/2021) -	Correção de problema com a data prevista em função de envio ao ERP, para as tabelas LOJA_EVENTOS_LOG
--												LOJA_HISTORICO_VENDA, LOJA_PEDIDO_VENDEDOR, LOJA_PGTO_CLIENTE, LOJA_VENDA_VENDEDORES, CLIENTES_VAREJO_DOCUMENTO,
--												CLIENTES_VAREJO_LOG, LJ_ECF_AC1704_E14, LOJA_VENDEDORES e CLIENTES_VAREJO
-- POSSP-5820 - Roberto Beda - (30/06/2021) - Correção na eliminação em LOJA_CONSERTO.
-- POSSP-5817 - Roberto Beda - (30/06/2021) - Correção para eliminar LJ_ETL_REPOSITORIO quando CODIGO_CLIENTE tem branco à esquerda.
-- POSSP-5807 - Roberto Beda - (29/06/2021) - Correção para eliminar dados da tabela DADOS_CADASTRO_XML_NFE.
-- POSSP-5804 - Roberto Beda - (29/06/2021) - Correção da eliminação na tabela LJ_DOCUMENTO_ECF, que não está respeitando o parâmetro que indica se é PAF.
-- POSSP-5798 - Roberto Beda - (29/06/2021) - Correção para incluir tabelas de XML de documento fiscal e do ETL na eliminação de dados.
-- POSSP-5737 - Roberto Beda - (28/06/2021) - Eliminação e anonimização preservando dados em função de hipóteses de tratamento.
-- POSSP-5778 - Roberto Beda - (25/06/2021) - Tratamento para quando informa CODIGO_FILIAL inválido, pois essa informação é necessária para a criação do cliente fictício.
-- POSSP-5779 - Roberto Beda - (24/06/2021) - Correção do problema de FK na tabela CLIENTE_VAR_FINALIDADE
-- POSSP-5770 - Roberto Beda - (23/06/2021) - Correção para tratar coluna identity na tabela CLIENTES_VAREJO ao incluir cliente fictício
-- POSSP-5737 - Roberto Beda - (23/06/2021) - Mudança na ordem de execução - eliminação e anonimização preservando dados em função de hipóteses de tratamento (parcial)
-- POSSP-5736 - Roberto Beda - (22/06/2021) - LGPD (eliminação e anonimização com gravação de log)
-- POSSP-5698 - Gilvano Santos - (20/06/2021) - LGPD (eliminação e anonimização)
CREATE PROCEDURE LX_LJ_LGPD_TRATAMENTO_EXCLUSAO(@CODIGO_FILIAL CHAR(6), @ORIGEM_SOLICITACAO TINYINT, @ID_SOLICITACAO INT, @CPF VARCHAR(11), @CODIGO_CLIENTE VARCHAR(14), 
												@DIAS_OBRIGA_FISCAL INT, @DIAS_AUTORIZAR_NF INT, @DIAS_PEDIDO_PEND INT, @DIAS_ENVIO_ERP INT, @DIAS_CONSERTO_PEND INT,
												@TIPO_PAF TINYINT,	-- 0=não é PAF, 1=PAF-ECF, 2=PAF-NFC-e, 3=PAF-DAF
												@MSG_ERRO VARCHAR(1024) OUTPUT, @MSG_RETORNO VARCHAR(1024) OUTPUT)
AS
BEGIN	
	-- MOTIVOS: F=FISCAL, N=NOTA/CUPOM P=PEDIDO, E=ENVIO ERP, C=CONSERTO

	SET NOCOUNT ON

	DECLARE @SOLICITACAO TABLE (
		ID_SOLICITACAO INT,
		ID_SOLICITACAO_LOJA INT,
		TIPO_SOLICITACAO CHAR(1),
		DOCUMENTO VARCHAR(200),
		ID_LGPD_TIPO_DOCUMENTO INT)

	DECLARE @LIMITE TABLE (
		TIPO CHAR(1),
		DIAS INT,
		PRIMARY KEY (TIPO))

	DECLARE @RETORNO_TIPO TABLE (
		TIPO CHAR(1),
		DADOS VARCHAR(100),
		DATA_PROCESSAR DATETIME,
		DATA_LIMITE DATETIME,
		PRIMARY KEY (TIPO))

	DECLARE @LJ_ETL_REPOSITORIO_MANTER TABLE (
		ID BIGINT,
		DATA_HORA_CRIACAO DATETIME,
		MOTIVOS VARCHAR(20),
		PRIMARY KEY (ID))

	DECLARE @LJ_ETL_REPOSITORIO_MANTER_DETALHE TABLE (
		ID BIGINT,
		TIPO CHAR(1),
		DADOS VARCHAR(100),
		DATA_PROCESSAR DATETIME,
		PRIMARY KEY (ID, TIPO))

	DECLARE @LJ_DOCUMENTO_ECF_MANTER TABLE (
		CODIGO_FILIAL CHAR(6),
		ID_DOCUMENTO_ECF INT,
		NOME_CLIENTE VARCHAR(40),
		DATA_HORA_EMISSAO DATETIME,
		DATA_PARA_TRANSFERENCIA DATETIME,
		MOTIVOS VARCHAR(20),
		PRIMARY KEY (CODIGO_FILIAL, ID_DOCUMENTO_ECF))

	DECLARE @LJ_DOCUMENTO_ECF_MANTER_DETALHE TABLE (
		CODIGO_FILIAL CHAR(6),
		ID_DOCUMENTO_ECF INT,
		TIPO CHAR(1),
		DADOS VARCHAR(100),
		DATA_PROCESSAR DATETIME,
		PRIMARY KEY (CODIGO_FILIAL, ID_DOCUMENTO_ECF, TIPO))		

	DECLARE @LOJA_NOTA_FISCAL_MANTER TABLE (
		CODIGO_FILIAL CHAR(6),
		NF_NUMERO CHAR(15),
		SERIE_NF CHAR(6),
		CODIGO_CLIENTE VARCHAR(14),
		CHAVE_NFE VARCHAR(44),
		EMISSAO DATETIME,
		DATA_PARA_TRANSFERENCIA DATETIME,
		MOTIVOS VARCHAR(20),
		PRIMARY KEY (CODIGO_FILIAL, NF_NUMERO, SERIE_NF))

	DECLARE @LOJA_NOTA_FISCAL_MANTER_DETALHE TABLE (
		CODIGO_FILIAL CHAR(6),
		NF_NUMERO CHAR(15),
		SERIE_NF CHAR(6),
		TIPO CHAR(1),
		DADOS VARCHAR(100),
		DATA_PROCESSAR DATETIME,
		PRIMARY KEY (CODIGO_FILIAL, NF_NUMERO, SERIE_NF, TIPO))		

	DECLARE @LOJA_CF_SAT_MANTER TABLE (
		CODIGO_FILIAL CHAR(6),
		ID_LOJA_CF_SAT INT,
		GUID_VENDA_SAT UNIQUEIDENTIFIER,
		CODIGO_CLIENTE VARCHAR(14),
		EMISSAO DATETIME,
		DATA_PARA_TRANSFERENCIA DATETIME,
		MOTIVOS VARCHAR(20),
		PRIMARY KEY (CODIGO_FILIAL, ID_LOJA_CF_SAT))

	DECLARE @LOJA_CF_SAT_MANTER_DETALHE TABLE (
		CODIGO_FILIAL CHAR(6),
		ID_LOJA_CF_SAT INT,
		TIPO CHAR(1),
		DADOS VARCHAR(100),
		DATA_PROCESSAR DATETIME,
		PRIMARY KEY (CODIGO_FILIAL, ID_LOJA_CF_SAT, TIPO))		

	DECLARE @LOJA_VENDA_MANTER TABLE (
		CODIGO_FILIAL CHAR(6),
		TICKET CHAR(8),
		DATA_VENDA DATETIME,
		CODIGO_FILIAL_PGTO CHAR(6),
		TERMINAL_PGTO CHAR(3),
		LANCAMENTO_CAIXA CHAR(7),
		CODIGO_CLIENTE VARCHAR(14),
		DATA DATETIME,
		DATA_PARA_TRANSFERENCIA DATETIME,
		MOTIVOS VARCHAR(20),
		PRIMARY KEY (CODIGO_FILIAL, TICKET, DATA_VENDA))

	DECLARE @LOJA_VENDA_MANTER_DETALHE TABLE (
		CODIGO_FILIAL CHAR(6),
		TICKET CHAR(8),
		DATA_VENDA DATETIME,
		TIPO CHAR(1),
		DADOS VARCHAR(100),
		DATA_PROCESSAR DATETIME,
		PRIMARY KEY (CODIGO_FILIAL, TICKET, DATA_VENDA, TIPO))		

	DECLARE @LOJA_PEDIDO_MANTER TABLE (
		CODIGO_FILIAL_ORIGEM CHAR(6),
		PEDIDO INT,
		CODIGO_CLIENTE VARCHAR(14),
		DATA DATETIME,
		DATA_PARA_TRANSFERENCIA DATETIME,
		MOTIVOS VARCHAR(20),
		PRIMARY KEY (CODIGO_FILIAL_ORIGEM, PEDIDO))

	DECLARE @LOJA_PEDIDO_MANTER_DETALHE TABLE (
		CODIGO_FILIAL_ORIGEM CHAR(6),
		PEDIDO INT,
		TIPO CHAR(1),
		DADOS VARCHAR(100),
		DATA_PROCESSAR DATETIME,
		PRIMARY KEY (CODIGO_FILIAL_ORIGEM, PEDIDO, TIPO))		

	DECLARE @CLIENTES_VAREJO_MANTER TABLE (
		CODIGO_CLIENTE VARCHAR(14),
		PRIMARY KEY (CODIGO_CLIENTE))

	DECLARE @CLIENTE_VAR_ENDERECOS_MANTER TABLE (
		CODIGO_CLIENTE VARCHAR(14), 
		ITEM_ENDERECO CHAR(18),
		MOTIVOS VARCHAR(20),
		PRIMARY KEY (CODIGO_CLIENTE, ITEM_ENDERECO))

	DECLARE @LOJA_SAIDAS_MANTER TABLE (
		ROMANEIO_PRODUTO CHAR(15),
		FILIAL VARCHAR(25),
		CODIGO_CLIENTE VARCHAR(14),
		EMISSAO DATETIME,
		DATA_PARA_TRANSFERENCIA DATETIME,
		MOTIVOS VARCHAR(20),
		PRIMARY KEY (ROMANEIO_PRODUTO, FILIAL))

	DECLARE @LOJA_SAIDAS_MANTER_DETALHE TABLE (
		ROMANEIO_PRODUTO CHAR(15),
		FILIAL VARCHAR(25),
		TIPO CHAR(1),
		DADOS VARCHAR(100),
		DATA_PROCESSAR DATETIME,
		PRIMARY KEY (ROMANEIO_PRODUTO, FILIAL, TIPO))

	DECLARE @LOJA_RESERVA_MANTER TABLE (
		FILIAL VARCHAR(25),
		NUMERO_RESERVA CHAR(8),
		CODIGO_CLIENTE VARCHAR(14),
		DATA DATETIME,
		DATA_PARA_TRANSFERENCIA DATETIME,
		MOTIVOS VARCHAR(20),
		PRIMARY KEY (FILIAL, NUMERO_RESERVA))

	DECLARE @LOJA_RESERVA_MANTER_DETALHE TABLE (
		FILIAL VARCHAR(25),
		NUMERO_RESERVA CHAR(8),
		TIPO CHAR(1),
		DADOS VARCHAR(100),
		DATA_PROCESSAR DATETIME,
		PRIMARY KEY (FILIAL, NUMERO_RESERVA, TIPO))

	DECLARE @LOJA_CONSERTO_MANTER TABLE (
		PROTOCOLO INT,
		CODIGO_FILIAL CHAR(6),
		CODIGO_CLIENTE VARCHAR(14),
		DATA_PROTOCOLO DATETIME,
		DATA_PARA_TRANSFERENCIA DATETIME,
		MOTIVOS VARCHAR(20),
		PRIMARY KEY (PROTOCOLO, CODIGO_FILIAL))

	DECLARE @LOJA_CONSERTO_MANTER_DETALHE TABLE (
		PROTOCOLO INT,
		CODIGO_FILIAL CHAR(6),
		TIPO CHAR(1),
		DADOS VARCHAR(100),
		DATA_PROCESSAR DATETIME,
		PRIMARY KEY (PROTOCOLO, CODIGO_FILIAL, TIPO))
		
	DECLARE @GERAL_MANTER_DETALHE TABLE (
		ID INT IDENTITY(1,1),
		TIPO CHAR(1),
		DADOS VARCHAR(100),
		DATA_PROCESSAR DATETIME,
		PRIMARY KEY (ID))

	DECLARE @ABORTAR BIT, @CODIGO_CLIENTE_NOVO VARCHAR(14), 
			@TEXTO_OBRIG_FISCAL VARCHAR(100), @TEXTO_NF VARCHAR(100), @TEXTO_PEDIDO VARCHAR(100), @TEXTO_ENVIO VARCHAR(100), @TEXTO_CONSERTO VARCHAR(100),
			@TXTAUXILIAR VARCHAR(MAX), @CONTEXT_INFO VARBINARY(128)
	SET @ABORTAR = 0
	SET @MSG_ERRO = ''
	SET @MSG_RETORNO = ''

	SET @CODIGO_CLIENTE = RTRIM(LTRIM(@CODIGO_CLIENTE))
	SET @CODIGO_CLIENTE_NOVO = 'LXELIMINA00000'

	-- Prepara contexto para evitar que a tabela LJ_ETL_REPOSITORIO seja alimentada nos triggers
	SELECT @CONTEXT_INFO = ISNULL(CONTEXT_INFO(), 0x0)	-- Guarda contexto atual para restaurar no final.
	SET CONTEXT_INFO 0x53454D5F46494C415F45544C

	-- Datas limite para eliminação
	DECLARE @DATA_OBRIG_FISCAL DATE, @DATA_NF DATE, @DATA_PEDIDO DATE, @DATA_ENVIO DATE, @DATA_CONSERTO DATE

	SET @DATA_OBRIG_FISCAL = GETDATE()
	SET @DATA_NF = DATEADD(day, -1 * @DIAS_AUTORIZAR_NF, @DATA_OBRIG_FISCAL)
	SET @DATA_PEDIDO = DATEADD(day, -1 * @DIAS_PEDIDO_PEND, @DATA_OBRIG_FISCAL)
	SET @DATA_ENVIO = DATEADD(day, -1 * @DIAS_ENVIO_ERP, @DATA_OBRIG_FISCAL)
	SET @DATA_CONSERTO = DATEADD(day, -1 * @DIAS_CONSERTO_PEND, @DATA_OBRIG_FISCAL)
	SET @DATA_OBRIG_FISCAL = DATEADD(day, -1 * @DIAS_OBRIGA_FISCAL, @DATA_OBRIG_FISCAL)

	INSERT INTO @LIMITE VALUES ('F', @DIAS_OBRIGA_FISCAL)
	INSERT INTO @LIMITE VALUES ('N', @DIAS_AUTORIZAR_NF )
	INSERT INTO @LIMITE VALUES ('P', @DIAS_PEDIDO_PEND)
	INSERT INTO @LIMITE VALUES ('E', @DIAS_ENVIO_ERP)
	INSERT INTO @LIMITE VALUES ('C', @DIAS_CONSERTO_PEND)

	-- Inserção do cliente fictício para ser utilizado no processo de eliminação
	IF @CODIGO_CLIENTE IS NOT NULL
	BEGIN
		IF NOT EXISTS (SELECT TOP 1 1 FROM CLIENTES_VAREJO WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE_NOVO)
		BEGIN
			DECLARE @NOME_COLUNA VARCHAR(256), @TIPO_DADO VARCHAR(256), @FILIAL VARCHAR(25), @COLUNAS VARCHAR(1024), @CONTEUDOS VARCHAR(1024), @COMANDO VARCHAR(2048)
			DECLARE curColunas CURSOR FOR SELECT COLUMN_NAME, UPPER(DATA_TYPE) 
			FROM INFORMATION_SCHEMA.COLUMNS C
			INNER JOIN (SELECT c.name, c.is_identity from sys.columns c
						inner join sys.tables t
						on c.object_id = t.object_id 
						where t.name = 'CLIENTES_VAREJO'
			) I
			ON C.COLUMN_NAME = I.name
			WHERE TABLE_NAME = 'CLIENTES_VAREJO' AND I.is_identity = 0
			AND COLUMN_NAME NOT IN ('CODIGO_CLIENTE', 'CLIENTE_VAREJO', 'FILIAL', 'PF_PJ', 'DATA_PARA_TRANSFERENCIA', 'LGPD_TRATAMENTO') 
			AND COLUMN_DEFAULT IS NULL AND IS_NULLABLE = 'NO'
	
			SET @COLUNAS = ''
			SET @CONTEUDOS = ''

			SELECT @FILIAL = FILIAL FROM LOJAS_VAREJO WHERE CODIGO_FILIAL = @CODIGO_FILIAL 
			IF @FILIAL IS NULL
			BEGIN
				SET @ABORTAR = 1
				SET @MSG_ERRO = 'ERRO: O CODIGO_FILIAL = ''' + ISNULL(@CODIGO_FILIAL, 'NULL') + ''' não tem filial válida atribuída.'
				DEALLOCATE curColunas
			END

			IF @ABORTAR = 0
			BEGIN
				OPEN curColunas

				FETCH NEXT FROM curColunas INTO @NOME_COLUNA, @TIPO_DADO
				WHILE @@FETCH_STATUS = 0
				BEGIN
					SET @COLUNAS = @COLUNAS + @NOME_COLUNA + ', '
					SET @CONTEUDOS = @CONTEUDOS + CASE WHEN @TIPO_DADO LIKE '%CHAR' OR @TIPO_DADO LIKE '%TEXT' THEN 
													''''''
												ELSE 
													CASE WHEN @TIPO_DADO LIKE '%DATE%' THEN 
														'''19000101'''
													ELSE
														'0'
													END
												END	+ ', '
					FETCH NEXT FROM curColunas INTO @NOME_COLUNA, @TIPO_DADO
				END

				CLOSE curColunas
				DEALLOCATE curColunas

				IF LEN(@COLUNAS) > 0
				BEGIN
					SET @COMANDO = 'INSERT INTO CLIENTES_VAREJO (CODIGO_CLIENTE, CLIENTE_VAREJO, FILIAL, PF_PJ, DATA_PARA_TRANSFERENCIA, LGPD_TRATAMENTO, ' + LEFT(@COLUNAS, LEN(@COLUNAS+'|') - 3) + ') VALUES (''' + 
									@CODIGO_CLIENTE_NOVO + ''',''CLIENTE LGPD ELIMINACAO'', ''' + @FILIAL + ''', 1, ''19000101'', 1, ' + LEFT(@CONTEUDOS, LEN(@CONTEUDOS+'|') - 3) + ')'
	
					BEGIN TRY
						EXECUTE(@COMANDO)
					END TRY
					BEGIN CATCH
						SET @ABORTAR = 1
						SET @MSG_ERRO = 'ERRO ' + CAST(ERROR_NUMBER() AS VARCHAR) + ' ' + ERROR_MESSAGE()
					END CATCH
				END		
			END
		END
	END

	-- OBTEM DADOS DA SOLICITAÇÃO DE ORIGEM
	IF @ABORTAR = 0
	BEGIN
		IF @ORIGEM_SOLICITACAO = 1
		BEGIN
			BEGIN TRY
				INSERT INTO @SOLICITACAO 
				SELECT ID_LGPD_SOLICITACAO_LOJA, ID_LGPD_SOLICITACAO_LOJA, TIPO_SOLICITACAO, DOCUMENTO, ID_LGPD_TIPO_DOCUMENTO
				FROM LGPD_SOLICITACAO_RECEBIDA
				WHERE ID_LGPD_SOLICITACAO_LOJA = @ID_SOLICITACAO 
			END TRY
			BEGIN CATCH
				SET @ABORTAR = 1
				SET @MSG_ERRO = 'ERRO ' + CAST(ERROR_NUMBER() AS VARCHAR) + ' ' + ERROR_MESSAGE()
			END CATCH
		END
		ELSE
			IF @ORIGEM_SOLICITACAO = 2
			BEGIN
				BEGIN TRY
					INSERT INTO @SOLICITACAO 
					SELECT ID_LGPD_SOLICITACAO_PENDENTE, ID_LGPD_SOLICITACAO_LOJA, TIPO_SOLICITACAO, DOCUMENTO, ID_LGPD_TIPO_DOCUMENTO
					FROM LGPD_SOLICITACAO_PENDENTE
					WHERE ID_LGPD_SOLICITACAO_PENDENTE = @ID_SOLICITACAO 
				END TRY
				BEGIN CATCH
					SET @ABORTAR = 1
					SET @MSG_ERRO = 'ERRO ' + CAST(ERROR_NUMBER() AS VARCHAR) + ' ' + ERROR_MESSAGE()
				END CATCH
			END
	END

	-- IDENTIFICA LINHAS A MANTER NAS TABELAS, IDENTIFICÁVEIS POR CODIGO_CLIENTE
	IF @ABORTAR = 0
	BEGIN
		BEGIN TRY
			-- TABELA LJ_DOCUMENTO_ECF COM CPF INFORMADO NO CF
			INSERT INTO @LJ_DOCUMENTO_ECF_MANTER 
			SELECT	CODIGO_FILIAL, ID_DOCUMENTO_ECF, NOME_CLIENTE, DATA_HORA_EMISSAO, DATA_PARA_TRANSFERENCIA, 
					CASE WHEN DATA_HORA_EMISSAO > @DATA_OBRIG_FISCAL THEN 'F|' ELSE '' END + 
					CASE WHEN DATA_PARA_TRANSFERENCIA > @DATA_ENVIO THEN 'E|' ELSE '' END
			FROM LJ_DOCUMENTO_ECF
			WHERE	CODIGO_FILIAL = @CODIGO_FILIAL AND CPF_CNPJ_CLIENTE = @CPF 
				AND ((DATA_HORA_EMISSAO > @DATA_OBRIG_FISCAL AND @TIPO_PAF > 0) OR DATA_PARA_TRANSFERENCIA > @DATA_ENVIO)

			-- Detalhe sobre manter os dados
			INSERT INTO @LJ_DOCUMENTO_ECF_MANTER_DETALHE 
			SELECT	N.CODIGO_FILIAL, N.ID_DOCUMENTO_ECF, L.TIPO,
					CASE WHEN ISNULL(NOME_CLIENTE, '') = '' THEN 'CPF' ELSE 'CPF, NOME' END,
					CASE WHEN L.TIPO = 'E' THEN DATEADD(day, L.DIAS, N.DATA_PARA_TRANSFERENCIA) ELSE DATEADD(day, L.DIAS, N.DATA_HORA_EMISSAO) END
			FROM @LJ_DOCUMENTO_ECF_MANTER N
			INNER JOIN @LIMITE L
			ON CHARINDEX(L.TIPO, N.MOTIVOS) > 0

			-- TABELA LOJA_NOTA_FISCAL
			INSERT INTO @LOJA_NOTA_FISCAL_MANTER 
			SELECT	N.CODIGO_FILIAL, N.NF_NUMERO, N.SERIE_NF, N.CODIGO_CLIENTE, N.CHAVE_NFE,
					N.EMISSAO,
					N.DATA_PARA_TRANSFERENCIA,
					CASE WHEN N.STATUS_NFE < 5 AND N.EMISSAO > @DATA_NF THEN 'N|' ELSE '' END + 
					CASE WHEN N.EMISSAO > @DATA_OBRIG_FISCAL AND @TIPO_PAF > 0 THEN 'F|' ELSE '' END +
					CASE WHEN N.DATA_PARA_TRANSFERENCIA > @DATA_ENVIO THEN 'E|' ELSE '' END
			FROM LOJA_NOTA_FISCAL N
			INNER JOIN LOJA_VENDA_PGTO VP
			ON (N.NF_NUMERO = VP.NUMERO_FISCAL_VENDA AND N.SERIE_NF = VP.SERIE_NF_SAIDA) 
			INNER JOIN LOJA_VENDA V
			ON VP.CODIGO_FILIAL = V.CODIGO_FILIAL_PGTO AND VP.TERMINAL = V.TERMINAL_PGTO AND VP.LANCAMENTO_CAIXA = V.LANCAMENTO_CAIXA
			WHERE	N.CODIGO_FILIAL = @CODIGO_FILIAL 
				AND	((N.STATUS_NFE < 5 AND N.EMISSAO > @DATA_NF) OR (N.EMISSAO > @DATA_OBRIG_FISCAL AND @TIPO_PAF > 0) OR N.DATA_PARA_TRANSFERENCIA > @DATA_ENVIO)
				AND (N.CODIGO_CLIENTE = ISNULL(@CODIGO_CLIENTE, '') OR V.CPF_CGC_ECF = @CPF)

			-- Detalhe sobre manter os dados
			INSERT INTO @LOJA_NOTA_FISCAL_MANTER_DETALHE 
			SELECT	N.CODIGO_FILIAL, N.NF_NUMERO, N.SERIE_NF, L.TIPO, 
					CASE L.TIPO 
						WHEN 'E' THEN CASE WHEN N.CODIGO_CLIENTE IS NULL THEN 'CPF' ELSE 'CPF, NOME, ENDEREÇO' END
						WHEN 'N' THEN CASE WHEN N.CODIGO_CLIENTE IS NULL THEN 'CPF' ELSE 'CPF, NOME, ENDEREÇO' END
						WHEN 'F' THEN 'CPF'
						WHEN 'P' THEN 'CPF, NOME, ENDEREÇO'
					END,
					CASE WHEN L.TIPO = 'E' THEN DATEADD(day, L.DIAS, N.DATA_PARA_TRANSFERENCIA) ELSE DATEADD(day, L.DIAS, N.EMISSAO) END
			FROM @LOJA_NOTA_FISCAL_MANTER N
			INNER JOIN @LIMITE L
			ON CHARINDEX(L.TIPO, N.MOTIVOS) > 0

			-- TABELA LOJA_CF_SAT 
			INSERT INTO @LOJA_CF_SAT_MANTER 
			SELECT	S.CODIGO_FILIAL, S.ID_LOJA_CF_SAT, S.GUID_VENDA_SAT, S.CODIGO_CLIENTE, S.EMISSAO, S.DATA_PARA_TRANSFERENCIA, 
					CASE WHEN S.STATUS_CFE < 5 AND S.EMISSAO > @DATA_NF THEN 'N|' ELSE '' END +
					CASE WHEN S.EMISSAO > @DATA_ENVIO THEN 'E|' ELSE '' END
			FROM LOJA_CF_SAT S
			INNER JOIN LOJA_VENDA_PGTO VP
			ON S.GUID_VENDA_SAT = VP.GUID_VENDA_SAT 
			INNER JOIN LOJA_VENDA V
			ON VP.CODIGO_FILIAL = V.CODIGO_FILIAL_PGTO AND VP.TERMINAL = V.TERMINAL_PGTO AND VP.LANCAMENTO_CAIXA = V.LANCAMENTO_CAIXA
			WHERE S.CODIGO_FILIAL = @CODIGO_FILIAL 
				AND (S.CODIGO_CLIENTE = ISNULL(@CODIGO_CLIENTE, '') OR V.CPF_CGC_ECF = ISNULL(@CPF, ''))
				AND ((S.STATUS_CFE < 5 AND S.EMISSAO > @DATA_NF) OR S.EMISSAO > @DATA_ENVIO) 

			-- Detalhe sobre manter os dados
			INSERT INTO @LOJA_CF_SAT_MANTER_DETALHE 
			SELECT	N.CODIGO_FILIAL, N.ID_LOJA_CF_SAT, L.TIPO, 
					CASE L.TIPO 
						WHEN 'E' THEN CASE WHEN N.CODIGO_CLIENTE IS NULL THEN 'CPF' ELSE 'CPF, NOME' END
						WHEN 'N' THEN CASE WHEN N.CODIGO_CLIENTE IS NULL THEN 'CPF' ELSE 'CPF, NOME' END
						WHEN 'F' THEN 'CPF'
						WHEN 'P' THEN 'CPF, NOME'
					END,
					CASE WHEN L.TIPO = 'E' THEN DATEADD(day, L.DIAS, N.DATA_PARA_TRANSFERENCIA) ELSE DATEADD(day, L.DIAS, N.EMISSAO) END
			FROM @LOJA_CF_SAT_MANTER N
			INNER JOIN @LIMITE L
			ON CHARINDEX(L.TIPO, N.MOTIVOS) > 0

			-- TABELA LOJA_VENDA
			INSERT INTO @LOJA_VENDA_MANTER 
			SELECT	V.CODIGO_FILIAL, V.TICKET, V.DATA_VENDA, V.CODIGO_FILIAL_PGTO, V.TERMINAL_PGTO, V.LANCAMENTO_CAIXA, V.CODIGO_CLIENTE, 
					ISNULL(ISNULL(N.EMISSAO, S.EMISSAO), V.DATA_PARA_TRANSFERENCIA), V.DATA_PARA_TRANSFERENCIA,
					ISNULL(ISNULL(N.MOTIVOS, S.MOTIVOS), '') + CASE WHEN V.DATA_PARA_TRANSFERENCIA > @DATA_ENVIO THEN 'E|' ELSE '' END
			FROM LOJA_VENDA V
			INNER JOIN LOJA_VENDA_PGTO VP
			ON V.CODIGO_FILIAL_PGTO = VP.CODIGO_FILIAL AND V.TERMINAL_PGTO = VP.TERMINAL AND V.LANCAMENTO_CAIXA = VP.LANCAMENTO_CAIXA
			LEFT JOIN @LOJA_NOTA_FISCAL_MANTER N
			ON		(N.NF_NUMERO = VP.NUMERO_FISCAL_TROCA AND N.SERIE_NF = VP.SERIE_NF_ENTRADA) 
				OR	(N.NF_NUMERO = VP.NUMERO_FISCAL_VENDA AND N.SERIE_NF = VP.SERIE_NF_SAIDA) 
				OR	(N.NF_NUMERO = VP.NUMERO_FISCAL_CANCELAMENTO AND N.SERIE_NF = VP.SERIE_NF_CANCELAMENTO)
				OR	(N.NF_NUMERO = VP.NUMERO_FISCAL_IPI AND N.SERIE_NF = VP.SERIE_NF_IPI)
				OR	(N.NF_NUMERO = VP.NUMERO_NF_ORDEM AND N.SERIE_NF = VP.SERIE_NF_ORDEM)
			LEFT JOIN @LOJA_CF_SAT_MANTER S
			ON VP.GUID_VENDA_SAT = S.GUID_VENDA_SAT 
			WHERE	V.CODIGO_FILIAL = @CODIGO_FILIAL 
				AND ((N.NF_NUMERO IS NOT NULL OR S.GUID_VENDA_SAT IS NOT NULL) OR V.DATA_PARA_TRANSFERENCIA > @DATA_ENVIO)

			-- Detalhe sobre manter os dados
			INSERT INTO @LOJA_VENDA_MANTER_DETALHE 
			SELECT	V.CODIGO_FILIAL, V.TICKET, V.DATA_VENDA, L.TIPO, 'CPF', 
					DATEADD(day, L.DIAS, V.DATA_PARA_TRANSFERENCIA)
			FROM @LOJA_VENDA_MANTER V
			INNER JOIN @LIMITE L
			ON CHARINDEX(L.TIPO, V.MOTIVOS) > 0
			WHERE L.TIPO = 'E'
					
		END TRY
		BEGIN CATCH
			SET @ABORTAR = 1
			SET @MSG_ERRO = 'ERRO ' + CAST(ERROR_NUMBER() AS VARCHAR) + ' ' + ERROR_MESSAGE()
		END CATCH
	END

	IF @ABORTAR = 0 AND @CODIGO_CLIENTE IS NOT NULL AND ISNULL(@CODIGO_CLIENTE, '') = @CPF AND EXISTS (SELECT TOP 1 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'LJ_ETL_REPOSITORIO')
	BEGIN
		BEGIN TRY
			-- TABELA LJ_ETL_REPOSITORIO
			INSERT INTO @LJ_ETL_REPOSITORIO_MANTER
			SELECT ID, DATA_HORA_CRIACAO, 'E'
			FROM LJ_ETL_REPOSITORIO 
			WHERE CHARINDEX('CODIGO_CLIENTE', FILTRO) > 0 AND CHARINDEX(@CODIGO_CLIENTE, FILTRO) > 0 AND DATA_HORA_CRIACAO > @DATA_ENVIO 

			INSERT INTO @LJ_ETL_REPOSITORIO_MANTER_DETALHE 
			SELECT	R.ID, L.TIPO, 'CPF',
					DATEADD(day, L.DIAS, R.DATA_HORA_CRIACAO)
			FROM @LJ_ETL_REPOSITORIO_MANTER R
			INNER JOIN @LIMITE L
			ON CHARINDEX(L.TIPO, R.MOTIVOS) > 0

			UPDATE LJ_ETL_REPOSITORIO 
				SET FILTRO = REPLACE(FILTRO, @CODIGO_CLIENTE, @CODIGO_CLIENTE_NOVO)  
			WHERE CHARINDEX('CODIGO_CLIENTE', FILTRO) > 0 AND CHARINDEX(@CODIGO_CLIENTE, FILTRO) > 0 AND DATA_HORA_CRIACAO <= @DATA_ENVIO

		END TRY
		BEGIN CATCH
			SET @ABORTAR = 1
			SET @MSG_ERRO = 'ERRO ' + CAST(ERROR_NUMBER() AS VARCHAR) + ' ' + ERROR_MESSAGE()
		END CATCH
	END

	IF @ABORTAR = 0 AND @CODIGO_CLIENTE IS NOT NULL
	BEGIN
		BEGIN TRY
			-- TABELA LOJA_PEDIDO
			INSERT INTO @LOJA_PEDIDO_MANTER 
			SELECT DISTINCT P.CODIGO_FILIAL_ORIGEM, P.PEDIDO, P.CODIGO_CLIENTE, ISNULL(V.DATA, P.DATA), P.DATA_PARA_TRANSFERENCIA,
					CASE WHEN P.CANCELADO = 0 AND P.ENTREGUE = 0 AND P.DATA > @DATA_PEDIDO THEN 'P|' ELSE '' END + 
					CASE WHEN P.DATA > @DATA_OBRIG_FISCAL AND @TIPO_PAF > 0 AND ISNULL(N.MOTIVOS, '') NOT LIKE '%F|%' THEN 'F|' ELSE '' END +
					ISNULL(N.MOTIVOS, '') + CASE WHEN ISNULL(N.MOTIVOS, '') NOT LIKE '%E|' AND P.DATA_PARA_TRANSFERENCIA > @DATA_ENVIO THEN 'E|' ELSE '' END
			FROM LOJA_PEDIDO P
			LEFT JOIN LOJA_PEDIDO_VENDA PV
			ON P.CODIGO_FILIAL_ORIGEM = PV.CODIGO_FILIAL_ORIGEM AND P.PEDIDO = PV.PEDIDO
			LEFT JOIN @LOJA_VENDA_MANTER V
			ON PV.CODIGO_FILIAL = V.CODIGO_FILIAL AND PV.DATA_VENDA = V.DATA_VENDA AND PV.TICKET = V.TICKET 
			LEFT JOIN LOJA_VENDA_PGTO VP
			ON V.CODIGO_FILIAL_PGTO = VP.CODIGO_FILIAL AND V.TERMINAL_PGTO = VP.TERMINAL AND V.LANCAMENTO_CAIXA = VP.LANCAMENTO_CAIXA 
			LEFT JOIN @LOJA_NOTA_FISCAL_MANTER N
			ON VP.CODIGO_FILIAL = N.CODIGO_FILIAL AND VP.NUMERO_FISCAL_VENDA = N.NF_NUMERO AND VP.SERIE_NF_SAIDA = N.SERIE_NF  
			WHERE	(P.CODIGO_CLIENTE = @CODIGO_CLIENTE AND 
						(
							(P.CANCELADO = 0 AND P.ENTREGUE = 0. AND P.DATA > @DATA_PEDIDO)	-- PEDIDO PENDENTE DE ENTREGA
						OR	(P.DATA > @DATA_OBRIG_FISCAL AND @TIPO_PAF > 0)	-- OBRIGAÇÃO FISCAL
						OR	P.DATA_PARA_TRANSFERENCIA > @DATA_ENVIO
						)
					) OR (N.SERIE_NF IS NOT NULL AND N.MOTIVOS LIKE '%N|') -- NOTA FISCAL PENDENTE DE EMISSÃO

			-- Detalhe sobre manter os dados
			INSERT INTO @LOJA_PEDIDO_MANTER_DETALHE 
			SELECT	P.CODIGO_FILIAL_ORIGEM, P.PEDIDO, L.TIPO, 'CPF, NOME, ENDERECO',
					CASE WHEN L.TIPO = 'E' THEN DATEADD(day, L.DIAS, P.DATA_PARA_TRANSFERENCIA) ELSE DATEADD(day, L.DIAS, P.DATA) END
			FROM @LOJA_PEDIDO_MANTER P
			INNER JOIN @LIMITE L
			ON CHARINDEX(L.TIPO, P.MOTIVOS) > 0

			-- TABELA CLIENTE_VAR_ENDERECOS EM FUNÇÃO DE NF E PEDIDO
			INSERT INTO @CLIENTE_VAR_ENDERECOS_MANTER 
			SELECT DISTINCT CE.CODIGO_CLIENTE, CE.ITEM_ENDERECO, 
							CASE WHEN P.MOTIVOS LIKE '%N|%' THEN 'N|' ELSE '' END + 
							CASE WHEN P.MOTIVOS LIKE '%P|%' THEN 'P|' ELSE '' END
			FROM @LOJA_PEDIDO_MANTER P
			INNER JOIN LOJA_PEDIDO_ENTREGA PE
			ON P.CODIGO_FILIAL_ORIGEM = PE.CODIGO_FILIAL_ORIGEM AND P.PEDIDO = PE.PEDIDO
			INNER JOIN CLIENTE_VAR_ENDERECOS CE
			ON P.CODIGO_CLIENTE = CE.CODIGO_CLIENTE AND PE.ITEM_ENDERECO = CE.ITEM_ENDERECO
			WHERE P.MOTIVOS LIKE '%N|%' OR P.MOTIVOS LIKE '%P|%'

			-- TABELA LOJA_SAIDAS
			INSERT INTO @LOJA_SAIDAS_MANTER 
			SELECT	S.ROMANEIO_PRODUTO, S.FILIAL, S.CODIGO_CLIENTE, S.EMISSAO, S.DATA_PARA_TRANSFERENCIA,
					CASE WHEN M.SERIE_NF IS NULL THEN '' ELSE 'N|' END + 
					CASE WHEN S.SAIDA_ENCERRADA = 0 AND S.SAIDA_CANCELADA = 0 THEN 'P|' ELSE '' END +
					CASE WHEN S.DATA_PARA_TRANSFERENCIA > @DATA_ENVIO THEN 'E|' ELSE '' END
			FROM LOJA_SAIDAS S
			LEFT JOIN @LOJA_NOTA_FISCAL_MANTER M
			ON S.NUMERO_NF_TRANSFERENCIA = M.NF_NUMERO AND S.SERIE_NF = M.SERIE_NF 
			WHERE	(S.CODIGO_CLIENTE IS NOT NULL AND S.CODIGO_CLIENTE = @CODIGO_CLIENTE) 
				AND ((M.SERIE_NF IS NOT NULL OR (S.SAIDA_ENCERRADA = 0 AND S.SAIDA_CANCELADA = 0)) OR S.DATA_PARA_TRANSFERENCIA > @DATA_ENVIO)

			-- Detalhe sobre manter os dados
			INSERT INTO @LOJA_SAIDAS_MANTER_DETALHE 
			SELECT	S.ROMANEIO_PRODUTO, S.FILIAL, L.TIPO, 'CPF, NOME, ENDERECO',
					CASE WHEN L.TIPO = 'E' THEN DATEADD(day, L.DIAS, S.DATA_PARA_TRANSFERENCIA) ELSE DATEADD(day, L.DIAS, S.EMISSAO) END
			FROM @LOJA_SAIDAS_MANTER S
			INNER JOIN @LIMITE L
			ON CHARINDEX(L.TIPO, S.MOTIVOS) > 0

			-- TABELA LOJA_RESERVA
			INSERT INTO @LOJA_RESERVA_MANTER 
			SELECT	R.FILIAL, R.NUMERO_RESERVA, R.CODIGO_CLIENTE, ISNULL(R.PREVISAO_RETORNO, R.EMISSAO), R.DATA_PARA_TRANSFERENCIA,
					CASE WHEN R.ENCERRAMENTO IS NULL AND ISNULL(R.PREVISAO_RETORNO, R.EMISSAO) > @DATA_PEDIDO THEN 'P|' ELSE '' END +
					CASE WHEN R.DATA_PARA_TRANSFERENCIA > @DATA_ENVIO THEN 'E|' ELSE '' END
			FROM LOJA_RESERVA R
			WHERE	R.CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF 
				AND ((R.ENCERRAMENTO IS NULL AND ISNULL(R.PREVISAO_RETORNO, R.EMISSAO) > @DATA_PEDIDO) OR R.DATA_PARA_TRANSFERENCIA > @DATA_ENVIO)

			-- Detalhe sobre manter os dados
			INSERT INTO @LOJA_RESERVA_MANTER_DETALHE 
			SELECT	R.FILIAL, R.NUMERO_RESERVA, L.TIPO, 'CPF',
					CASE WHEN L.TIPO = 'E' THEN DATEADD(day, L.DIAS, R.DATA_PARA_TRANSFERENCIA) ELSE DATEADD(day, L.DIAS, R.DATA) END
			FROM @LOJA_RESERVA_MANTER R
			INNER JOIN @LIMITE L
			ON CHARINDEX(L.TIPO, R.MOTIVOS) > 0

			-- TABELA LOJA_CONSERTO
			INSERT INTO @LOJA_CONSERTO_MANTER 
			SELECT	C.PROTOCOLO, C.CODIGO_FILIAL, C.CODIGO_CLIENTE, C.DATA_PROTOCOLO, C.DATA_PARA_TRANSFERENCIA,
					CASE WHEN C.LX_STATUS_CONSERTO < 4 AND C.DATA_PROTOCOLO > @DATA_CONSERTO THEN 'C|' ELSE '' END +
					CASE WHEN C.DATA_PARA_TRANSFERENCIA > @DATA_ENVIO THEN 'E|' ELSE '' END
			FROM LOJA_CONSERTO C
			WHERE	C.CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF
				AND ((C.LX_STATUS_CONSERTO < 4 AND C.DATA_PROTOCOLO > @DATA_CONSERTO) OR C.DATA_PARA_TRANSFERENCIA > @DATA_ENVIO)

			-- Detalhe sobre manter os dados
			INSERT INTO @LOJA_CONSERTO_MANTER_DETALHE 
			SELECT	C.PROTOCOLO, C.CODIGO_FILIAL, L.TIPO, 'CPF',
					CASE WHEN L.TIPO = 'E' THEN DATEADD(day, L.DIAS, C.DATA_PARA_TRANSFERENCIA) ELSE DATEADD(day, L.DIAS, C.DATA_PROTOCOLO) END
			FROM @LOJA_CONSERTO_MANTER C
			INNER JOIN @LIMITE L
			ON CHARINDEX(L.TIPO, C.MOTIVOS) > 0
		END TRY
		BEGIN CATCH
			SET @ABORTAR = 1
			SET @MSG_ERRO = 'ERRO ' + CAST(ERROR_NUMBER() AS VARCHAR) + ' ' + ERROR_MESSAGE()
		END CATCH
	END

	IF @ABORTAR = 0	
	BEGIN
		BEGIN TRAN

		IF @CODIGO_CLIENTE IS NOT NULL
		BEGIN
			BEGIN TRY
				-- Verifica CLIENTES_VAREJO a manter
				INSERT INTO @CLIENTES_VAREJO_MANTER 
				SELECT DISTINCT CODIGO_CLIENTE
				FROM @LOJA_NOTA_FISCAL_MANTER 
				WHERE CODIGO_CLIENTE IS NOT NULL
				UNION
				SELECT DISTINCT CODIGO_CLIENTE
				FROM @LOJA_CF_SAT_MANTER 
				WHERE CODIGO_CLIENTE IS NOT NULL
				UNION 
				SELECT DISTINCT CODIGO_CLIENTE
				FROM @LOJA_VENDA_MANTER 
				WHERE CODIGO_CLIENTE IS NOT NULL
				UNION 
				SELECT DISTINCT CODIGO_CLIENTE
				FROM @LOJA_PEDIDO_MANTER  
				WHERE CODIGO_CLIENTE IS NOT NULL
				UNION
				SELECT DISTINCT CODIGO_CLIENTE
				FROM @LOJA_SAIDAS_MANTER  
				WHERE CODIGO_CLIENTE IS NOT NULL
				UNION
				SELECT DISTINCT CODIGO_CLIENTE
				FROM @LOJA_RESERVA_MANTER  
				WHERE CODIGO_CLIENTE IS NOT NULL
				UNION
				SELECT DISTINCT CODIGO_CLIENTE
				FROM @LOJA_CONSERTO_MANTER  
				WHERE CODIGO_CLIENTE IS NOT NULL

				UPDATE LJ_FIDELIDADE_PONTO
					SET CODIGO_CLIENTE = @CODIGO_CLIENTE_NOVO, DATA_PARA_TRANSFERENCIA = DATA_PARA_TRANSFERENCIA 
				WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF 

				UPDATE LJ_VALE_PRODUTO
					SET CODIGO_CLIENTE = @CODIGO_CLIENTE_NOVO, DATA_PARA_TRANSFERENCIA = DATA_PARA_TRANSFERENCIA 
				WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF 

				UPDATE LOJA_A_RECEBER_CHEQUES
					SET CODIGO_CLIENTE = @CODIGO_CLIENTE_NOVO, DATA_PARA_TRANSFERENCIA = DATA_PARA_TRANSFERENCIA 
				WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF 

				UPDATE LOJA_CF_SAT_LOG
					SET CODIGO_CLIENTE = @CODIGO_CLIENTE_NOVO, DATA_PARA_TRANSFERENCIA = DATA_PARA_TRANSFERENCIA 
				WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF 

				UPDATE LOJA_CF_SAT	-- Vai para o ERP
					SET CODIGO_CLIENTE = @CODIGO_CLIENTE_NOVO, DATA_PARA_TRANSFERENCIA = S.DATA_PARA_TRANSFERENCIA 
				FROM LOJA_CF_SAT S
				LEFT JOIN @LOJA_CF_SAT_MANTER M
				ON S.CODIGO_FILIAL = M.CODIGO_FILIAL AND S.ID_LOJA_CF_SAT = M.ID_LOJA_CF_SAT 
				WHERE S.CODIGO_CLIENTE = @CODIGO_CLIENTE AND M.CODIGO_FILIAL IS NULL

				UPDATE LOJA_CONSERTO	-- Vai para o ERP e deveria ter um controle igual a LOJA_PEDIDO
					SET CODIGO_CLIENTE = @CODIGO_CLIENTE_NOVO, DATA_PARA_TRANSFERENCIA = C.DATA_PARA_TRANSFERENCIA 
				FROM LOJA_CONSERTO C
				LEFT JOIN @LOJA_CONSERTO_MANTER M
				ON C.PROTOCOLO = M.PROTOCOLO AND C.CODIGO_FILIAL = M.CODIGO_FILIAL 
				WHERE C.CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF AND C.DATA_PARA_TRANSFERENCIA < @DATA_ENVIO AND M.PROTOCOLO IS NULL

				INSERT INTO @GERAL_MANTER_DETALHE (TIPO, DADOS, DATA_PROCESSAR)
				SELECT 'E', 'CPF', DATEADD(day, @DIAS_ENVIO_ERP, DATA_PARA_TRANSFERENCIA)
				FROM LOJA_EVENTOS_LOG
				WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF AND DATA_PARA_TRANSFERENCIA > @DATA_ENVIO

				UPDATE LOJA_EVENTOS_LOG	-- Vai para o ERP
					SET CODIGO_CLIENTE = @CODIGO_CLIENTE_NOVO, DATA_PARA_TRANSFERENCIA = DATA_PARA_TRANSFERENCIA 
				WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF AND DATA_PARA_TRANSFERENCIA <= @DATA_ENVIO

				INSERT INTO @GERAL_MANTER_DETALHE (TIPO, DADOS, DATA_PROCESSAR)
				SELECT 'E', 'CPF', DATEADD(day, @DIAS_ENVIO_ERP, DATA_PARA_TRANSFERENCIA)
				FROM LOJA_HISTORICO_VENDA
				WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF AND DATA_PARA_TRANSFERENCIA > @DATA_ENVIO

				UPDATE LOJA_HISTORICO_VENDA	-- Vai para o ERP
					SET CODIGO_CLIENTE = @CODIGO_CLIENTE_NOVO, DATA_PARA_TRANSFERENCIA = DATA_PARA_TRANSFERENCIA 
				WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF AND DATA_PARA_TRANSFERENCIA <= @DATA_ENVIO

				UPDATE LOJA_NOTA_FISCAL	-- Vai para o ERP
					SET CODIGO_CLIENTE = @CODIGO_CLIENTE_NOVO, DATA_PARA_TRANSFERENCIA = N.DATA_PARA_TRANSFERENCIA 
				FROM LOJA_NOTA_FISCAL N
				LEFT JOIN @LOJA_NOTA_FISCAL_MANTER M
				ON N.CODIGO_FILIAL = M.CODIGO_FILIAL AND N.NF_NUMERO = M.NF_NUMERO AND N.SERIE_NF = M.SERIE_NF
				WHERE N.CODIGO_CLIENTE = @CODIGO_CLIENTE AND M.CODIGO_FILIAL IS NULL

				UPDATE LOJA_PEDIDO	-- Vai para o ERP
					SET CODIGO_CLIENTE = @CODIGO_CLIENTE_NOVO, DATA_PARA_TRANSFERENCIA = P.DATA_PARA_TRANSFERENCIA,  
						CPF_CGC_ECF = '', IDENTIFICACAO_CLIENTE = ''
				FROM LOJA_PEDIDO P
				LEFT JOIN @LOJA_PEDIDO_MANTER M
				ON P.CODIGO_FILIAL_ORIGEM = M.CODIGO_FILIAL_ORIGEM AND P.PEDIDO = M.PEDIDO
				WHERE P.CODIGO_CLIENTE = @CODIGO_CLIENTE AND M.CODIGO_FILIAL_ORIGEM IS NULL 

				INSERT INTO @GERAL_MANTER_DETALHE (TIPO, DADOS, DATA_PROCESSAR)
				SELECT 'E', 'CPF', DATEADD(day, @DIAS_ENVIO_ERP, DATA_PARA_TRANSFERENCIA)
				FROM LOJA_PEDIDO_VENDEDOR
				WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF AND DATA_PARA_TRANSFERENCIA > @DATA_ENVIO

				UPDATE LOJA_PEDIDO_VENDEDOR	-- Vai para o ERP
					SET CODIGO_CLIENTE = @CODIGO_CLIENTE_NOVO, DATA_PARA_TRANSFERENCIA = DATA_PARA_TRANSFERENCIA 
				WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF AND DATA_PARA_TRANSFERENCIA <= @DATA_ENVIO

				INSERT INTO @GERAL_MANTER_DETALHE (TIPO, DADOS, DATA_PROCESSAR)
				SELECT 'E', 'CPF', DATEADD(day, @DIAS_ENVIO_ERP, DATA_PARA_TRANSFERENCIA)
				FROM LOJA_PGTO_CLIENTE
				WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF AND DATA_PARA_TRANSFERENCIA > @DATA_ENVIO

				UPDATE LOJA_PGTO_CLIENTE	-- Vai para o ERP
					SET CODIGO_CLIENTE = @CODIGO_CLIENTE_NOVO, DATA_PARA_TRANSFERENCIA = DATA_PARA_TRANSFERENCIA 
				WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF AND DATA_PARA_TRANSFERENCIA <= @DATA_ENVIO 

				UPDATE LOJA_RESERVA	-- Vai para o ERP
					SET CODIGO_CLIENTE = @CODIGO_CLIENTE_NOVO, DATA_PARA_TRANSFERENCIA = R.DATA_PARA_TRANSFERENCIA 
				FROM LOJA_RESERVA R
				LEFT JOIN @LOJA_RESERVA_MANTER M
				ON R.FILIAL = M.FILIAL AND R.NUMERO_RESERVA = M.NUMERO_RESERVA 
				WHERE R.CODIGO_CLIENTE = @CODIGO_CLIENTE AND M.FILIAL IS NULL

				INSERT INTO @GERAL_MANTER_DETALHE (TIPO, DADOS, DATA_PROCESSAR)
				SELECT 'E', 'CPF', DATEADD(day, @DIAS_ENVIO_ERP, DATA_PARA_TRANSFERENCIA)
				FROM LOJA_VENDA_VENDEDORES
				WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF AND DATA_PARA_TRANSFERENCIA > @DATA_ENVIO

				UPDATE LOJA_VENDA_VENDEDORES	-- Vai para o ERP
					SET CODIGO_CLIENTE = @CODIGO_CLIENTE_NOVO, DATA_PARA_TRANSFERENCIA = DATA_PARA_TRANSFERENCIA 
				WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF AND DATA_PARA_TRANSFERENCIA <= @DATA_ENVIO 

				UPDATE LOJA_SAIDAS	-- Vai para o ERP
					SET CODIGO_CLIENTE = @CODIGO_CLIENTE_NOVO, DATA_PARA_TRANSFERENCIA = S.DATA_PARA_TRANSFERENCIA 
				FROM LOJA_SAIDAS S
				LEFT JOIN @LOJA_SAIDAS_MANTER M
				ON S.FILIAL = M.FILIAL AND S.ROMANEIO_PRODUTO = M.ROMANEIO_PRODUTO
				WHERE S.CODIGO_CLIENTE = @CODIGO_CLIENTE AND M.FILIAL IS NULL

				UPDATE VALES_A_RECEBER
					SET CODIGO_CLIENTE = @CODIGO_CLIENTE_NOVO, DATA_PARA_TRANSFERENCIA = DATA_PARA_TRANSFERENCIA 
				WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF 

				UPDATE ENTIDADES_CREDITO_CONSULTAS SET CODIGO_CLIENTE = @CODIGO_CLIENTE_NOVO
				WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF

				UPDATE UNICO_VITRINE_PEDIDO -- PEDIDO RECENTE NÃO DEVE SER APAGADO
					SET CODIGO_CLIENTE = @CODIGO_CLIENTE_NOVO, DATA_PARA_TRANSFERENCIA = U.DATA_PARA_TRANSFERENCIA
				FROM UNICO_VITRINE_PEDIDO U
				LEFT JOIN @LOJA_VENDA_MANTER M
				ON U.CODIGO_FILIAL = M.CODIGO_FILIAL AND U.DATA_VENDA = M.DATA_VENDA AND U.TICKET = M.TICKET
				WHERE U.CODIGO_CLIENTE = @CODIGO_CLIENTE AND ISNULL(M.MOTIVOS, '') NOT LIKE '%E|%'

				DELETE FROM CLIENTE_VAR_FINALIDADE WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE 

				DELETE CLIENTE_VAR_ENDERECOS 
				FROM CLIENTE_VAR_ENDERECOS CE
				LEFT JOIN @CLIENTE_VAR_ENDERECOS_MANTER M
				ON CE.CODIGO_CLIENTE = M.CODIGO_CLIENTE AND CE.ITEM_ENDERECO = M.ITEM_ENDERECO
				WHERE CE.CODIGO_CLIENTE = @CODIGO_CLIENTE AND M.CODIGO_CLIENTE IS NULL

				DELETE FROM CLIENTE_VAR_RELACIONADO WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE
			
				INSERT INTO @GERAL_MANTER_DETALHE (TIPO, DADOS, DATA_PROCESSAR)
				SELECT 'E', 'CPF', DATEADD(day, @DIAS_ENVIO_ERP, DATA_PARA_TRANSFERENCIA)
				FROM CLIENTES_VAREJO_DOCUMENTO
				WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF AND DATA_PARA_TRANSFERENCIA > @DATA_ENVIO

				DELETE FROM CLIENTES_VAREJO_DOCUMENTO	-- Vai para o ERP
				WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF AND DATA_PARA_TRANSFERENCIA <= @DATA_ENVIO

				DELETE FROM CLIENTE_VAR_SAC WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE 

				INSERT INTO @GERAL_MANTER_DETALHE (TIPO, DADOS, DATA_PROCESSAR)
				SELECT 'E', 'CPF', DATEADD(day, @DIAS_ENVIO_ERP, DATA_PARA_TRANSFERENCIA)
				FROM CLIENTES_VAREJO_LOG
				WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF AND DATA_PARA_TRANSFERENCIA > @DATA_ENVIO
				
				DELETE FROM CLIENTES_VAREJO_LOG	-- Vai para o ERP
				WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE AND @CODIGO_CLIENTE = @CPF AND DATA_PARA_TRANSFERENCIA < @DATA_ENVIO 

				DELETE FROM PROP_CLIENTES_VAREJO WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE 
			END TRY
			BEGIN CATCH
				SET @ABORTAR = 1
				SET @MSG_ERRO = 'ERRO ' + CAST(ERROR_NUMBER() AS VARCHAR) + ' ' + ERROR_MESSAGE()
			END CATCH
		END

		IF @ABORTAR = 0
		BEGIN
			BEGIN TRY
				-- Elimina o CFP do JSON
				SET @TXTAUXILIAR = '"' + @CPF + '"' 
				UPDATE PROCESSOS_SISTEMA_ATIVIDADES
					SET MENSAGEM = REPLACE(MENSAGEM, @TXTAUXILIAR, '""')
				FROM PROCESSOS_SISTEMA_ATIVIDADES
				WHERE CHARINDEX(@TXTAUXILIAR, MENSAGEM) > 0
										
				-- Elimina as linhas de XML que tem o CPF informado, exceto para notas que precisam ser mantidas
				DELETE FROM LOJA_NOTA_FISCAL_XML 
				FROM LOJA_NOTA_FISCAL_XML X 
				LEFT JOIN @LOJA_NOTA_FISCAL_MANTER M
				ON X.CODIGO_FILIAL = M.CODIGO_FILIAL AND X.NF_NUMERO = M.NF_NUMERO AND X.SERIE_NF = M.SERIE_NF 
				WHERE CHARINDEX('<CPF>' + @CPF + '</CPF>', X.XML_NF) > 0 AND M.CODIGO_FILIAL IS NULL

				DELETE FROM DADOS_CADASTRO_XML_NFE
				FROM DADOS_CADASTRO_XML_NFE D
				LEFT JOIN @LOJA_NOTA_FISCAL_MANTER M
				ON D.CHAVE_NFE = M.CHAVE_NFE
				WHERE CGC_DESTINATARIO = @CPF AND M.CHAVE_NFE IS NULL

				-- Elimina as linhas de XML que tem o CPF informado, exceto para CF-es que precisam ser mantidos
				DELETE FROM LOJA_CF_SAT_XML 
				FROM LOJA_CF_SAT_XML X 
				LEFT JOIN @LOJA_CF_SAT_MANTER M
				ON X.CODIGO_FILIAL = M.CODIGO_FILIAL AND X.ID_LOJA_CF_SAT = M.ID_LOJA_CF_SAT 
				WHERE CHARINDEX('<CPF>' + @CPF + '</CPF>', X.XML_CF_AUTORIZACAO) > 0 AND M.CODIGO_FILIAL IS NULL

				DELETE FROM LCF_RESPONSAVEL_CONTABILISTA WHERE CPF = @CPF 

				UPDATE LJ_DOCUMENTO_ECF		-- Vai para o ERP
					SET CPF_CNPJ_CLIENTE = '', NOME_CLIENTE = '', DATA_PARA_TRANSFERENCIA = D.DATA_PARA_TRANSFERENCIA 
				FROM LJ_DOCUMENTO_ECF D
				LEFT JOIN @LJ_DOCUMENTO_ECF_MANTER M
				ON D.CODIGO_FILIAL = M.CODIGO_FILIAL AND D.ID_DOCUMENTO_ECF = M.ID_DOCUMENTO_ECF 
				WHERE D.CPF_CNPJ_CLIENTE = @CPF AND M.CODIGO_FILIAL IS NULL

				INSERT INTO @GERAL_MANTER_DETALHE (TIPO, DADOS, DATA_PROCESSAR)
				SELECT 'E', 'CPF, NOME', DATEADD(day, @DIAS_ENVIO_ERP, DATA_PARA_TRANSFERENCIA)
				FROM LJ_ECF_AC1704_E14
				WHERE CPF_CNPJ = @CPF AND DATA_PARA_TRANSFERENCIA > @DATA_ENVIO 

				UPDATE LJ_ECF_AC1704_E14 -- Vai para o ERP
					SET CPF_CNPJ = '', NOME_CLIENTE = '', DATA_PARA_TRANSFERENCIA = DATA_PARA_TRANSFERENCIA 
				WHERE CPF_CNPJ = @CPF AND DATA_PARA_TRANSFERENCIA <= @DATA_ENVIO 

				UPDATE LOJA_VENDA	-- Vai para o ERP
					SET CODIGO_CLIENTE = CASE WHEN V.CODIGO_CLIENTE IS NULL THEN V.CODIGO_CLIENTE ELSE @CODIGO_CLIENTE_NOVO END,
						CPF_CGC_ECF = CASE WHEN CPF_CGC_ECF IS NULL THEN CPF_CGC_ECF ELSE '' END,
						DATA_PARA_TRANSFERENCIA = V.DATA_PARA_TRANSFERENCIA 
				FROM LOJA_VENDA V
				LEFT JOIN @LOJA_VENDA_MANTER M
				ON V.CODIGO_FILIAL = M.CODIGO_FILIAL AND V.DATA_VENDA = M.DATA_VENDA AND V.TICKET = M.TICKET
				WHERE (V.CODIGO_CLIENTE = ISNULL(@CODIGO_CLIENTE, '') OR V.CPF_CGC_ECF = ISNULL(@CPF, '')) AND M.CODIGO_FILIAL IS NULL

				UPDATE LX_IMP_MFD_E14 -- Vai para o ERP, mas não é mais utilizado
					SET CPF_CNPJ = '', NOME_CLIENTE = '', DATA_PARA_TRANSFERENCIA = DATA_PARA_TRANSFERENCIA 
				WHERE CPF_CNPJ = @CPF AND DATA_PARA_TRANSFERENCIA < @DATA_ENVIO

				INSERT INTO @GERAL_MANTER_DETALHE (TIPO, DADOS, DATA_PROCESSAR)
				SELECT 'E', 'CPF, NOME, ENDEREÇO', DATEADD(day, @DIAS_ENVIO_ERP, DATA_PARA_TRANSFERENCIA)
				FROM LOJA_VENDEDORES
				WHERE CPF = @CPF AND DATA_PARA_TRANSFERENCIA > @DATA_ENVIO 

				UPDATE LOJA_VENDEDORES	-- Vai para o ERP
					SET VENDEDOR_APELIDO = '', NOME_VENDEDOR = '', RG = '', ENDERECO = '', COMPLEMENTO = '', CIDADE = '', UF = '', CEP = '', TELEFONE = '',
						CPF = '', GERENTE = 0, DATA_DESATIVACAO = GETDATE(), DESC_CARGO = '', DATA_PARA_TRANSFERENCIA = DATA_PARA_TRANSFERENCIA, ACESSO_GERENCIAL = 0,
						EMAIL = ''
				WHERE CPF = @CPF AND DATA_PARA_TRANSFERENCIA <= @DATA_ENVIO
						
				DELETE FROM CADASTRO_CLI_FOR 
				WHERE CGC_CPF  = @CPF	AND PJ_PF = 0

				INSERT INTO @GERAL_MANTER_DETALHE (TIPO, DADOS, DATA_PROCESSAR)
				SELECT 'E', 'CPF, NOME, ENDEREÇO', DATEADD(day, @DIAS_ENVIO_ERP, DATA_PARA_TRANSFERENCIA)
				FROM CLIENTES_VAREJO
				WHERE CODIGO_CLIENTE = ISNULL(@CODIGO_CLIENTE, '') AND DATA_PARA_TRANSFERENCIA > @DATA_ENVIO 

				DELETE FROM CLIENTES_VAREJO
				FROM CLIENTES_VAREJO C	-- Vai para o ERP
				LEFT JOIN @CLIENTES_VAREJO_MANTER M
				ON C.CODIGO_CLIENTE  = M.CODIGO_CLIENTE
				WHERE C.CODIGO_CLIENTE = ISNULL(@CODIGO_CLIENTE, '') AND M.CODIGO_CLIENTE IS NULL AND DATA_PARA_TRANSFERENCIA <= @DATA_ENVIO 
			END TRY
			BEGIN CATCH
				SET @ABORTAR = 1
				SET @MSG_ERRO = 'ERRO ' + CAST(ERROR_NUMBER() AS VARCHAR) + ' ' + ERROR_MESSAGE()
			END CATCH
		END

		IF @ABORTAR = 0
		BEGIN
			BEGIN TRY

				SELECT @TEXTO_OBRIG_FISCAL = ISNULL(VALOR_ATUAL, '') FROM dbo.fn_GetParameter(@CODIGO_FILIAL, NULL, 'LGPD_TEXTO_OBRIGA_FISCAL')
				SELECT @TEXTO_NF = ISNULL(VALOR_ATUAL, '') FROM dbo.fn_GetParameter(@CODIGO_FILIAL, NULL, 'LGPD_TEXTO_AUTORIZAR_NF')
				SELECT @TEXTO_PEDIDO = ISNULL(VALOR_ATUAL, '') FROM dbo.fn_GetParameter(@CODIGO_FILIAL, NULL, 'LGPD_TEXTO_PEDIDO_PEND')
				SELECT @TEXTO_ENVIO = ISNULL(VALOR_ATUAL, '') FROM dbo.fn_GetParameter(@CODIGO_FILIAL, NULL, 'LGPD_TEXTO_ENVIO_ERP')
				SELECT @TEXTO_CONSERTO = ISNULL(VALOR_ATUAL, '') FROM dbo.fn_GetParameter(@CODIGO_FILIAL, NULL, 'LGPD_TEXTO_CONSERTO_PEND')

				INSERT INTO @RETORNO_TIPO 
				SELECT TIPO, MAX(DADOS) AS DADOS, MIN(DATA_PROCESSAR) AS DATA_PROCESSAR, MAX(DATA_PROCESSAR) AS DATA_LIMITE 
				FROM (
					SELECT TIPO, MAX(DADOS) AS DADOS, MIN(DATA_PROCESSAR) AS DATA_PROCESSAR, MAX(DATA_PROCESSAR) AS DATA_LIMITE
					FROM @LOJA_NOTA_FISCAL_MANTER_DETALHE 
					GROUP BY TIPO 
					UNION 
					SELECT TIPO, MAX(DADOS) AS DADOS, MIN(DATA_PROCESSAR) AS DATA_PROCESSAR, MAX(DATA_PROCESSAR) AS DATA_LIMITE
					FROM @LOJA_CF_SAT_MANTER_DETALHE
					GROUP BY TIPO
					UNION
					SELECT TIPO, MAX(DADOS) AS DADOS, MIN(DATA_PROCESSAR) AS DATA_PROCESSAR, MAX(DATA_PROCESSAR) AS DATA_LIMITE
					FROM @LJ_DOCUMENTO_ECF_MANTER_DETALHE
					GROUP BY TIPO
					UNION
					SELECT TIPO, MAX(DADOS) AS DADOS, MIN(DATA_PROCESSAR) AS DATA_PROCESSAR, MAX(DATA_PROCESSAR) AS DATA_LIMITE
					FROM @LOJA_VENDA_MANTER_DETALHE
					GROUP BY TIPO
					UNION
					SELECT TIPO, MAX(DADOS) AS DADOS, MIN(DATA_PROCESSAR) AS DATA_PROCESSAR, MAX(DATA_PROCESSAR) AS DATA_LIMITE
					FROM @LOJA_PEDIDO_MANTER_DETALHE
					GROUP BY TIPO
					UNION
					SELECT TIPO, MAX(DADOS) AS DADOS, MIN(DATA_PROCESSAR) AS DATA_PROCESSAR, MAX(DATA_PROCESSAR) AS DATA_LIMITE
					FROM @LOJA_SAIDAS_MANTER_DETALHE
					GROUP BY TIPO
					UNION
					SELECT TIPO, MAX(DADOS) AS DADOS, MIN(DATA_PROCESSAR) AS DATA_PROCESSAR, MAX(DATA_PROCESSAR) AS DATA_LIMITE
					FROM @LOJA_RESERVA_MANTER_DETALHE
					GROUP BY TIPO
					UNION
					SELECT TIPO, MAX(DADOS) AS DADOS, MIN(DATA_PROCESSAR) AS DATA_PROCESSAR, MAX(DATA_PROCESSAR) AS DATA_LIMITE
					FROM @LOJA_CONSERTO_MANTER_DETALHE
					GROUP BY TIPO
					UNION
					SELECT TIPO, MAX(DADOS) AS DADOS, MIN(DATA_PROCESSAR) AS DATA_PROCESSAR, MAX(DATA_PROCESSAR) AS DATA_LIMITE
					FROM @LJ_ETL_REPOSITORIO_MANTER_DETALHE
					GROUP BY TIPO
					UNION
					SELECT TIPO, MAX(DADOS) AS DADOS, MIN(DATA_PROCESSAR) AS DATA_PROCESSAR, MAX(DATA_PROCESSAR) AS DATA_LIMITE
					FROM @GERAL_MANTER_DETALHE
					GROUP BY TIPO
					) U
				GROUP BY TIPO 

				UPDATE @RETORNO_TIPO
					SET DATA_PROCESSAR = CASE WHEN DATA_PROCESSAR > CAST(DATA_PROCESSAR AS DATE) THEN DATEADD(day, 1, CAST(DATA_PROCESSAR AS DATE)) ELSE DATA_PROCESSAR END,
						DATA_LIMITE = CASE WHEN DATA_LIMITE > CAST(DATA_LIMITE AS DATE) THEN DATEADD(day, 1, CAST(DATA_LIMITE AS DATE)) ELSE DATA_LIMITE END

				SELECT @MSG_RETORNO = @MSG_RETORNO + 
					CASE TIPO 
						WHEN 'E' THEN @TEXTO_ENVIO + ' ' + DADOS + ' ATÉ ' + CONVERT(VARCHAR, DATA_LIMITE, 103) + '. '
						WHEN 'F' THEN @TEXTO_OBRIG_FISCAL + ' ' + DADOS + ' ATÉ ' + CONVERT(VARCHAR, DATA_LIMITE, 103) + '. '
						WHEN 'N' THEN @TEXTO_NF + ' ' + DADOS + ' ATÉ ' + CONVERT(VARCHAR, DATA_LIMITE, 103) + '. '
						WHEN 'P' THEN @TEXTO_PEDIDO + ' ' + DADOS + ' ATÉ ' + CONVERT(VARCHAR, DATA_LIMITE, 103) + '. '
						WHEN 'C' THEN @TEXTO_CONSERTO  + ' ' + DADOS + ' ATÉ ' + CONVERT(VARCHAR, DATA_LIMITE, 103) + '. '
					END
				FROM @RETORNO_TIPO 

				INSERT INTO LGPD_SOLICITACAO_PENDENTE 
				(ID_LGPD_SOLICITACAO_LOJA, TIPO_SOLICITACAO, CODIGO_FILIAL, DOCUMENTO, ID_LGPD_TIPO_DOCUMENTO, ID_LGPD_STATUS_PROCESSAMENTO, DATA_PREVISTA)
				SELECT S.* 
				FROM (
					SELECT	MIN(CASE WHEN @ORIGEM_SOLICITACAO IN (1, 2) THEN S.ID_SOLICITACAO_LOJA ELSE NULL END) AS ID_LGPD_SOLICITACAO_LOJA, 
							MIN(ISNULL(S.TIPO_SOLICITACAO, 'E')) AS TIPO_SOLICITACAO, 
							@CODIGO_FILIAL AS CODIGO_FILIAL, 
							@CPF AS DOCUMENTO, 
							1 AS ID_LGPD_TIPO_DOCUMENTO, 
							1 AS ID_LGPD_STATUS_PROCESSAMENTO, 
							MIN(DATA_PROCESSAR) AS DATA_PREVISTA
					FROM @RETORNO_TIPO R
					LEFT JOIN @SOLICITACAO S
					ON S.ID_SOLICITACAO = @ID_SOLICITACAO) S 
				WHERE S.TIPO_SOLICITACAO IS NOT NULL

			END TRY
			BEGIN CATCH
				SET @ABORTAR = 1
				SET @MSG_ERRO = 'ERRO ' + CAST(ERROR_NUMBER() AS VARCHAR) + ' ' + ERROR_MESSAGE()
			END CATCH
		END

		IF @ABORTAR = 0 
			IF @ORIGEM_SOLICITACAO = 1	-- Solicitação do ERP
			BEGIN
				BEGIN TRY
					UPDATE LGPD_SOLICITACAO_RECEBIDA
						SET DOCUMENTO = '', 
							ID_LGPD_STATUS_PROCESSAMENTO = CASE WHEN LEN(@MSG_RETORNO) > 0 THEN 2 ELSE 3 END,
							MSG_RESULTADO_LOJA = @MSG_RETORNO,
							DATA_PROCESSAMENTO = GETDATE(),
							DATA_PARA_TRANSFERENCIA = GETDATE() 
					WHERE ID_LGPD_SOLICITACAO_LOJA = @ID_SOLICITACAO 
				END TRY
				BEGIN CATCH
					SET @ABORTAR = 1
					SET @MSG_ERRO = 'ERRO ' + CAST(ERROR_NUMBER() AS VARCHAR) + ' ' + ERROR_MESSAGE()
				END CATCH
			END
			ELSE
				IF @ORIGEM_SOLICITACAO = 2	-- Solicitação de pendência
				BEGIN
					BEGIN TRY
						UPDATE LGPD_SOLICITACAO_PENDENTE
							SET DOCUMENTO = '', 
								ID_LGPD_STATUS_PROCESSAMENTO = CASE WHEN LEN(@MSG_RETORNO) > 0 THEN 2 ELSE 3 END,
								DATA_PROCESSAMENTO = GETDATE() 
						WHERE ID_LGPD_SOLICITACAO_PENDENTE = @ID_SOLICITACAO 
					END TRY
					BEGIN CATCH
						SET @ABORTAR = 1
						SET @MSG_ERRO = 'ERRO ' + CAST(ERROR_NUMBER() AS VARCHAR) + ' ' + ERROR_MESSAGE()
					END CATCH
				END

		IF @ABORTAR = 1
		BEGIN
			ROLLBACK TRAN
		END
		ELSE
		BEGIN
			COMMIT TRAN
		END
	END
	SET CONTEXT_INFO @CONTEXT_INFO
END

-- POSSP-5738 - Roberto Beda - (30/06/2021) - LGPD (ajustes para as chamadas via Fox)
-- POSSP-5737 - Roberto Beda - (30/06/2021) - LGPD (validação de todos os parâmetros da procedure)
-- POSSP-5737 - Roberto Beda - (28/06/2021) - LGPD (eliminação e anonimização preservando dados em função de hipóteses de tratamento)
-- POSSP-5736 - Roberto Beda - (22/06/2021) - LGPD (eliminação e anonimização com gravação de log)
-- POSSP-5698 - Gilvano Santos - (20/06/2021) - LGPD (eliminação e anonimização)
CREATE PROCEDURE [dbo].[LX_LJ_LGPD_TRATAMENTO]  (@CODIGO_FILIAL CHAR(6), @ORIGEM_SOLICITACAO TINYINT, @ID_SOLICITACAO INT, @TIPO_IDENTIFICADOR TINYINT, @IDENTIFICADOR VARCHAR(64), @TRATAMENTO INT, @TIPO_PAF TINYINT)
AS
/*
-- @CODIGO_FILIAL: Código da filial
-- @ORIGEM_SOLICITACAO: 1 = ERP, 2 = PENDENCIA, 3 = AVULSA
-- @ID_SOLICITACAO: Identificador da solicitação a ser tratada
-- @TIPO_IDENTIFICADOR: 1 = CPF, 2 = CODIGO_CLIENTE (tipo de identificador enviado na solicitação)
-- @IDENTIFICADOR: Identificador da pessoa alvo da solicitação (CPF ou CODIGO_CLIENTE) conforme @TIPO_IDENTIFICADOR
-- @TRATAMENTO: 1 = Exclusão de dados, 2 = Anonimização 
-- @TIPO_PAF: 0=não é PAF, 1=PAF-ECF, 2=PAF-NFC-e, 3=PAF-DAF
*/
BEGIN
	SET NOCOUNT ON

	DECLARE @ABORTAR BIT, @MSG_ERRO VARCHAR(1024), @MSG_RETORNO VARCHAR(1024), @CPF VARCHAR(14), @CODIGO_CLIENTE VARCHAR(14)
	SET @ABORTAR = 0
	SET @MSG_ERRO = ''
	SET @MSG_RETORNO = ''

	DECLARE @DIAS_OBRIGA_FISCAL INT, @DIAS_AUTORIZAR_NF INT, @DIAS_PEDIDO_PEND INT, @DIAS_ENVIO_ERP INT, @DIAS_CONSERTO_PEND INT,
			@P_DIAS_OBRIGA_FISCAL VARCHAR(25), @P_DIAS_AUTORIZAR_NF VARCHAR(25), @P_DIAS_PEDIDO_PEND VARCHAR(25), @P_DIAS_ENVIO_ERP VARCHAR(25), @P_DIAS_CONSERTO_PEND VARCHAR(25)

	SET @P_DIAS_OBRIGA_FISCAL = 'LGPD_DIAS_OBRIGA_FISCAL'
	SET @P_DIAS_AUTORIZAR_NF = 'LGPD_DIAS_AUTORIZAR_NF'
	SET @P_DIAS_PEDIDO_PEND = 'LGPD_DIAS_PEDIDO_PEND'
	SET @P_DIAS_ENVIO_ERP = 'LGPD_DIAS_ENVIO_ERP'
	SET @P_DIAS_CONSERTO_PEND = 'LGPD_DIAS_CONSERTO_PEND'

	SELECT @DIAS_OBRIGA_FISCAL = CAST(VALOR_ATUAL AS INT) FROM dbo.fn_GetParameter(@CODIGO_FILIAL, NULL, @P_DIAS_OBRIGA_FISCAL)
	SELECT @DIAS_AUTORIZAR_NF = CAST(VALOR_ATUAL AS INT) FROM dbo.fn_GetParameter(@CODIGO_FILIAL, NULL, @P_DIAS_AUTORIZAR_NF)
	SELECT @DIAS_PEDIDO_PEND = CAST(VALOR_ATUAL AS INT) FROM dbo.fn_GetParameter(@CODIGO_FILIAL, NULL, @P_DIAS_PEDIDO_PEND)
	SELECT @DIAS_ENVIO_ERP = CAST(VALOR_ATUAL AS INT) FROM dbo.fn_GetParameter(@CODIGO_FILIAL, NULL, @P_DIAS_ENVIO_ERP)
	SELECT @DIAS_CONSERTO_PEND = CAST(VALOR_ATUAL AS INT) FROM dbo.fn_GetParameter(@CODIGO_FILIAL, NULL, @P_DIAS_CONSERTO_PEND)

	BEGIN TRY
		INSERT INTO LJ_LGPD_LOG (ORIGEM_SOLICITACAO, ID_LGPD_SOLICITACAO, CODIGO_FILIAL, CODIGO_OCORRENCIA, DESCRICAO, DATA_HORA_LOG) 
		VALUES (ISNULL(@ORIGEM_SOLICITACAO, 0), @ID_SOLICITACAO, ISNULL(@CODIGO_FILIAL, ''), 1, 
		'Solicitação: Origem=' + ISNULL(CAST(@ORIGEM_SOLICITACAO AS VARCHAR), 'NULL') + 
		', ID=' + ISNULL(CAST(@ID_SOLICITACAO AS VARCHAR), 'NULL') + ', Tipo=' + ISNULL(CAST(@TIPO_IDENTIFICADOR AS VARCHAR), 'NULL') + 
		', TRATAMENTO=' + ISNULL(CAST(@TRATAMENTO AS VARCHAR), 'NULL') + ', Tipo PAF=' + ISNULL(CAST(@TIPO_PAF AS VARCHAR), 'NULL') + + ', ' +
		@P_DIAS_OBRIGA_FISCAL + '=' + ISNULL(CAST(@DIAS_OBRIGA_FISCAL AS VARCHAR), 'NULL') + ', ' +
		@P_DIAS_AUTORIZAR_NF + '=' + ISNULL(CAST(@DIAS_AUTORIZAR_NF AS VARCHAR), 'NULL') + ', ' +
		@P_DIAS_PEDIDO_PEND + '=' + ISNULL(CAST(@DIAS_PEDIDO_PEND AS VARCHAR), 'NULL') + ', ' +
		@P_DIAS_ENVIO_ERP + '=' + ISNULL(CAST(@DIAS_ENVIO_ERP AS VARCHAR), 'NULL') + ', ' +
		@P_DIAS_CONSERTO_PEND + '=' + ISNULL(CAST(@DIAS_CONSERTO_PEND AS VARCHAR), 'NULL'), 
		GETDATE())
	END TRY
	BEGIN CATCH
		SET @ABORTAR = 1
		SET @MSG_ERRO = 'ERRO ' + CAST(ERROR_NUMBER() AS VARCHAR) + ' ' + ERROR_MESSAGE()
	END CATCH

	-- Validação dos parâmetros da procedure
	IF @ABORTAR = 0
	BEGIN
		IF @CODIGO_FILIAL IS NULL 
			SET @MSG_ERRO = 'Informe o código da filial.'
		ELSE
			IF NOT EXISTS (SELECT TOP 1 1 FROM LOJAS_VAREJO WHERE CODIGO_FILIAL = @CODIGO_FILIAL)
				SET @MSG_ERRO = 'Loja varejo de código ' + ISNULL(@CODIGO_FILIAL, 'NULL') + ' não encontrada.'
		SET @ABORTAR = CASE WHEN LEN(@MSG_ERRO) > 0 THEN 1 ELSE 0 END		
	END

	IF @ABORTAR = 0
	BEGIN
		IF @ORIGEM_SOLICITACAO < 1 OR @ORIGEM_SOLICITACAO > 3 OR @ORIGEM_SOLICITACAO IS NULL
		BEGIN
			SET @ABORTAR = 1
			SET @MSG_ERRO = 'A origem da solicitação ' + ISNULL(CAST(@ORIGEM_SOLICITACAO AS VARCHAR), 'NULL') + ' é inválida.'
		END
	END

	IF @ABORTAR = 0
	BEGIN
		IF @ORIGEM_SOLICITACAO = 1
		BEGIN
			IF NOT EXISTS (SELECT TOP 1 1 FROM LGPD_SOLICITACAO_RECEBIDA WHERE CODIGO_FILIAL = @CODIGO_FILIAL AND ID_LGPD_SOLICITACAO_LOJA = @ID_SOLICITACAO)
				SET @MSG_ERRO = 'A solicitação ' + ISNULL(CAST(@ID_SOLICITACAO AS VARCHAR), 'NULL') + ' do ERP não foi encontrada para a loja ' + ISNULL(@CODIGO_FILIAL, 'NULL') + '.' 
		END
		ELSE
			IF @ORIGEM_SOLICITACAO = 2
			BEGIN
				IF NOT EXISTS (SELECT TOP 1 1 FROM LGPD_SOLICITACAO_PENDENTE WHERE CODIGO_FILIAL = @CODIGO_FILIAL AND ID_LGPD_SOLICITACAO_PENDENTE = @ID_SOLICITACAO)
					SET @MSG_ERRO = 'A solicitação pendente ' + ISNULL(CAST(@ID_SOLICITACAO AS VARCHAR), 'NULL') + ' da loja ' + ISNULL(@CODIGO_FILIAL, 'NULL') + ' não foi encontrada.'
			END
			ELSE
				IF @ID_SOLICITACAO IS NULL
				BEGIN
					SET @MSG_ERRO = 'O identificador da solicitação não foi informado.'
				END
		SET @ABORTAR = CASE WHEN LEN(@MSG_ERRO) > 0 THEN 1 ELSE 0 END		
	END

	IF @ABORTAR = 0
	BEGIN
		IF @IDENTIFICADOR IS NULL
		BEGIN
			SET @ABORTAR = 1
			SET @MSG_ERRO = 'Identificador não informado.'
		END
	END

	IF @ABORTAR = 0
	BEGIN
		IF @TIPO_IDENTIFICADOR = 1
		BEGIN
			SET @CPF = LEFT(REPLACE(REPLACE(REPLACE(@IDENTIFICADOR, '.', ''),'-',''), ' ', ''), 14)
			IF LEN(@CPF) <> 11 OR ISNUMERIC(@CPF) = 0
			BEGIN
				SET @ABORTAR = 1
				SET @MSG_ERRO = 'O CPF informado é inválido (' + ISNULL(@IDENTIFICADOR, 'NULL') + ').'
			END
			ELSE
			BEGIN
				SELECT @CODIGO_CLIENTE = CODIGO_CLIENTE FROM CLIENTES_VAREJO WHERE PF_PJ = 1 AND CPF_CGC = @CPF 
			END
		END
		ELSE
			IF @TIPO_IDENTIFICADOR = 2
			BEGIN
				SET @CODIGO_CLIENTE = @IDENTIFICADOR
				SELECT @CPF = CPF_CGC FROM CLIENTES_VAREJO WHERE CODIGO_CLIENTE = @CODIGO_CLIENTE AND PF_PJ = 1
			END
			ELSE
				BEGIN
					SET @ABORTAR = 1
					SET @MSG_ERRO = 'Tipo de identificador inválido (' + ISNULL(CAST(@TIPO_IDENTIFICADOR AS VARCHAR), 'NULL') + ')'
				END
	END

	IF @ABORTAR = 0 AND (@TRATAMENTO < 1 OR @TRATAMENTO > 2 OR @TRATAMENTO IS NULL)
	BEGIN
		SET @ABORTAR = 1
		SET @MSG_ERRO = 'O tratamento ' + ISNULL(CAST(@TRATAMENTO AS VARCHAR), 'NULL') + ' é inválido.'
	END

	IF @ABORTAR = 0 AND (@TIPO_PAF < 0 OR @TIPO_PAF > 3 OR @TIPO_PAF IS NULL)
	BEGIN
		SET @ABORTAR = 1
		SET @MSG_ERRO = 'Tipo de PAF inválido (' + ISNULL(CAST(@TIPO_PAF AS VARCHAR), 'NULL') + ').'
	END

	IF @ABORTAR = 0
	BEGIN TRY
--		EXEC dbo.LX_LJ_LGPD_TRATAMENTO_EXCLUSAO @CODIGO_FILIAL, @ID_SOLICITACAO, @CPF, @CODIGO_CLIENTE, @MSG_ERRO OUTPUT				
		EXEC dbo.LX_LJ_LGPD_TRATAMENTO_EXCLUSAO @CODIGO_FILIAL, @ORIGEM_SOLICITACAO, @ID_SOLICITACAO, @CPF, @CODIGO_CLIENTE,
												@DIAS_OBRIGA_FISCAL, @DIAS_AUTORIZAR_NF, @DIAS_PEDIDO_PEND, @DIAS_ENVIO_ERP, @DIAS_CONSERTO_PEND, @TIPO_PAF, 
												@MSG_ERRO OUTPUT, @MSG_RETORNO OUTPUT				
	END TRY
	BEGIN CATCH
		SET @ABORTAR = 1
		SET @MSG_ERRO = 'ERRO ' + CAST(ERROR_NUMBER() AS VARCHAR) + ' ' + ERROR_MESSAGE()
	END CATCH

	IF LEN(ISNULL(@MSG_ERRO, '')) > 0 
		SET @ABORTAR = 1
	
	BEGIN TRY
		INSERT INTO LJ_LGPD_LOG (ORIGEM_SOLICITACAO, ID_LGPD_SOLICITACAO, CODIGO_FILIAL, CODIGO_OCORRENCIA, DESCRICAO, DATA_HORA_LOG) 
		VALUES (ISNULL(@ORIGEM_SOLICITACAO, 0), @ID_SOLICITACAO, ISNULL(@CODIGO_FILIAL, ''), 3, CASE WHEN @ABORTAR = 1 THEN 'Processo não concluído: ' + @MSG_ERRO ELSE  CASE WHEN LEN(@MSG_RETORNO) > 0 THEN @MSG_RETORNO ELSE 'Solicitação integralmente atendida.' END END, GETDATE())
	END TRY
	BEGIN CATCH
		SET @ABORTAR = 1
		SET @MSG_ERRO = 'ERRO ' + CAST(ERROR_NUMBER() AS VARCHAR) + ' ' + ERROR_MESSAGE()
	END CATCH

	-- Exibição do resultado do processamento
	IF @ABORTAR = 1
		PRINT @MSG_ERRO
	ELSE
		BEGIN
			PRINT '@CPF=' + ISNULL(@CPF, 'NULL') + ' - @CODIGO_CLIENTE=' + ISNULL(@CODIGO_CLIENTE, 'NULL')
			PRINT CASE WHEN LEN(@MSG_RETORNO) > 0 THEN @MSG_RETORNO ELSE 'Solicitação integralmente atendida.' END
		END

	SELECT @ABORTAR AS ERRO, @MSG_ERRO AS MENSAGEM_ERRO
END

CREATE PROCEDURE [dbo].[LX_ESTOQUE_PAF_ECF] @CODIGO_FILIAL VARCHAR(6) , @Filial varchar(50) ,@CNPJ_LOCAL AS VARCHAR(14) ,@StringBufer varchar(100)

--18/10/2017 - Diego Moreno - DM 48244 - #5# - Utilização de tabela temporária para geração dos registros de código de barras ao invés de utilizar a function FX_LINXPOS_PROD. 
--03/11/2016 - Wendel Crespigio - DM 11389 - #4# - Melhoria de performance geração dos registros de estoque do PAF na primeira venda do dia 
--31/10/2016 - Vívian Domingues - DM 11389 - #3# - Tabela LJ_ESTOQUE_PAF_ECF não aceita valor nulo no campo SALDO_ESTOQUE. 
--24/06/2016 - Gerson Prado     -          - #2# - Gravar na tabela LJ_ESTOQUE_PAF_ECF o saldo de estoque por grade. 
--29/03/2016 - Eder Silva       -          - #1# - Inclusa instrução WITH(XLOCK ROWLOCK) no insert e update para evitar deadlock 
--01/08/2015 - Wendel Crespigio - Criação de procedure para gravação na tabela LJ_ESTOQUE_PAF_ECF PAF ECF 2015

AS
SET NOCOUNT ON 
BEGIN 

Set @StringBufer = rtrim(ltrim(@StringBufer))
Set @Filial = rtrim(ltrim(@Filial))

	IF Object_id('TEMPDB..#TABPRODUTOE2') IS NOT NULL 
     BEGIN 
    	DROP TABLE #TABPRODUTOE2 
	 END; 

	 IF Object_id('TEMPDB..#PRODUTOS_BARRA_TEMP') IS NOT NULL 
     BEGIN 
    	DROP TABLE #PRODUTOS_BARRA_TEMP 
	 END; 


	CREATE TABLE #TABPRODUTOE2 (PRODUTO    VARCHAR(30) COLLATE DATABASE_DEFAULT, 
							COR_PRODUTO    VARCHAR(10) COLLATE DATABASE_DEFAULT, 
							GRADE          VARCHAR(8)  COLLATE DATABASE_DEFAULT,  
							CODIGO_PRODUTO VARCHAR(25) COLLATE DATABASE_DEFAULT, 
							DESC_PRODUTO   VARCHAR(40) COLLATE DATABASE_DEFAULT, --#2#
							UNIDADE		   VARCHAR(5)  COLLATE DATABASE_DEFAULT, --#2#
							TAMANHO        INT,
							TIPO_COD_BAR   INT,
    				        CODIGO_BARRA   VARCHAR(25)COLLATE DATABASE_DEFAULT,
							SALDO_ESTOQUE	INT )								 --#2# 

--#5# - INICIO
CREATE TABLE #PRODUTOS_BARRA_TEMP
(
		PRODUTO     VARCHAR(30) COLLATE DATABASE_DEFAULT, 
		COR_PRODUTO  VARCHAR(10) COLLATE DATABASE_DEFAULT, 
		GRADE     VARCHAR(8)  COLLATE DATABASE_DEFAULT,  
		CODIGO_PRODUTO  VARCHAR(25) COLLATE DATABASE_DEFAULT,
		TAMANHO     INT, 
		TIPO_COD_BAR  INT,
		CODIGO_BARRA   VARCHAR(25)COLLATE DATABASE_DEFAULT,
		TIPO BIT
)


INSERT INTO #PRODUTOS_BARRA_TEMP(PRODUTO,      COR_PRODUTO, GRADE,    CODIGO_PRODUTO, TAMANHO ,    TIPO_COD_BAR ,CODIGO_BARRA           ,   TIPO)
SELECT PRODUTO, COR_PRODUTO, GRADE, LEFT(MAX(CODIGO_BARRA), 14) AS CODIGO_BARRA14, MAX(TAMANHO) AS TAMANHO, MAX(TIPO_COD_BAR) AS TIPO_COD_BAR, MAX(CODIGO_BARRA) AS CODIGO_BARRA, max(CASE WHEN TIPO_COD_BAR = 1 AND LEN(CODIGO_BARRA) <= 14 THEN 1 ELSE 0 END) AS TIPO
	FROM PRODUTOS_BARRA
	WHERE TIPO_COD_BAR IS NOT NULL
	 AND INATIVO = 0 
	GROUP BY PRODUTO, COR_PRODUTO, GRADE--, CASE WHEN TIPO_COD_BAR = 1 AND LEN(CODIGO_BARRA) <= 14 THEN 1 ELSE 0 END
--#5# FIM


		INSERT #TABPRODUTOE2  ( PRODUTO ,COR_PRODUTO,GRADE, CODIGO_PRODUTO ,TAMANHO,TIPO_COD_BAR,CODIGO_BARRA, SALDO_ESTOQUE, DESC_PRODUTO, UNIDADE  ) --#2#
		-- #2# SELECT  PRODUTO ,COR_PRODUTO ,GRADE,CODIGO_PRODUTO ,TAMANHO ,TIPO_COD_BAR ,CODIGO_BARRA 
		-- #2# from dbo.FX_LINXPOS_PROD (@CODIGO_FILIAL)
		-- #2# Inicio
		SELECT  fxl.PRODUTO ,fxl.COR_PRODUTO ,fxl.GRADE,fxl.CODIGO_PRODUTO ,fxl.TAMANHO ,fxl.TIPO_COD_BAR ,fxl.CODIGO_BARRA,
			CASE fxl.TAMANHO 
				WHEN 1 THEN ISNULL(EST.ES1, 0) --#3#
				WHEN 2 THEN ISNULL(EST.ES2, 0) --#3#
				WHEN 3 THEN ISNULL(EST.ES3, 0) --#3#
				WHEN 4 THEN ISNULL(EST.ES4, 0) --#3#
				WHEN 5 THEN ISNULL(EST.ES5, 0) --#3#
				WHEN 6 THEN ISNULL(EST.ES6, 0) --#3#
				WHEN 7 THEN ISNULL(EST.ES7, 0) --#3#
				WHEN 8 THEN ISNULL(EST.ES8, 0) --#3#
				WHEN 9 THEN ISNULL(EST.ES9, 0) --#3#
				WHEN 10 THEN ISNULL(EST.ES10, 0) --#3#
				ELSE 
					CASE fxl.TAMANHO 
					WHEN 11 THEN ISNULL(EST.ES11, 0) --#3#
					WHEN 12 THEN ISNULL(EST.ES12, 0) --#3#
					WHEN 13 THEN ISNULL(EST.ES13, 0) --#3#
					WHEN 14 THEN ISNULL(EST.ES14, 0) --#3#
					WHEN 15 THEN ISNULL(EST.ES15, 0) --#3#
					WHEN 16 THEN ISNULL(EST.ES16, 0) --#3#
					WHEN 17 THEN ISNULL(EST.ES17, 0) --#3#
					WHEN 18 THEN ISNULL(EST.ES18, 0) --#3#
					WHEN 19 THEN ISNULL(EST.ES19, 0) --#3#
					WHEN 20 THEN ISNULL(EST.ES20, 0) --#3#
					ELSE
						CASE fxl.TAMANHO 
						WHEN 21 THEN ISNULL(EST.ES21, 0) --#3#
						WHEN 21 THEN ISNULL(EST.ES21, 0) --#3#
						WHEN 22 THEN ISNULL(EST.ES22, 0) --#3#
						WHEN 23 THEN ISNULL(EST.ES23, 0) --#3#
						WHEN 24 THEN ISNULL(EST.ES24, 0) --#3#
						WHEN 25 THEN ISNULL(EST.ES25, 0) --#3#
						WHEN 26 THEN ISNULL(EST.ES26, 0) --#3#
						WHEN 27 THEN ISNULL(EST.ES27, 0) --#3#
						WHEN 28 THEN ISNULL(EST.ES28, 0) --#3#
						WHEN 29 THEN ISNULL(EST.ES29, 0) --#3#
						WHEN 30 THEN ISNULL(EST.ES30, 0) --#3#
						ELSE
							CASE fxl.TAMANHO 
							WHEN 31 THEN ISNULL(EST.ES31, 0) --#3#
							WHEN 32 THEN ISNULL(EST.ES32, 0) --#3#
							WHEN 33 THEN ISNULL(EST.ES33, 0) --#3#
							WHEN 34 THEN ISNULL(EST.ES34, 0) --#3#
							WHEN 35 THEN ISNULL(EST.ES35, 0) --#3#
							WHEN 36 THEN ISNULL(EST.ES36, 0) --#3#
							WHEN 37 THEN ISNULL(EST.ES37, 0) --#3#
							WHEN 38 THEN ISNULL(EST.ES38, 0) --#3#
							WHEN 39 THEN ISNULL(EST.ES39, 0) --#3#
							WHEN 40 THEN ISNULL(EST.ES40, 0) --#3#
							ELSE
								CASE fxl.TAMANHO 
								WHEN 41 THEN ISNULL(EST.ES41, 0) --#3#
								WHEN 42 THEN ISNULL(EST.ES42, 0) --#3#
								WHEN 43 THEN ISNULL(EST.ES43, 0) --#3#
								WHEN 44 THEN ISNULL(EST.ES44, 0) --#3#
								WHEN 45 THEN ISNULL(EST.ES45, 0) --#3#
								WHEN 46 THEN ISNULL(EST.ES46, 0) --#3#
								WHEN 47 THEN ISNULL(EST.ES47, 0) --#3#
								WHEN 48 THEN ISNULL(EST.ES48, 0) --#3#
								ELSE 0 --#0# INSERIDO 0 NO CASO DE A INFOMAÇÃO DO TAMANHO SER NULO
								END
							END
						END
					END
				END AS SALDO_ESTOQUE, PRD.DESC_PRODUTO, UNIDADE 
		--from dbo.FX_LINXPOS_PROD (@CODIGO_FILIAL) fxl
		FROM #PRODUTOS_BARRA_TEMP fxl --#5# 
		INNER JOIN DBO.ESTOQUE_PRODUTOS EST				
			ON fxl.PRODUTO = EST.PRODUTO AND fxl.COR_PRODUTO = EST.COR_PRODUTO 
		INNER JOIN DBO.PRODUTOS PRD						
			ON	EST.PRODUTO = PRD.PRODUTO				
		WHERE EST.FILIAL = @Filial	
		AND  fxl.TIPO in(0,1)
		-- #2# Fim		

	INSERT INTO 
			DBO.LJ_ESTOQUE_PAF_ECF  WITH(XLOCK ROWLOCK) --#1#
			(CODIGO_FILIAL, CODIGO_PRODUTO, CNPJ_ESTABELECIMENTO, DESCRICAO_PRODUTO,DESCRICAO_UNIDADE,SALDO_ESTOQUE,LX_HASH)
			
		SELECT 	@CODIGO_FILIAL,
				C.CODIGO_BARRA ,
				@CNPJ_LOCAL,	
				-- #2# Inicio
				-- B.DESC_PRODUTO,
				-- B.UNIDADE,
				-- SUM(A.ESTOQUE) AS SALDO				
				C.DESC_PRODUTO,
				C.UNIDADE,
				C.SALDO_ESTOQUE, 
				-- #2# Fim
				HASHBYTES('MD5', @StringBufer)
		FROM #TABPRODUTOE2 C --#2#
		WHERE C.SALDO_ESTOQUE IS NOT NULL --#4#
		-- #2# Inicio
		--FROM DBO.ESTOQUE_PRODUTOS A
		--INNER JOIN DBO.PRODUTOS B 
		--	ON A.PRODUTO = B.PRODUTO	
        --INNER JOIN  #TABPRODUTOE2 C
		--	ON A.PRODUTO =C.PRODUTO
		--	AND A.COR_PRODUTO =C.COR_PRODUTO 
		--WHERE A.FILIAL   = @Filial
		GROUP BY C.CODIGO_BARRA,--#5#
				 C.DESC_PRODUTO, 
				 C.UNIDADE,
				 SALDO_ESTOQUE --#2#
		ORDER BY C.CODIGO_BARRA	;--#5#
		-- #2# Fim

-- Faz o update do hash na tabela LJ_ESTOQUE_PAF_ECF apos inserir dados.
		UPDATE 
			DBO.LJ_ESTOQUE_PAF_ECF  WITH(XLOCK ROWLOCK) --#1#
		SET LX_HASH = HASHBYTES('MD5', @StringBufer + CODIGO_FILIAL + CNPJ_ESTABELECIMENTO + CODIGO_PRODUTO + DESCRICAO_PRODUTO + DESCRICAO_UNIDADE + CAST(SALDO_ESTOQUE AS VARCHAR))
		WHERE
			CODIGO_FILIAL = @CODIGO_FILIAL	;

END

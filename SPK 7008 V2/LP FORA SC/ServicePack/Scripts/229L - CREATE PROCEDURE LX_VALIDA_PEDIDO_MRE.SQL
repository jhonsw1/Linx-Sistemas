CREATE PROCEDURE [dbo].[LX_VALIDA_PEDIDO_MRE] ( @NUM_PEDIDO INT, 
											   @CODIGO_FILIAL_ORIGEM CHAR(6),
											   @ATUALIZA TINYINT = 0, 
											   @VALOR_RE NUMERIC(14,2))

	
AS

DECLARE @ERRNO INT, @ERRMSG VARCHAR(255)

BEGIN
	SET @ERRNO = 15

	DECLARE @NUM_PEDIDO_BANCO INT , 
			@LXTIPOPREVENDA TINYINT, 
			@SEQUENCIALPREVENDA CHAR(13),
			@VALORTOTAL NUMERIC(14,2),
			@VALORTOTALPRODUTOS NUMERIC(14,2),
			@FRETE NUMERIC(14,2),
			@OUTRASDESPESAS NUMERIC(14,2),
			@OUTRASDESPESASITENS NUMERIC(14,2),
			@DESCONTO NUMERIC(14,2),
			@CLIENTE VARCHAR(14),
			@CLIENTEVAREJO VARCHAR(14),
			@TOTALOUTRASDESPESASITENS NUMERIC(14,2)

--*(¯`·.¸¸.·´¯`·.¸¸.->  --*(¯`·.¸¸.·´¯`·.¸¸.-> VALIDAÇÕES DO PEDIDO --*(¯`·.¸¸.·´¯`·.¸¸.->  --*(¯`·.¸¸.·´¯`·.¸¸.-> 


--*(¯`·.¸¸.·´¯`·.¸¸.-> VALIDA SE O NUM PEDIDO FOI INFORMADO.
	 IF @NUM_PEDIDO IS NULL
		BEGIN
			SET @ERRMSG  = 'O pedido não pode ser nulo.'
			GOTO ERROR
		END


		SELECT  @NUM_PEDIDO_BANCO = PEDIDO, 
				@LXTIPOPREVENDA = LX_TIPO_PRE_VENDA,
				@SEQUENCIALPREVENDA = RTRIM(LTRIM(ISNULL(SEQUENCIAL_PRE_VENDA,''))),
				@VALORTOTAL = ISNULL(VALOR_TOTAL,0) + ISNULL(OUTRAS_DESPESAS,0) + ISNULL(OUTRAS_DESPESAS_ITENS,0),
				@FRETE = ISNULL(FRETE,0),
				@OUTRASDESPESAS = ISNULL(OUTRAS_DESPESAS,0),
				@OUTRASDESPESASITENS = ISNULL(OUTRAS_DESPESAS_ITENS,0),
				@DESCONTO = ISNULL(DESCONTO,0),
				@CLIENTE = CODIGO_CLIENTE		
		FROM LOJA_PEDIDO WHERE PEDIDO = @NUM_PEDIDO AND CODIGO_FILIAL_ORIGEM = @CODIGO_FILIAL_ORIGEM

		--Ajusta o Valor da RE para Considerar as Despesas e DespesasItens que não são consideradas no @VALOR_RE.
		SET @VALOR_RE = @VALOR_RE + @OUTRASDESPESAS + @OUTRASDESPESASITENS;

--*(¯`·.¸¸.·´¯`·.¸¸.-> VALIDA SE O PEDIDO EXISTE NO BANCO.

		IF @NUM_PEDIDO_BANCO IS NULL
		BEGIN
			SET @ERRMSG  = 'Pedido informado não encontrado.'		
			GOTO ERROR
	END    
 
 
 --*(¯`·.¸¸.·´¯`·.¸¸.-> VALIDA LX_TIPO_PRE_VENDA É 1 (PRÉ-VENDA) OU 2 (DAV).

	IF @LXTIPOPREVENDA NOT IN (1,2)
	BEGIN
		SET @ERRMSG  = 'O pedido informado não corresponde á uma Pré-venda ou DAV.'
		GOTO ERROR
	END


 --*(¯`·.¸¸.·´¯`·.¸¸.-> VALIDA SEQUENCIAL_PRE_VENDA ESTÁ PREENCHIDO(DEVE ESTAR VAZIO).

	IF @ATUALIZA = 0 AND @SEQUENCIALPREVENDA <> ''

	BEGIN
		SET @ERRMSG  = 'O pedido informado já é uma Pré-venda ou DAV.'
		GOTO ERROR
	END

 --*(¯`·.¸¸.·´¯`·.¸¸.-> VALIDA SE O VALOR DA RE É COMPATIVEL COM O VALOR DO PEDIDO.

	IF @VALOR_RE <> (@VALORTOTAL + @FRETE)
	BEGIN
		SET @ERRMSG  = 'O valor da RE informado é diferente do valor total líquido do pedido.'
		GOTO ERROR	
	END

	IF @LXTIPOPREVENDA = 2
	BEGIN
		--*(¯`·.¸¸.·´¯`·.¸¸.-> SE O PEDIDO FOR DAV LXTIPOPREVENDA = 2 ( DEVE TER CLIENTE)
		IF @CLIENTE IS NULL
		BEGIN
			SET @ERRMSG  = 'O cliente do DAV não foi informado.'
			GOTO ERROR	
		END

		SELECT  @CLIENTEVAREJO = CV.CODIGO_CLIENTE
				FROM LOJA_PEDIDO (NOLOCK)
				LEFT JOIN CLIENTES_VAREJO CV (NOLOCK) ON CV.CODIGO_CLIENTE = LOJA_PEDIDO.CODIGO_CLIENTE
						WHERE CODIGO_FILIAL_ORIGEM = @CODIGO_FILIAL_ORIGEM AND
								PEDIDO = @NUM_PEDIDO

	--*(¯`·.¸¸.·´¯`·.¸¸.-> VALIDAR SE O CLIENTE EXISTE NA TABELA CLIENTES_VAREJO (JOIN COM PEDIDO)
		IF @CLIENTEVAREJO IS NULL
		BEGIN
			SET @ERRMSG  = 'O cliente informado no DAV não existe.'
			GOTO ERROR	
		END

	END

--*(¯`·.¸¸.·´¯`·.¸¸.->  --*(¯`·.¸¸.·´¯`·.¸¸.-> FIM VALIDAÇÕES DO PEDIDO --*(¯`·.¸¸.·´¯`·.¸¸.->  --*(¯`·.¸¸.·´¯`·.¸¸.-> 


--*(¯`·.¸¸.·´¯`·.¸¸.->  --*(¯`·.¸¸.·´¯`·.¸¸.-> VALIDAÇÕES DOS PRODUTOS DO PEDIDO --*(¯`·.¸¸.·´¯`·.¸¸.->  --*(¯`·.¸¸.·´¯`·.¸¸.-> 

	SELECT @VALORTOTALPRODUTOS = (SUM(QTDE * PRECO_LIQUIDO))
		FROM LOJA_PEDIDO_PRODUTO (NOLOCK)
		WHERE PEDIDO = @NUM_PEDIDO AND CODIGO_FILIAL_ORIGEM = @CODIGO_FILIAL_ORIGEM


--*(¯`·.¸¸.·´¯`·.¸¸.-> VALIDAÇÃO DA SOMA TOTAL DOS ITENS + OUTRAS DESPESAS, SE DIFERE DO VALOR TOTAL DO PEDIDO
	IF @VALORTOTAL <> @VALORTOTALPRODUTOS
	BEGIN
		SET @ERRMSG  = 'O valor do pedido não condiz com o valor dos itens.'
		GOTO ERROR	
	END

--*(¯`·.¸¸.·´¯`·.¸¸.-> 	VALIDA SE EXISTE ALGUM PRODUTO COM O CÓDIGO DE BARRAS EM BRANCO/VAZIO.
	IF EXISTS( SELECT * FROM LOJA_PEDIDO_PRODUTO (NOLOCK)
		WHERE PEDIDO = @NUM_PEDIDO AND CODIGO_FILIAL_ORIGEM = @CODIGO_FILIAL_ORIGEM AND (CODIGO_BARRA IS NULL OR CODIGO_BARRA = ''))
	BEGIN
			SET @ERRMSG  = 'Existe item sem código de barras.'
			GOTO ERROR	
	END


--*(¯`·.¸¸.·´¯`·.¸¸.-> VERIFICA SE EXISTE ALGUM PRODUTO COM A QUANTIDADE ZERADA NA LOJA_PEDIDO_PRODUTO
	IF EXISTS( SELECT * FROM LOJA_PEDIDO_PRODUTO (NOLOCK)
		WHERE PEDIDO = @NUM_PEDIDO AND CODIGO_FILIAL_ORIGEM = @CODIGO_FILIAL_ORIGEM AND QTDE = 0)
	BEGIN
			SET @ERRMSG  = 'Existe item sem quantidade.'
			GOTO ERROR	
	END

--*(¯`·.¸¸.·´¯`·.¸¸.-> VERIFICA SE EXISTE ALGUM PRODUTO COM A PREÇO LIQUIDO ZERADO NA LOJA_PEDIDO_PRODUTO
	IF EXISTS( SELECT * FROM LOJA_PEDIDO_PRODUTO (NOLOCK)
		WHERE PEDIDO = @NUM_PEDIDO AND CODIGO_FILIAL_ORIGEM = @CODIGO_FILIAL_ORIGEM AND PRECO_LIQUIDO = 0)
	BEGIN
			SET @ERRMSG  = 'Existe item sem preço.'
			GOTO ERROR	
	END

--*(¯`·.¸¸.·´¯`·.¸¸.->  --*(¯`·.¸¸.·´¯`·.¸¸.-> FIM VALIDAÇÕES DOS PRODUTOS DO PEDIDO --*(¯`·.¸¸.·´¯`·.¸¸.->  --*(¯`·.¸¸.·´¯`·.¸¸.-> 


	  SELECT @NUM_PEDIDO AS 'PEDIDO'
END 

RETURN

ERROR:      
      	RAISERROR (@ERRMSG, @ERRNO, 1) 


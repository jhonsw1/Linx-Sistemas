CREATE TRIGGER DBO.LXU_LOJA_NOTA_FISCAL_OMS ON LOJA_NOTA_FISCAL FOR UPDATE NOT FOR REPLICATION AS
-- 06/03/2018 - Maydson Hedlund - #DM 61495 - #3# - Melhoria no momento da devolução de pedidos do tipo Ship - Linx OMS - Compatibilização para clientes que não utilizarem a tabela OMS_CHANGE_TRACKING.
-- 16/02/2018 - Maydson Hedlund - #DM 61495 - #2# - Melhoria no momento da devolução de pedidos do tipo Ship - Linx OMS.
-- 09/02/2018 - Maydson Hedlund - #DM 61495 - #1# - Criação de script.
BEGIN

	DECLARE	@NUMROWS	      INT,
		    @NULLCNT	      INT,
		    @VALIDCNT	      INT,
		    @INSCODIGO_FILIAL CHAR(6), 
		    @INSNF_NUMERO     CHAR(15), 
		    @INSSERIE_NF      CHAR(6),
		    @DELCODIGO_FILIAL CHAR(6), 
		    @DELNF_NUMERO     CHAR(15), 
		    @DELSERIE_NF      CHAR(6),
		    @ERRNO            INT,
		    @ERRMSG           VARCHAR(255)

	SELECT @NUMROWS = @@ROWCOUNT

    -- LOJAS_VAREJO - CHILD UPDATE RESTRICT
	IF	UPDATE(CODIGO_FILIAL)
	BEGIN
		SELECT @NULLCNT = 0
		SELECT @VALIDCNT = COUNT(*)
		FROM INSERTED, LOJAS_VAREJO
		WHERE	INSERTED.CODIGO_FILIAL = LOJAS_VAREJO.CODIGO_FILIAL

		IF @VALIDCNT + @NULLCNT != @NUMROWS
		BEGIN
			SELECT	@ERRNO  = 30002,
				@ERRMSG = 'IMPOSSÍVEL ATUALIZAR #LOJA_NOTA_FISCAL #PORQUE #LOJAS_VAREJO #NÃO EXISTE.'
			GOTO ERROR
		END
	END

    -- CLIENTES_VAREJO - CHILD UPDATE RESTRICT
	IF	UPDATE(CODIGO_CLIENTE)
	BEGIN
		SELECT @NULLCNT = 0
		SELECT @VALIDCNT = COUNT(*)
		FROM INSERTED, CLIENTES_VAREJO
		WHERE	INSERTED.CODIGO_CLIENTE = CLIENTES_VAREJO.CODIGO_CLIENTE

		SELECT @NULLCNT = COUNT(*)
		FROM INSERTED 
		WHERE	INSERTED.CODIGO_CLIENTE IS NULL

		IF @VALIDCNT + @NULLCNT != @NUMROWS
		BEGIN
			SELECT	@ERRNO  = 30002,
				@ERRMSG = 'IMPOSSÍVEL ATUALIZAR #LOJA_NOTA_FISCAL #PORQUE #CLIENTES_VAREJO #NÃO EXISTE.'
			GOTO ERROR
		END
	END

    -- LOJAS_VAREJO - CHILD UPDATE RESTRICT
	IF	UPDATE(COD_CLIFOR)
	BEGIN
		SELECT @NULLCNT = 0
		SELECT @VALIDCNT = COUNT(*)
		FROM INSERTED, CADASTRO_CLI_FOR
		WHERE	INSERTED.COD_CLIFOR = CADASTRO_CLI_FOR.COD_CLIFOR

		SELECT @NULLCNT = COUNT(*)
		FROM INSERTED 
		WHERE	INSERTED.COD_CLIFOR IS NULL

		IF @VALIDCNT + @NULLCNT != @NUMROWS
		BEGIN
			SELECT	@ERRNO  = 30002,
				@ERRMSG = 'IMPOSSÍVEL ATUALIZAR #LOJA_NOTA_FISCAL #PORQUE #CADASTRO_CLI_FOR #NÃO EXISTE.'
			GOTO ERROR
		END
	END

    -- LOJAS_NATUREZA_OPERACAO - CHILD UPDATE RESTRICT
	IF	UPDATE(NATUREZA_OPERACAO_CODIGO)
	BEGIN
		SELECT @NULLCNT = 0
		SELECT @VALIDCNT = COUNT(*)
		FROM INSERTED, LOJAS_NATUREZA_OPERACAO
		WHERE	INSERTED.NATUREZA_OPERACAO_CODIGO = LOJAS_NATUREZA_OPERACAO.NATUREZA_OPERACAO_CODIGO

		IF @VALIDCNT + @NULLCNT != @NUMROWS
		BEGIN
			SELECT	@ERRNO  = 30002,
				@ERRMSG = 'IMPOSSÍVEL ATUALIZAR #LOJA_NOTA_FISCAL #PORQUE #LOJAS_NATUREZA_OPERACAO #NÃO EXISTE.'
			GOTO ERROR
		END
	END

	------------------
	-- #1# - INÍCIO --
	------------------
    IF UPDATE(STATUS_NFE) BEGIN
        
        IF ((SELECT COUNT(1) FROM INSERTED INSERTED
			  INNER JOIN LOJAS_NATUREZA_OPERACAO LOJAS_NATUREZA_OPERACAO (NOLOCK)
                 ON LOJAS_NATUREZA_OPERACAO.NATUREZA_OPERACAO_CODIGO = INSERTED.NATUREZA_OPERACAO_CODIGO
              INNER JOIN CTB_LX_TIPO_OPERACAO CTB_LX_TIPO_OPERACAO (NOLOCK)
                 ON CTB_LX_TIPO_OPERACAO.CTB_TIPO_OPERACAO = LOJAS_NATUREZA_OPERACAO.CTB_TIPO_OPERACAO 
              WHERE CTB_LX_TIPO_OPERACAO.INDICA_ENTRADA_SAIDA = 'S') > 0) BEGIN
             
				UPDATE LOJA_PEDIDO
				   SET SITUACAO_OMS = CASE WHEN INSERTED.STATUS_NFE = 3
												THEN 3 -- PEDIDO POSSUI NF DE SAÍDA E ENVIADA MAS NÃO AUTORIZADA.
										   WHEN INSERTED.STATUS_NFE = 5
												THEN 4 -- PEDIDO POSSUI NF DE SAÍDA, ENVIADA E AUTORIZADA.
										   ELSE LOJA_PEDIDO.SITUACAO_OMS
									  END	
				  FROM INSERTED INSERTED
				 INNER JOIN LOJAS_NATUREZA_OPERACAO LOJAS_NATUREZA_OPERACAO (NOLOCK)
					ON LOJAS_NATUREZA_OPERACAO.NATUREZA_OPERACAO_CODIGO = INSERTED.NATUREZA_OPERACAO_CODIGO
				 INNER JOIN CTB_LX_TIPO_OPERACAO CTB_LX_TIPO_OPERACAO (NOLOCK)
					ON CTB_LX_TIPO_OPERACAO.CTB_TIPO_OPERACAO = LOJAS_NATUREZA_OPERACAO.CTB_TIPO_OPERACAO 
				 INNER JOIN LOJA_VENDA_PGTO LOJA_VENDA_PGTO (NOLOCK)
					ON LOJA_VENDA_PGTO.CODIGO_FILIAL = INSERTED.CODIGO_FILIAL
				   AND LOJA_VENDA_PGTO.NUMERO_FISCAL_VENDA = INSERTED.NF_NUMERO
				   AND LOJA_VENDA_PGTO.SERIE_NF_SAIDA = INSERTED.SERIE_NF
				 INNER JOIN LOJA_VENDA LOJA_VENDA (NOLOCK)
					ON LOJA_VENDA.CODIGO_FILIAL = LOJA_VENDA_PGTO.CODIGO_FILIAL
				   AND LOJA_VENDA.TERMINAL = LOJA_VENDA_PGTO.TERMINAL
				   AND LOJA_VENDA.LANCAMENTO_CAIXA = LOJA_VENDA_PGTO.LANCAMENTO_CAIXA
				   AND LOJA_VENDA.DATA_VENDA = LOJA_VENDA_PGTO.DATA
				 INNER JOIN (SELECT TICKET, CODIGO_FILIAL, DATA_VENDA, CODIGO_FILIAL_ORIGEM, PEDIDO
							   FROM LOJA_PEDIDO_VENDA LOJA_PEDIDO_VENDA (NOLOCK)
							  GROUP BY TICKET, CODIGO_FILIAL, DATA_VENDA, CODIGO_FILIAL_ORIGEM, PEDIDO
							) AS LOJA_PEDIDO_VENDA
					ON LOJA_PEDIDO_VENDA.CODIGO_FILIAL = LOJA_VENDA.CODIGO_FILIAL
				   AND LOJA_PEDIDO_VENDA.TICKET = LOJA_VENDA.TICKET
				   AND LOJA_PEDIDO_VENDA.DATA_VENDA = LOJA_VENDA.DATA_VENDA
				 INNER JOIN LOJA_PEDIDO LOJA_PEDIDO (NOLOCK)
					ON LOJA_PEDIDO.CODIGO_FILIAL_ORIGEM = LOJA_PEDIDO_VENDA.CODIGO_FILIAL_ORIGEM
				   AND LOJA_PEDIDO.PEDIDO = LOJA_PEDIDO_VENDA.PEDIDO
	    END
	    
	    IF ((SELECT COUNT(1) 
	           FROM INSERTED INSERTED
			  INNER JOIN LOJAS_NATUREZA_OPERACAO LOJAS_NATUREZA_OPERACAO (NOLOCK)
                 ON LOJAS_NATUREZA_OPERACAO.NATUREZA_OPERACAO_CODIGO = INSERTED.NATUREZA_OPERACAO_CODIGO
              INNER JOIN CTB_LX_TIPO_OPERACAO CTB_LX_TIPO_OPERACAO (NOLOCK)
                 ON CTB_LX_TIPO_OPERACAO.CTB_TIPO_OPERACAO = LOJAS_NATUREZA_OPERACAO.CTB_TIPO_OPERACAO 
              WHERE CTB_LX_TIPO_OPERACAO.INDICA_ENTRADA_SAIDA = 'E') > 0) BEGIN
             
				UPDATE LOJA_PEDIDO
				   SET SITUACAO_OMS = CASE WHEN INSERTED.STATUS_NFE = 3
												THEN 5 -- PEDIDO POSSUI NF DE ENTRADA (DEVOLUÇÃO) E ENVIADA MAS NÃO AUTORIZADA.
										   WHEN INSERTED.STATUS_NFE = 5
												THEN 6 -- PEDIDO POSSUI NF ENTRADA (DEVOLUÇÃO), ENVIADA E AUTORIZADA.
										   ELSE LOJA_PEDIDO.SITUACAO_OMS
									  END
				  FROM INSERTED INSERTED
				 INNER JOIN LOJAS_NATUREZA_OPERACAO LOJAS_NATUREZA_OPERACAO (NOLOCK)
					ON LOJAS_NATUREZA_OPERACAO.NATUREZA_OPERACAO_CODIGO = INSERTED.NATUREZA_OPERACAO_CODIGO
				 INNER JOIN CTB_LX_TIPO_OPERACAO CTB_LX_TIPO_OPERACAO (NOLOCK)
					ON CTB_LX_TIPO_OPERACAO.CTB_TIPO_OPERACAO = LOJAS_NATUREZA_OPERACAO.CTB_TIPO_OPERACAO
				 INNER JOIN LOJA_PEDIDO_DEVOLUCAO LOJA_PEDIDO_DEVOLUCAO
				    ON LOJA_PEDIDO_DEVOLUCAO.CODIGO_FILIAL_ORIGEM = INSERTED.CODIGO_FILIAL
				   AND LOJA_PEDIDO_DEVOLUCAO.NF_NUMERO = INSERTED.NF_NUMERO
				   AND LOJA_PEDIDO_DEVOLUCAO.SERIE_NF = INSERTED.SERIE_NF			 
				 INNER JOIN LOJA_PEDIDO LOJA_PEDIDO (NOLOCK)
					ON LOJA_PEDIDO.CODIGO_FILIAL_ORIGEM = LOJA_PEDIDO_DEVOLUCAO.CODIGO_FILIAL_ORIGEM
				   AND LOJA_PEDIDO.PEDIDO = LOJA_PEDIDO_DEVOLUCAO.PEDIDO

			------------------
			-- #2# - INÍCIO --
			------------------
            -- IF @@ROWCOUNT > 0 BEGIN -- #3#
			IF @@ROWCOUNT > 0 AND OBJECT_ID('OMS_CHANGE_TRACKING') IS NOT NULL BEGIN -- #3#
                DELETE OMS_CHANGE_TRACKING
                  FROM INSERTED INSERTED
                 INNER JOIN LOJAS_NATUREZA_OPERACAO LOJAS_NATUREZA_OPERACAO (NOLOCK)
                    ON LOJAS_NATUREZA_OPERACAO.NATUREZA_OPERACAO_CODIGO = INSERTED.NATUREZA_OPERACAO_CODIGO
                 INNER JOIN CTB_LX_TIPO_OPERACAO CTB_LX_TIPO_OPERACAO (NOLOCK)
                    ON CTB_LX_TIPO_OPERACAO.CTB_TIPO_OPERACAO = LOJAS_NATUREZA_OPERACAO.CTB_TIPO_OPERACAO
                 INNER JOIN LOJA_PEDIDO_DEVOLUCAO LOJA_PEDIDO_DEVOLUCAO
                    ON LOJA_PEDIDO_DEVOLUCAO.CODIGO_FILIAL_ORIGEM = INSERTED.CODIGO_FILIAL
                   AND LOJA_PEDIDO_DEVOLUCAO.NF_NUMERO = INSERTED.NF_NUMERO
                   AND LOJA_PEDIDO_DEVOLUCAO.SERIE_NF = INSERTED.SERIE_NF    
                 INNER JOIN LOJA_PEDIDO LOJA_PEDIDO (NOLOCK)
                    ON LOJA_PEDIDO.CODIGO_FILIAL_ORIGEM = LOJA_PEDIDO_DEVOLUCAO.CODIGO_FILIAL_ORIGEM
                   AND LOJA_PEDIDO.PEDIDO = LOJA_PEDIDO_DEVOLUCAO.PEDIDO
                 INNER JOIN OMS_CHANGE_TRACKING OMS_CHANGE_TRACKING (NOLOCK)
                    ON OMS_CHANGE_TRACKING.ORDERID = LOJA_PEDIDO.ID_PEDIDO_ORIGEM
            END
			---------------
			-- #2# - FIM --
			---------------
	    END
	       	
    END
    ---------------
	-- #1# - FIM --
	---------------
    
	RETURN
ERROR:
	raiserror(@errmsg, 18, 1)
	ROLLBACK TRANSACTION
END